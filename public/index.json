[
{
	"uri": "http://localhost:1313/database/sql/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": "Database INSERT INTO table (table) VALUES (1); Dynamic (Programmatic) SQL Dynamic SQL is referring to SQL statements that are constructed and executed at runtime.\nVariable Declaration Variables are declared with the \u0026lsquo;DECLARE\u0026rsquo; construct Variable names are preceded with the @ symbol Assigning value SET : single value assignment SELECT : multiple value assignment SET Variale assignemnt DECLARE @max_students INTEGER; SET @max_student = 55; SELECT @max_student AS \u0026#39;Minimum Age\u0026#39;; aa SELECT * FROM words WHERE user_id = $1 AND name ILIKE $2 ORDER BY id LIMIT $3 OFFSET $4 Back const getWords = async (userId, searchTerm, limit, offset) =\u0026gt; {\r// Construct the SQL query with placeholders for dynamic values\rconst query = `\rSELECT *\rFROM words\rWHERE user_id = $1 AND name ILIKE $2\rORDER BY id\rLIMIT $3\rOFFSET $4\r`;\r// Execute the query with the provided parameters\rconst result = await client.query(query, [userId, `%${searchTerm}%`, limit, offset]);\r// Return the result rows as an array\rreturn result.rows;\r}; "
},
{
	"uri": "http://localhost:1313/xtc/angular/day1/",
	"title": "Day1",
	"tags": [],
	"description": "",
	"content": "What is Angular Angular is an open-source front end development framework maintained by Google.\nBuilt as a side project by Miko Hevery at Google, it was originally launched in 2010 as AngularJS. This original, AngularJS, was a JavaScript based framework with the aim of simplifying the process of building dynamic, single-page web applications via a reusable component architecture, two-way data binding, and a dependency injection system that made it easier to manage complex applications with components that rely on each other.\nAngularJS became very popular, very quickly, and was adopted by many large organizations including Google, HBO, Nike, Paypal, and Microsoft.\nWith the rapid adoption of AngularJS, as well as the breakneck pace at which web development needs evolved in the mobile-explosion years, several performance and scalability limitations became apparent.\nTo address those limitations, the Angular team rewrote it from the ground up with a focus on providing a more modular, scalable, and performant framework using TypeScript as the primary language. It was released in 2016 simply as Angular and remains one of the most widely used front-end frameworks with a huge and active developer community.\nhttps://angular.io/\nAdvantabes and Disadvantages of Angular Advantages Excellent separation of presentation and logic for data driven applications Great support for single page application development Convenient two-way data binding and validation Excellent browser compatibility Support by Google Huge global developer community. Disadvantages Steep learning curve Incompatibilities between versions Overly sophisticated for smaller applications Limited SEO capabilities Decreasing popularity in recent years https://insights.stackoverflow.com/trends?tags=reactjs%2Cangular\nWhat is TypeScript TypeScript is a strict, syntactic superset of JavaScript developed and maintained by Microsoft.\nEssentially, it is a language extension for JavaScript that provides static typing through type annotations which allows us to do type checking at compile time.\nWhat that means is we can be specific with the data types that our code uses, including variables as well as the parameters and values returned from functions, and we can catch data type errors BEFORE they happen.\nWe develop in TypeScript and then when deploying or launching an app in dev mode it gets compiled down to regular JavaScript which is what the browser works with.\nhttps://www.typescriptlang.org/\nThough I will help you work through any TypeScript issues while we\u0026rsquo;re working through our Angular / Vue module, I strongly urge you to get familiar with Typescript on your own time.\nhttps://www.typescriptlang.org/docs/\nAngular Setup The only software prerequisites for getting started with local development of Angular applications are having an LTS version of Node.js and NPM installed.\nInstalling the Angular CLI For Windows users we will need to set the Execution Policy to RemoteSigned in order to install the Angular CLI globally.\nOpen a PowerShell terminal and run the following:\nSet-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned Then, run the following to install the CLI\nnpm install -g @angular/cli Angular Dev Tools https://angular.io/guide/devtools\nThat\u0026rsquo;s it. We\u0026rsquo;re ready to create our first Angular app.\nHello Angular In VSCode, in a regular (non-WSL) terminal, navigate to the folder where you want to build your Hello Angular app.\nRun the following CLI command:\nng new hello-angular Accept the defaults for the prompts by pressing enter.\nIt may take a while as the packages are installed and the application is initialized.\nThe utility will also initialize a local Git repository for us.\nRunning Hello Angular Navigate into the newly created folder.\ncd hello-angular Launch the application.\nng serve --open This too may take a while the first time it runs, but upon completion it should open a browser to http://localhost:4200\nKey Angular Files Here are some key points in the directory and file structure of an Angular application.\nsrc/main.ts This is the main entry point to the application. It compiles the application and loads AppModule to run in the browser. You generally do not need to edit this.\nsrc/app/app.module.ts Angular uses modules to group components and directives into libraries. Every application must have at least one module.\nThe root module tells the application what to load and how to load it.\nIn this case our root module is named AppModule and it is telling Angular to load and bootstrap AppComponent.\nsrc/app/app.component.ts This is the root component for our boilerplate application.\nIn the @Component decorator area we have:\nselector This defines a custom element which is what we use to include the component in any HTML view templateUrl This defines the path to the HTML view styleUrls This is an array of stylesheets that the component uses Below that is the class definition which is where the data and functions to support our component will be defined. In this case the class stores a property (called a model, in Angular) named title.\nsrc/app/app.component.html This contains the HTML template for the view.\nAs the exciting comment suggests, let\u0026rsquo;s delete the placeholder content and just output an h1 tag containing the title.\n\u0026lt;h1\u0026gt;Welcome to {{ title }}!\u0026lt;/h1\u0026gt; As soon as the file is saved the browser will reload. The angular server is watching for changes and handling hot reloading.\nsrc/index.html This contains the parent view for our single page application.\nA couple of key things to note:\nIt contains the selector that was defined in the component.\nThere is an absence of JavaScript references in this file. All of the JavaScript references are inserted into the application when it is transpiled, just before it runs in the browser.\nKey Angular Concepts and Terminology Components Components are the basic building blocks of an Angular application.\nComponents define views which are the sets of screen elements that Angular displays according to our program logic and data.\nA component\u0026rsquo;s job is to enable the user experience by presenting properties and methods for data binding that mediate between the view and the application logic.\nModules Modules collect blocks of code into single purpose units that are exportable and can be imported into other modules.\nAn Angular application is defined by a set of NgModules classes that group components, services, pipes, and other functionality into organized units.\nServices Services are injectable classes that don\u0026rsquo;t directly involve the view or application logic.\nServices are good for tasks such as fetching data, validating user input, logging and error handling.\nDecorators Decorators are used to attach metadata to classes and properties so Angular can know what the given class or property is as well as how it should work. Modules, components, and services are all classes that use decorators to mark their type and provide the needed information to allow Angular to use them.\nFor instance, the metadata for a component class defines the selector, template, and stylesheets used by the component.\nTemplates Templates are where we combine HTML with Angular markup to control what is displayed to the user.\nIn templates we have directives which provide program logic and binding markup which allows us to both interpolate property values into our HTML (Property Binding) and also to respond to user input and interaction by updating the application data (Event Binding).\nPipes Pipes are used to format, filter, and manipulate data before it is displayed to the user.\nDirectives Directives are special HTML attributes that modify the behavior of elements in the template.\nDependency Injection Dependency Injection is a design pattern that facilitates the interaction between parts of a application by defining what other parts of the application any given part needs access to in order to function. It is made up of two main roles: dependency consumers and dependency providers.\nFor more information on terms and concepts, refer to:\nThe Angular glossary: https://angular.io/guide/glossary\nThe Angular guide: https://angular.io/guide/understanding-angular-overview\nAdding a Class to our Component Let\u0026rsquo;s add a TimeOfDay class to our component to explore things a bit further.\nNear the top of app.component.ts, after the import but before the @Component decorator, add the following code:\nexport class TimeOfDay { hour: number = 10; meridiem: string = \u0026#34;AM\u0026#34;; constructor() { const date = new Date(); let hours = date.getHours(); const ampm = hours \u0026gt;= 12 ? \u0026#34;PM\u0026#34; : \u0026#34;AM\u0026#34;; hours = hours % 12; hours = hours ? hours : 12; return { hour: hours, meridiem: ampm }; } } Next, within the AppComponent class definition let\u0026rsquo;s add in a name property and also use our TimeOfDay class to add a public property named timeOfDay.\nexport class AppComponent { title = \u0026#39;hello-angular\u0026#39;; name = \u0026#39;Josh\u0026#39;; public timeOfDay = new TimeOfDay(); } Update our template to use the name and timeOfDay properties:\napp.component.html \u0026lt;h1\u0026gt;Welcome to {{ title }}!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Hello, {{ name }}.\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;It is currently {{ timeOfDay.hour }} {{ timeOfDay.meridiem }}\u0026lt;/h3\u0026gt; Conditional Output with *ngIf With Angular we can use the *ngIf directive to conditionally output an element in our template.\nIn its simplest form we just add *ngIf=\u0026ldquo;expression\u0026rdquo; and if the expression returns a truthy value the element is output.\napp.component.html \u0026lt;h1 *ngIf=\u0026#34;title\u0026#34;\u0026gt;Welcome to {{ title }}!\u0026lt;/h1\u0026gt; Test it out.\nTry changing the title property in your appComponent to an empty string.\nComplex Expressions We can also use more complex expressions with *ngIf, such as checking if a property has a specific value as well as instructing Angular to output something else if the expression returns a falsy value.\nHere\u0026rsquo;s an updated template that conditionally outputs a morning or afternoon greeting.\n\u0026lt;h1 *ngIf=\u0026#34;title\u0026#34;\u0026gt;Welcome to {{ title }}!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;ng-container *ngIf=\u0026#34;timeOfDay.meridiem === \u0026#39;AM\u0026#39;; else afternoonGreeting\u0026#34;\u0026gt; Good morning\u0026lt;/ng-container \u0026gt;, {{ name }} \u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;It is currently {{ timeOfDay.hour }} {{ timeOfDay.meridiem }}\u0026lt;/h3\u0026gt; \u0026lt;ng-template #afternoonGreeting\u0026gt; \u0026lt;ng-container\u0026gt;Good afternoon\u0026lt;/ng-container\u0026gt; \u0026lt;/ng-template\u0026gt; In this example I am outputting a fallback ng-template named afternoonGreeting if the meridiem is not AM.\nI am also utilizing which allows us to use structural directives (such as *ngIf) without adding any extra elements to the DOM.\nIn the AppComponent class, test out specific property values for hour and meridiem.\nexport class AppComponent { title = \u0026#39;hello-angular\u0026#39;; name = \u0026#39;Josh\u0026#39;; // public timeOfDay = new TimeOfDay(); public timeOfDay: TimeOfDay = { hour: 10, meridiem: \u0026#39;AM\u0026#39;, }; } Two Way Data Binding - [(ngModel)] Directive So far we\u0026rsquo;ve output the properties values of a component into the DOM, and we\u0026rsquo;ve also added in some conditional logic, but with two way data binding we can also allow the property values to be modified by user interactions via the ngModel directive and HTML inputs.\nAngular Core Modules Angular includes an assortment of core modules that provide predefined directives, services, classes, and pipes to facilitate building our applications.\nWe\u0026rsquo;ll explore other core modules later on, but for now we\u0026rsquo;ll need to import the FormsModule so that we can set up our two-way data binding between form inputs and and our component properties\nImporting the Angular FormsModule Revise app.module.ts as follows:\nimport { NgModule } from \u0026#34;@angular/core\u0026#34;; import { BrowserModule } from \u0026#34;@angular/platform-browser\u0026#34;; import { FormsModule } from \u0026#34;@angular/forms\u0026#34;; import { AppComponent } from \u0026#34;./app.component\u0026#34;; @NgModule({ declarations: [AppComponent], imports: [BrowserModule, FormsModule], providers: [], bootstrap: [AppComponent], }) export class AppModule {} On line 3 we\u0026rsquo;re importing the the FormsModule from the @angular/ namespace (which is typically where we\u0026rsquo;ll find core modules), and then on line 8 we\u0026rsquo;re adding FormsModule to the imports array in the @NgModule decorator which is how we define this modules dependencies.\nBinding an Input to a Model Add the following to our template in app.component.html\n\u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name: \u0026lt;/label \u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; [(ngModel)]=\u0026#34;name\u0026#34; /\u0026gt; Edit the value in the name input and you\u0026rsquo;ll see the greeting text in the DOM update instantly. Also note that the initial value of the input was set equal to the name property set in our component.\nSide note: There isn\u0026rsquo;t actually a value attribute on the input. Take a look in DevTools and you\u0026rsquo;ll see what I mean.\nPractice Exercise Add two more inputs into the template and bind them to the hour and meridiem properties of our timeOfDay object.\nTips:\nThe hour input should be type number Set min and max attributes (go with 1 and 24, for now) Bind it to timeofDay.hours AM / PM should be a select with options of AM and PM The binding should be on the select element, not the options Event Handling with (ngModelChange) We\u0026rsquo;ve bound our inputs to their corresponding models (properties), but at this point the hour and meridiem handling via the inputs are are independent of each other and when we reach the max value for hour we\u0026rsquo;d need to manually change the value back to 1 rather than have it loop back automatically.\nTo handle this, it would be useful to have a function that is run whenever the hour changes such that:\nIf the hour input is set to a value greater than 12 the hour property is set back to 1 (which, due to the two-way binding will also set the input to 1) Meridiem automatically changes from AM to PM accordingly. I\u0026rsquo;ll let you work out the body of the function yourself, but the event handling setup will look like this:\nAdd a function within the AppComponent class export class AppComponent {\rtitle = \u0026#39;hello-angular\u0026#39;;\rname = \u0026#39;Josh\u0026#39;;\r// public timeOfDay = new TimeOfDay();\rpublic timeOfDay: TimeOfDay = {\rhour: 10,\rmeridiem: \u0026#39;AM\u0026#39;,\r};\rhandleHourChange() {\rconsole.log(this.timeOfDay.hour);\r// fill in the rest of this to simulate clock behaviour\r}\r} On the \u0026ldquo;hour\u0026rdquo; input, bind the ngModelChange event to the function above: \u0026lt;input\rtype=\u0026#34;number\u0026#34;\rname=\u0026#34;hour\u0026#34;\rid=\u0026#34;hour\u0026#34;\rsize=\u0026#34;2\u0026#34;\rmin=\u0026#34;1\u0026#34;\rmax=\u0026#34;24\u0026#34;\rstyle=\u0026#34;width: 3em\u0026#34;\r[(ngModel)]=\u0026#34;timeOfDay.hour\u0026#34;\r(ngModelChange)=\u0026#34;handleHourChange()\u0026#34;\r/\u0026gt; Note: In the example above we are listening for the ngModelChange event. This works because we have already bound the input to timeOfDay.hour via [(ngModel)]. If we wanted to listen for change events on an input that isn\u0026rsquo;t bound to a model, we could do so by listening for (change) instead of (ngModelChange). You\u0026rsquo;ll see the equivalent of that when we set up click event listening in a couple of sllides.\nMy version of the handleHourChange is below, in white:\nhandleHourChange() { if (this.timeOfDay.hour \u0026gt; 12) { this.timeOfDay.hour = 1; } if (this.timeOfDay.hour === 12) { this.timeOfDay.meridiem === \u0026lsquo;AM\u0026rsquo; ? (this.timeOfDay.meridiem = \u0026lsquo;PM\u0026rsquo;) (this.timeOfDay.meridiem = \u0026lsquo;AM\u0026rsquo;); } } Loops with *ngFor We can use the *ngFor directive to loop through a collection of items.\nLet\u0026rsquo;s put together a set of colour swatches.\nDefine a ColourSwatch Class Above our TimeOfDay class in app.component.ts , define a ColourSwatch class with two string properties hexCode and name.\nexport class ColourSwatch {\rhexCode: string;\rname: string;\r} TypeScript Micro-Tangent Uh oh. You should be seeing some red squiggles under the property names!\nThat\u0026rsquo;s because even though we\u0026rsquo;ve specified the data types for the properties we don\u0026rsquo;t have a constructor that for this class that initialized the values to the expected type.\nThere are a few ways we could handle this, and I don\u0026rsquo;t want to go on too far a tangent, so let me just introduce you to the definite assignment assertion operator, !.\nBy appending ! to each of those properties we are telling TypeScript that we will definitely initialize their values appropriately.\nexport class ColourSwatch {\rhexCode!: string;\rname!: string;\r} Error be gone. Let\u0026rsquo;s carry on.\nInitialize an array of ColourSwatch Just below our class definition add:\nconst SWATCHES: ColourSwatch[] = [\r{ hexCode: \u0026#39;#000000\u0026#39;, name: \u0026#39;Black\u0026#39; },\r{ hexCode: \u0026#39;#FFFFFF\u0026#39;, name: \u0026#39;White\u0026#39; },\r{ hexCode: \u0026#39;#BE3455\u0026#39;, name: \u0026#39;Viva Magenta\u0026#39; },\r{ hexCode: \u0026#39;#6667AB\u0026#39;, name: \u0026#39;Very Peri\u0026#39; },\r]; Set them as a property of the AppComponent Above the handleHourChange method, add:\npublic swatches = SWATCHES; Output a div containing the name for each Swatch in the Template In app.component.html\n\u0026lt;div *ngFor=\u0026#34;let swatch of swatches\u0026#34;\u0026gt;{{swatch.name}}\u0026lt;/div\u0026gt; Accessing the Index While Looping Purely for demonstration purposes, let\u0026rsquo;s also number our colour swatches based on its index in the array.\nWe can do so by adding referencing the index as follows:\n\u0026lt;div *ngFor=\u0026#34;let swatch of swatches; let i = index\u0026#34;\u0026gt;\r{{ i + 1 }}. {{ swatch.name }}\r\u0026lt;/div\u0026gt; Notes: *ngFor works with collections. With it, you can\u0026rsquo;t directly loop between a range of numbers as you might elsewhere in JavaScript. If you do want to use *ngFor loop over a range of numbers, create an array of the numbers first then iterate through that.\nThere also isn\u0026rsquo;t an ngWhile directive. If you really want to repeatedly output a block you could use a combination of *ngIf and *ngFor directives, but\u0026hellip; you also need to keep in mind that only one structural directive is allowed per element.\nThere is, of course, far more to *ngFor.\nhttps://angular.io/api/common/NgFor\nInline Styling of Elements We can apply inline styles to elements with the usual style=\u0026quot;\u0026quot; attributes, and we can directly echo out or use expressions to set style values as well.\nColouring our Swatches \u0026lt;div\r*ngFor=\u0026#34;let swatch of swatches; let i = index\u0026#34;\rstyle=\u0026#34;background-color: {{ swatch.hexCode }};\rcolor: {{ swatch.name === \u0026#39;Black\u0026#39; ? \u0026#39;white\u0026#39; : \u0026#39;black\u0026#39; }}\u0026#34;\r\u0026gt;\r{{ i + 1 }}. {{ swatch.name }}\r\u0026lt;/div\u0026gt; The above will work, but is likely to cause warnings in your editor. The values are also only indirectly bound to the properties (via the *ngFor).\nTo bind our styles and clean up the syntax, we could rewrite the above as:\n\u0026lt;div\r*ngFor=\u0026#34;let swatch of swatches; let i = index\u0026#34;\r[style.backgroundColor]=\u0026#34;swatch.hexCode\u0026#34;\r[style.color]=\u0026#34;swatch.name === \u0026#39;Black\u0026#39; ? \u0026#39;white\u0026#39; : \u0026#39;black\u0026#39;\u0026#34;\r\u0026gt;\r{{ i + 1 }}. {{ swatch.name }}\r\u0026lt;/div\u0026gt; The thing to understand here is that the value in double quotes to the right of the equals is an expression.\nLet\u0026rsquo;s add a couple more styles to control the padding and width of our swatches before moving on.\nStyle Binding with String Expressions [style.width]=\u0026#34;\u0026#39;200px\u0026#39;\u0026#34; Style Binding with Units [style.padding.rem]=\u0026#34;1\u0026#34; Event Handling - (click) Directive Let\u0026rsquo;s make our colour swatches clickable.\nThe process is very much the same as how we handled change events.\nFirst, let\u0026rsquo;s add a selectedColourSwatch property to our component.\nThe catch is, I don\u0026rsquo;t want to specify a selected colour swatch initially. To handle this without running afoul of TypeScript rules, I can use the Union datatype to specify that the property will either be a ColourSwatch or undefined.\napp.component.ts selectedColourSwatch: ColourSwatch | undefined; Add an Event Handler Method Still in our AppComponent, add:\nhandleColourChange(swatch: ColourSwatch) {\rthis.selectedColourSwatch = swatch;\r} Registering the Event Listener While we\u0026rsquo;re looping through the swatches in out template, we can add the event listener with:\n(click)=\u0026#34;handleColourChange(swatch)\u0026#34; To verify that our click handling is working, open the Angular Dev Tools in your browser and select the app-root component.\nInitially, you won\u0026rsquo;t see a selectedColourSwatch property.\nAfter clicking on a swatch, however, you should see it in the property list.\nStyling Elements with [ngStyle] Let\u0026rsquo;s conditionally output a div showing the currently selected colour swatch and explore one more way of binding styles to it: [ngStyle]\napp.component.html \u0026lt;div\r*ngIf=\u0026#34;selectedColourSwatch\u0026#34;\r[ngStyle]=\u0026#34;{\r\u0026#39;background-color\u0026#39;: selectedColourSwatch.hexCode,\rpadding: \u0026#39;1rem\u0026#39;\r}\u0026#34;\r\u0026gt;\r\u0026lt;h2 [style.color]=\u0026#34;selectedColourSwatch.name === \u0026#39;Black\u0026#39; ? \u0026#39;white\u0026#39; : \u0026#39;black\u0026#39;\u0026#34;\u0026gt;\rYou Selected {{ selectedColourSwatch.name }}.\r\u0026lt;/h2\u0026gt;\r\u0026lt;/div\u0026gt; As you can see, there are many ways to apply styles to an element in Angular.\nThe biggest difference between [style.property] and [ngStyle] is that with the former we set a single property at a time whereas with [ngStyle] we pass in an object that can contain multiple properties.\nThough there are slight differences in how they work behind the scenes, which you use will depend on the situation and your personal preference.\nCSS and SASS with Angular If you look at the @Component decorator in app.component.ts you will see that it defines three things:\nselector templateUrl styleUrls @Component({\rselector: \u0026#39;app-root\u0026#39;,\rtemplateUrl: \u0026#39;./app.component.html\u0026#39;,\rstyleUrls: [\u0026#39;./app.component.css\u0026#39;],\r}) We can write plain-old CSS in here and it will both work as expected AND be scoped to this specific component.\nLet\u0026rsquo;s add a very simple hover effect for our colour swatches.\napp.component.css *,\r*:before,\r*:after {\rbox-sizing: border-box;\r}\rdiv:hover {\rmargin-left: 0.3rem;\r} Since we\u0026rsquo;re working with the Angular CLI we can also use Sass with no additional setup.\nAngular Sass For demonstration purposes let\u0026rsquo;s create a app.swatches.scss file, move our hover styling into it, and add the app.swatches.scss file to the styleUrls array.\napp.swatches.scss div {\rmargin: 0;\r\u0026amp;:hover {\rmargin-left: 0.3rem;\r}\r} app.component.ts @Component({\rselector: \u0026#39;app-root\u0026#39;,\rtemplateUrl: \u0026#39;./app.component.html\u0026#39;,\rstyleUrls: [\u0026#39;./app.component.css\u0026#39;, \u0026#39;./app.swatches.scss\u0026#39;],\r}) Dynamically Setting Classes Now that we have CSS in play, let\u0026rsquo;s start adding classes to our template elements.\nThe simplest form of this is with class binding, which allows us to conditionally add a single class to an element based on the result of an expression.\nClass Binding Let\u0026rsquo;s add a selected class to the selected colour swatch.\nFirst, in app.swatches.scss add a rule for div.selected:\ndiv {\rmargin: 0;\r\u0026amp;:hover {\rmargin-left: 0.3rem;\r}\r\u0026amp;.selected {\rfont-size: 1.2rem;\rfont-weight: bold;\r\u0026amp;::before {\rcontent: \u0026#34;\\00BB\u0026#34;;\r}\r}\r} Now, in app.component.html, in our *ngFor loop, add the following:\n[class.selected]=\u0026#34;swatch == selectedColourSwatch\u0026#34; Setting Multiple Classes with [ngClass] First, let\u0026rsquo;s add three classes to app.component.css (or .scss)\n.rounded {\rborder-radius: 2rem;\r}\r.bordered {\rborder: 2px solid\rblack;\r}\r.text-centered {\rtext-align: center;\r} There are several ways that we can set multiple classes on an element using the [ngClass] directive.\nOur expression can return a space separated list of one or more classes as a string\n[ngClass]=\u0026#34;\u0026#39;rounded bordered text-centered\u0026#39;\u0026#34; It can return an array of strings\n[ngClass]=\u0026#34;[\u0026#39;rounded\u0026#39;, \u0026#39;bordered\u0026#39;, \u0026#39;text-centered\u0026#39;]\u0026#34; It can return an array, but we can conditionally control the items\n[ngClass]=\u0026#34;[\r\u0026#39;rounded\u0026#39;,\r\u0026#39;text-centered\u0026#39;,\rselectedColourSwatch.name === \u0026#39;White\u0026#39; ? \u0026#39;bordered\u0026#39; : \u0026#39;\u0026#39;\r]\u0026#34; Or, we can return an object where each property whose value is truthy is added\n[ngClass]=\u0026#34;{\rrounded: true,\rcentered: true,\rbordered: selectedColourSwatch.name === \u0026#39;White\u0026#39;\r}\u0026#34; Assignment export class Category {\rid!: number;\rname!: string;\rslug!: string;\r}\rexport class Tag {\rid!: number;\rname!: string;\rslug!: string;\rpivot?: any;\r}\rexport class Project {\r\u0026#39;id\u0026#39;: number;\r\u0026#39;title\u0026#39;: string;\r\u0026#39;slug\u0026#39;: string;\r\u0026#39;excerpt\u0026#39;: string;\r\u0026#39;body\u0026#39;: string;\r\u0026#39;url\u0026#39;: string | null;\r\u0026#39;published_date\u0026#39;: string | null;\r\u0026#39;image\u0026#39;: string | null;\r\u0026#39;thumb\u0026#39;: string | null;\r\u0026#39;category_id\u0026#39;: number | null;\r\u0026#39;created_at\u0026#39;: string;\r\u0026#39;updated_at\u0026#39;: string;\r\u0026#39;category\u0026#39;: Category | null;\r\u0026#39;tags\u0026#39;: Tag[] | undefined;\r} "
},
{
	"uri": "http://localhost:1313/xtc/vue/day1/",
	"title": "Day1",
	"tags": [],
	"description": "",
	"content": "What is Vue.js Vue.js is also an open-source front-end JavaScript framework.\nVue.js was built by Evan You as a side project after working for Google and encountering the limitations of working with AngularJS. He built it with the aim of being as powerful as Angular, but lighter and easier to learn and use.\nAccording to Evan You:\nVue.js is a more flexible, less opinionated solution. It’s only an interface layer so you can use it as a light feature in pages instead of a full-blown SPA.”\nAdvantages and Disadvantages of Vue Advantages Simplicity and ease of use It\u0026rsquo;s an ideal choice for small to medium sized projects Learning curve Vue syntax has a more flexible architecture and intuitive templating system than either React and Angular. Size The Vue.js downloadable only around 18 KB. Performance Due to its lightweight nature and streamlined architecture, Vue outperforms React and Angular. Like React, Vue makes use of the Virtual DOM which makes UI updates blazing fast. Readability Vue.js uses a single-file-component architecture. Everything is a component and components contain all of the HTML, CSS, and JavaScript in one file. Growth Though still smaller than the React or Angular, the Vue.js community is growing. Disadvantages Lack of scalability Smaller overall community Fewer learning resources Fewer plugins and libraries available Excessive flexibility The unopinionated nature of Vue.js can lead to poorly structured code. Less mature tooling Less enterprise adoption Learning curve for advanced features Despite the simplicity and ease of use that makes Vue.js easy to get started with, more advanced features can be challenging to implement, particularly since the overall ecosystem has less to offer by way of ready-to-use plugins and libraries. https://survey.stackoverflow.co/2022/#section-most-popular-technologies-web-frameworks-and-technologies\nhttps://2022.stateofjs.com/en-US/libraries/front-end-frameworks/\nVue Extensions and DevTools Browser DevTools\nhttps://devtools.vuejs.org/guide/installation.html\nVSCode Extension : Volar\nhttps://marketplace.visualstudio.com/items?itemName=MisterJ.vue-volar-extention-pack\nVue Setup Loading Vue.js Via CDN Given how lightweight Vue.js is, if you are working on a relatively small project and/or wanting to quickly prototype components, it is entirely possible and reasonable to simply load Vue.js from a CDN, add a bit of script to our HTML, mount the app and go!\nindex.html\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt;\r\u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt;\r\u0026lt;title\u0026gt;Hello Vue from CDN\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1 id=\u0026#34;app\u0026#34;\u0026gt;{greeting}\u0026lt;/h1\u0026gt;\r\u0026lt;script src=\u0026#34;https://unpkg.com/vue@3/dist/vue.global.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rconst { createApp } = Vue;\rcreateApp({\rdata() {\rreturn {\rgreeting: \u0026#34;Hello Vue World!\u0026#34;,\r};\r},\r}).mount(\u0026#34;#app\u0026#34;);\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Creating a Vue Application via CLI (with build step) This is the way to go for more complex applications.\nThe process is very much like initializing a React or Angular app.\nThe only requirement is Node.js version 16 or higher.\nIn your terminal, navigate to the parent folder of where you want your Vue app to live, then run:\nnpm init vue@latest If it isn\u0026rsquo;t already installed, this will install create-vue (think create-react-app) for you, and then it will show a set of prompts walking you through the project config.\nHint: When you get the Project name: prompt, just start typing your project name.\nGo ahead and accept the defaults for the rest of the prompts:\nHello Vue App In the last step we initialized a Vue project.\nThe (now familiar) next steps are:\ncd hello-vue-app npm install npm run dev open your browser to http://localhost:5173/ Quick Tour of the Boilerplate Project index.html Has a div with id=\u0026ldquo;app\u0026rdquo; which is where our app will mount Loads /src/main.js as a module main.js imports { createApp } from vue Imports the App component from ./App.vue imports ./assets/main.css mounts the App component in the #app div App.vue This is our root Vue component It is a Single-File Component (SFC) and encapsulates all of the component\u0026rsquo;s logic, template, and styles, neatly split out into \u0026lt;script\u0026gt;, \u0026lt;template\u0026gt;, and \u0026lt;style\u0026gt; tags. There are two ways that Vue components can be authored:\nOptions API Composition API This boilerplate code is using the Composition API. We\u0026rsquo;ll compare the two in the next slide.\nOptions and Composition APIs There are two styles for authoring Vue components: the Options API and the Composition API. They both achieve the same result, and are largely interchangeable, but they differ in how we write our code.\nOptions API Using the Options API we explicitly export an object that contains a set of options properties such as data, methods, and mounted. These options properties are then available by referencing this on the component instance.\n\u0026lt;script\u0026gt;\rexport default {\r// Properties returned from data() become reactive state\r// and will be exposed on `this`.\rdata() {\rreturn {\rcount: 0\r}\r},\r// Methods are functions that mutate state and trigger updates.\r// They can be bound as event listeners in templates.\rmethods: {\rincrement() {\rthis.count++\r}\r},\r// Lifecycle hooks are called at different stages\r// of a component\u0026#39;s lifecycle.\r// This function will be called when the component is mounted.\rmounted() {\rconsole.log(`The initial count is ${this.count}.`)\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Count is: {{ count }}\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt; Composition API With the Composition API, instead of having an options object we define the component\u0026rsquo;s logic using imported API functions.\nThere\u0026rsquo;s more going on behind the scenes and as such this approach requires a broader knowledge of the Vue.js architecture, but allows us to write less boilerplate code since more things are handled at compile time.\nHere\u0026rsquo;s the same component as above, but using the Composition API.\n\u0026lt;script setup\u0026gt;\rimport { ref, onMounted } from \u0026#39;vue\u0026#39;\r// reactive state\rconst count = ref(0)\r// functions that mutate state and trigger updates\rfunction increment() {\rcount.value++\r}\r// lifecycle hooks\ronMounted(() =\u0026gt; {\rconsole.log(`The initial count is ${count.value}.`)\r})\r\u0026lt;/script\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Count is: {{ count }}\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt; For the remainder of today\u0026rsquo;s lesson I\u0026rsquo;ll work with the Options API since it keeps things closer to the surface.\nTemplate Interpolation We can reactively output any data that we\u0026rsquo;ve set on a component using the mustaches syntax in our template.\nContinuing with the counter example example we have a single property for count declared as part of the data option.\n\u0026lt;script\u0026gt;\rexport default {\r// Properties returned from data() become reactive state\r// and will be exposed on `this`.\rdata() {\rreturn {\rcount: 0,\r};\r}, We\u0026rsquo;re dynamically outputting the value of count in the template here:\n\u0026lt;template\u0026gt;\r\u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Count is: {{ count }}\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt; Practice Add greeting and name properties to the component data and output them in an h1 above the button.\nNote: The content inside the mustaches can be any valid JavaScript expression, but cannot be statements. As in React, this means you\u0026rsquo;ll find extensive use of ternary and logical operators in those interpolation blocks.\nMore Practice Change the h1 content such that if the count is 0 it outputs the greeting, but otherwise it outputs an encouraging message to the user.\nAttribute binding with v-bind We can use mustache interpolation to dynamically output content within elements, but mustaches cannot be used to set HTML attributes.\nInstead, when we want to set an element\u0026rsquo;s attribute to a property of the component we use the v-bind directive.\nThe basic syntax for v-bind is:\nv-bind:attribute=\u0026#34;property\u0026#34; Let\u0026rsquo;s explore this by:\nAdding a style classes for .winning and .losing that set text color to green and red respectively.\n\u0026lt;style scoped\u0026gt;\rh1 {\rwidth: 100%;\r}\r.winning {\rcolor:\rgreen;\r}\r.losing {\rcolor:\rred;\r}\r\u0026lt;/style\u0026gt; Adding a gameStatus property to our component data\ndata() {\rreturn {\rcount: 0,\rgreeting: \u0026#34;Hello again\u0026#34;,\rname: \u0026#34;Josh\u0026#34;,\rgameStatus: null,\r};\r}, Add a setGameStatus method that sets this.gameStatus to winning if count is greater than 0, losing if less than 0, or or null.\nAdd a decrement method that decrements the count\nHave both increment() and decrement() call this.setgameStatus\nBind the class attribute of the h1 element to the value of gameStatus\n\u0026lt;h1 v-bind:class=\u0026#34;gameStatus\u0026#34;\u0026gt;\r{{ count === 0 ? greeting : \u0026#34;Keep going\u0026#34; }}, {{ name }}\r\u0026lt;/h1\u0026gt; With that in place, we are dynamically setting the class attribute on our h1 to the value of gameStatus.\nShorthand for v-bind Since v-bind is so ubiquitous, there is a special shorthand syntax where we just start our binding with a :\n\u0026lt;h1 :class=\u0026#34;gameStatus\u0026#34;\u0026gt;\r{{ count === 0 ? greeting : \u0026#34;Keep going\u0026#34; }}, {{ name }}\r\u0026lt;/h1\u0026gt; It looks weird at first, but you\u0026rsquo;ll get used to it quickly.\nEvent Handling with v-on To listen for events we can either use the v-on directive or the shorthand @ symbol.\nRegardless of which syntax is used, we can either call a method defined on the component or provide an inline handler.\nShorthand Syntax w/ Method Handler This will listen for clicks and call either the increment or decrement method, both of which are defined in the methods property of our options object.\n\u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Increment\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;decrement\u0026#34;\u0026gt;Decrement\u0026lt;/button\u0026gt; v-on Syntax w/ Method Handler \u0026lt;button v-on:click=\u0026#34;jackpot\u0026#34;\u0026gt;Jackpot!\u0026lt;/button\u0026gt; Inline Handler \u0026lt;button\r@click=\u0026#34;() =\u0026gt;\r{\rthis.count = 0;\rthis.setGameStatus();\r}\r\u0026#34;\r\u0026gt;\rReset\r\u0026lt;/button\u0026gt; Receiving the Event Object When an event is thrown we can pass the native event object into our handler method (or an inline function) using the automatically populated $event variable or using the usual event syntax with an inline arrow function.\n\u0026lt;button @click=\u0026#34;scorePoints($event)\u0026#34;\u0026gt;5\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;(event) =\u0026gt; scorePoints(event)\u0026#34;\u0026gt;10\u0026lt;/button\u0026gt; scorePoints(e) {\rconst points = Number(e.target.textContent);\rthis.count += points;\rthis.setGameStatus();\r}, The above works for all of the usual native DOM events, such as:\nkeyup, keydown focus, blur change, submit etc. Shortly, we\u0026rsquo;ll be setting up custom events as well, and the syntax/pattern for handling those will be the same.\nForm Input Two-Way Binding To implement two-way binding between properties and form inputs we can use a combination of v-bind and v-on, or we can use the more concise v-model directive to accomplish both at once.\nUsing v-bind (:) and v-on (@) \u0026lt;div\u0026gt;\r\u0026lt;label for=\u0026#34;greeting\u0026#34;\u0026gt;Greeting:\u0026lt;/label\u0026gt;\r\u0026lt;input\rtype=\u0026#34;text\u0026#34;\rid=\u0026#34;greeting\u0026#34;\r:value=\u0026#34;greeting\u0026#34;\r@input=\u0026#34;\r(e) =\u0026gt; {\rthis.greeting = e.target.value;\r}\r\u0026#34;\r/\u0026gt;\r\u0026lt;/div\u0026gt; Using v-model \u0026lt;div\u0026gt;\r\u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name:\u0026lt;/label\r\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; v-model=\u0026#34;name\u0026#34; /\u0026gt;\r\u0026lt;/div\u0026gt; These work for more than just text inputs.\nFor more info see the Form Input Bindings guide: https://vuejs.org/guide/essentials/forms.html#text\nConditional Rendering Vue.js provides a set of directives for handling conditional rendering of elements.\nv-if If we only want to render an element when an expression is true, we can use the v-if directive.\n\u0026lt;h1 v-if=\u0026#34;count \u0026gt;= 50\u0026#34;\u0026gt;You Win!\u0026lt;/h1\u0026gt; v-else-if If we want to have a secondary conditional we can use v-else-if.\n\u0026lt;h1 v-if=\u0026#34;count \u0026gt;= 50\u0026#34;\u0026gt;You Won!\u0026lt;/h1\u0026gt;\r\u0026lt;h1 v-else-if=\u0026#34;count \u0026lt;= -5\u0026#34;\u0026gt;You Lost!\u0026lt;/h1\u0026gt; v-else Lastly, we have v-else.\n\u0026lt;h1 v-if=\u0026#34;count \u0026gt;= 50\u0026#34;\u0026gt;You Won!\u0026lt;/h1\u0026gt;\r\u0026lt;h1 v-else-if=\u0026#34;count \u0026lt;= -5\u0026#34;\u0026gt;You Lost!\u0026lt;/h1\u0026gt;\r\u0026lt;div v-else\u0026gt;Keep on clickin\u0026#39;...\u0026lt;/div\u0026gt; Once again, it may take some getting used to the syntax for these since there is no clear connection between the v-if, v-else-if, and v-else, ESPECIALLY if you have complex templating, but\u0026hellip;\na) With practice it becomes natural b) If you find yourself with overly complex templates that may be a clue that you should break things up into smaller components. v-show Vue provides another directive for conditionally displaying an element, v-show .\nThe syntax is the same as v-if, but it always renders the element to the DOM and then toggles the CSS display property to control visibility.\n\u0026lt;div v-show=\u0026#34;count \u0026gt;= 50 || count \u0026lt;= -5\u0026#34;\u0026gt;\r\u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;Play Again?\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt; Containers for Grouped Conditional Rendering If (and when) you have a multiple elements that you want to conditionally render based on the same expression, you can wrap them in a container element OR if you don\u0026rsquo;t want to clutter up your DOM you can wrap them in a \u0026lt;template\u0026gt; tag.\n\u0026lt;template v-if=\u0026#34;count \u0026lt; 50 \u0026amp;\u0026amp; count \u0026gt; -5\u0026#34;\u0026gt;\r\u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Increment\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;decrement\u0026#34;\u0026gt;Decrement\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;scorePoints($event)\u0026#34;\u0026gt;5\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;scorePoints($event)\u0026#34;\u0026gt;10\u0026lt;/button\u0026gt;\r\u0026lt;button v-on:click=\u0026#34;jackpot\u0026#34;\u0026gt;Jackpot!\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;Reset\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt; Loops with v-for Where conditionals go, loops tend to follow.\nFor most of our looping needs in Vue we use variations of the v-for directive.\nI\u0026rsquo;ve added an array of task objects to the component data, and outside the component I declared a let variable so that we can easily increment ids:\n\u0026lt;script\u0026gt;\rlet id = 0;\rexport default {\r// Properties returned from data() become reactive state\r// and will be exposed on `this`.\rdata() {\rreturn {\rcount: 0,\rgreeting: \u0026#34;Hello again\u0026#34;,\rname: \u0026#34;Josh\u0026#34;,\rgameStatus: null,\rtasks: [\r{ id: id++, text: \u0026#34;Learn React\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Angular\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Vue\u0026#34;, done: false },\r], v-for with an Array \u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li v-for=\u0026#34;task in tasks\u0026#34; :key=\u0026#34;task.id\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34; /\u0026gt;\r\u0026lt;span :class=\u0026#34;{ done: task.done }\u0026#34;\u0026gt;{{ task.text }}\u0026lt;/span\u0026gt;\r\u0026lt;button @click=\u0026#34;deleteTask(task)\u0026#34;\u0026gt;X\u0026lt;/button\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt; Although Vue is more flexible than React about each item in a list needing a unique key attribute, it is still a good idea to bind one - particularly if you\u0026rsquo;ll potentially be mutating the array.\nIf necessary you we can also access the index of each item in an array with:\n\u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li v-for=\u0026#34;(task, index) in tasks\u0026#34; :key=\u0026#34;index\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34; /\u0026gt;\r\u0026lt;span :class=\u0026#34;{ done: task.done }\u0026#34;\u0026gt;{{ task.text }}\u0026lt;/span\u0026gt;\r\u0026lt;button @click=\u0026#34;deleteTask(task)\u0026#34;\u0026gt;X\u0026lt;/button\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt; v-for with a Range v-for can also be used to loop through integers, though this is truly an odd duck.\n\u0026lt;span v-for=\u0026#34;n in 10\u0026#34;\u0026gt;{{ n }}\u0026lt;/span\u0026gt; The mind-boggling quirk here is that n has an initial value of 1.\nI do not know why!\nComputed Properties Computed properties are a mechanism for tracking, updating, and caching state when dependencies change.\nThey are declared as another property of the options object (distinct from data, methods, lifecycle hooks etc.) but are then used in templates as though they were any other data property.\nThis example declared filteredTasks as a computed property that depends on tasks and hideCompleted.\nexport default {\r// Properties returned from data() become reactive state\r// and will be exposed on `this`.\rdata() {\rreturn {\r...\rtasks: [\r{ id: id++, text: \u0026#34;Learn React\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Angular\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Vue\u0026#34;, done: false },\r],\rhideCompleted: false,\r};\r},\r// Computed Properties are a mechanism for automatically updated state when dependencies change\rcomputed: {\rfilteredTasks() {\rreturn this.hideCompleted\r? this.tasks.filter((t) =\u0026gt; !t.done)\r: this.tasks;\r},\r},\r... The template, including a button for toggling the value of hideCompleted, would then be:\n\u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li v-for=\u0026#34;task in filteredTasks\u0026#34; :key=\u0026#34;task.id\u0026#34;\u0026gt;\r\u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34; /\u0026gt;\r\u0026lt;span :class=\u0026#34;{ done: task.done }\u0026#34;\u0026gt;{{ task.text }}\u0026lt;/span\u0026gt;\r\u0026lt;button @click=\u0026#34;deleteTask(task)\u0026#34;\u0026gt;X\u0026lt;/button\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;button @click=\u0026#34;hideCompleted = !hideCompleted\u0026#34;\u0026gt;\r{{ hideCompleted ? \u0026#34;Show All\u0026#34; : \u0026#34;Hide Completed\u0026#34; }}\r\u0026lt;/button\u0026gt; Child Components Naturally, Vue applications are usually composed of a hierarchy of nested components and provide mechanisms for passing and manipulating data through relationships.\nLet\u0026rsquo;s handle individual tasks in the task list as child components.\nPassing Props to a Child Component First, let\u0026rsquo;s create a new SFC named Task.vue in the components directory and set it to receive an Object to be stored in props as task. We can also move the .done class styling.\nsrc/components/Task.vue\n\u0026lt;script\u0026gt;\rexport default {\rprops: {\rtask: Object,\r},\r};\r\u0026lt;/script\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34; /\u0026gt;\r\u0026lt;span :class=\u0026#34;{ done: task.done }\u0026#34;\u0026gt;{{ task.text }}\u0026lt;/span\u0026gt;\r\u0026lt;button @click=\u0026#34;deleteTask(task)\u0026#34;\u0026gt;X\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;style scoped\u0026gt;\r.done {\rtext-decoration: line-through;\r}\r\u0026lt;/style\u0026gt; Then, in App.vue we need to:\nImport the Task component Declare it in the components property of our the App options Render the Task component in our template, using v-bind to bind the individual task object to the corresponding prop in the child component. \u0026lt;script\u0026gt;\rimport Task from \u0026#34;./components/Task.vue\u0026#34;;\rlet id = 0;\rexport default {\rcomponents: {\rTask,\r},\r...\r\u0026lt;/script\u0026gt; \u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li v-for=\u0026#34;task in filteredTasks\u0026#34; :key=\u0026#34;task.id\u0026#34;\u0026gt;\r\u0026lt;Task :task=\u0026#34;task\u0026#34; /\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt; Emitting Events from Child Components To pass data from a child component to a parent we can emit custom events, including a payload, from the child and then use a v-on listener in the parent to respond accordingly.\nTo accomplish this, in the Task component we\u0026rsquo;ll:\nAdd an emits property with the name of the custom event we will emit Add a methods object containing the local deleteTask which then emits the custom event attached the task itself as a second argument \u0026lt;script\u0026gt;\rexport default {\rprops: {\rtask: Object,\r},\remits: [\u0026#34;taskDelete\u0026#34;],\rmethods: {\rdeleteTask(task) {\rthis.$emit(\u0026#34;taskDelete\u0026#34;, task);\r},\r},\r};\r\u0026lt;/script\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;task.done\u0026#34; /\u0026gt;\r\u0026lt;span :class=\u0026#34;{ done: task.done }\u0026#34;\u0026gt;{{ task.text }}\u0026lt;/span\u0026gt;\r\u0026lt;button @click=\u0026#34;deleteTask(task)\u0026#34;\u0026gt;X\u0026lt;/button\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;style scoped\u0026gt;\r.done {\rtext-decoration: line-through;\r}\r\u0026lt;/style\u0026gt; In the parent component we then just listen for the taskDelete event and pass the payload on to the deleteTask method.\n\u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li v-for=\u0026#34;task in filteredTasks\u0026#34; :key=\u0026#34;task.id\u0026#34;\u0026gt;\r\u0026lt;Task :task=\u0026#34;task\u0026#34; @taskDelete=\u0026#34;(task) =\u0026gt; deleteTask(task)\u0026#34; /\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt; Mutating State! We can now mark tasks as done and delete them, so let\u0026rsquo;s add support for adding tasks to our list.\nTo accomplish this we will:\nAdd a newTask property, initialized to an empty string Add an addTask() method that pushes a new task onto the tasks array, using the value of newTask for the task text. Add a form to our template that listens for submit events, prevents default form behaviour, and then calls addTask Within the form, add an input that is bound to the newTask property data() {\rreturn {\rcount: 0,\rgreeting: \u0026#34;Hello again\u0026#34;,\rname: \u0026#34;Josh\u0026#34;,\rgameStatus: null,\rnewTask: \u0026#34;\u0026#34;,\rtasks: [\r{ id: id++, text: \u0026#34;Learn React\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Angular\u0026#34;, done: true },\r{ id: id++, text: \u0026#34;Learn Vue\u0026#34;, done: false },\r], addTask() {\rthis.tasks.push({ id: id++, text: this.newTask, done: false });\rthis.newTask = \u0026#34;\u0026#34;;\r}, \u0026lt;h2\u0026gt;Task List\u0026lt;/h2\u0026gt;\r\u0026lt;form @submit.prevent=\u0026#34;addTask\u0026#34;\u0026gt;\r\u0026lt;input v-model=\u0026#34;newTask\u0026#34; /\u0026gt;\r\u0026lt;button\u0026gt;Add Task\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; "
},
{
	"uri": "http://localhost:1313/xtc/php/1-docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "Install https://www.docker.com/get-started/\nDocker VSC Extension https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker\nWindow user needs WSL, Ubuntu\nInstall WSL Contianers, Hyper-V, Windows Subsystem for Linux Features enabled. Control pannel \u0026gt; uninstall program \u0026gt; turn windows features on/off Check Windows Subsstem for Linux Reboot WSL Setting in VSC Adding WSL in VSC : Ctrl+, \u0026gt; wsl \u0026gt; check integrated: use wsl profiles Install Ubuntu Ubuntu for WSL : Download Ubuntu 22.04.1 LTS from Microsoft apps PowerShell $ wsl \u0026ndash;install Verify : $ wsl -l -v Version set : $ wsl \u0026ndash;set-default-version 2 VSC Extensions : WSL, Remote Development Docker : Settings \u0026gt; General \u0026gt; WSL2 based engine | Resources \u0026gt; Ubuntu-22.04 check Docker Docker is platform for building, running, and shipping applications in a self contained environments - called containers.\nEach of the containers are isolated, configured, environments - and by using the same container across development teams docker helps eliminate the otherwise inevitable \u0026ldquo;It works on my machine\u0026rdquo; issues that are otherwise common headaches for developers.\nAnother way to solve the same problem would be through the use of virtual machines. If everyone involved in a project sets up a a virtual machine (VMWare, VirtualBox, etc.) with the same specs you could also achieve the desired isolation and standardization, but each virtual machine requires a full operating system in order to run which can be costly, slow, and resource intensive.\nContainers, on the other hand, are lightweight and much more performant because they at a low level they rely on the operating system of the host machine.\nGetting Started Clone a repository\ndocker run --name repo alpine/git clone https://github.com/docker/getting-started.git\rdocker cp repo:/git/getting-started/ .\rcd [repository name] Build the image\ncd getting-started\rdocker build -t docker101tutorial . Run Container\ndocker run -d -p 80:80 \\ --name docker-tutorial docker101tutorial You should now be able to open a browser : http://localhost/tutorial\nDocker Images Docker Images are, essentially, the blueprint for Docker Containers (which are essentially an image in its running state).\nImages are made up with\nThe runtime environment : Specific OS kernel, Core platform (Node, PHP\u0026hellip;) Application code Dependencies that the application requires Configuration settings : Env, Port mappings Commands that need to run at build time The Image\u0026rsquo;s Filesystem Images are READ ONLY. When we want to make changes to an image, we build a new image (though we can, to an extent, use volume mappings to make them a bit more dynamic during development).\nParent Image The first layer in an Image is usually a parent image, which supplies the the OS and runtime environment.\nhttps://hub.docker.com/search?q=\u0026amp;type=image\nDownload Parent image :\ndocker pull node:10.24.1-alpine3.11 //name of parent image from dockerhub Docker Containers Containers are, essentially, an isolated, runnable, instance of a Image.\nStart Container : Run below in Terminal\ndocker run \u0026lt;paste your Image ID\u0026gt; Run Interactive mode (keeping it from exiting immediately)\ndocker run -i \u0026lt;Image ID\u0026gt; Docker File (Dockerize) Simple Express app npm init -y And then create app.js\nCreate file in the root, name it Dockerfile (Capital D) and add below\nFROM node:18-alpine\rCOPY . .\rCMD [\u0026#34;node\u0026#34;, \u0026#34;app\u0026#34;] In terminal,\ndocker build -t nodeinabox . HTTP request app (More complex) Folder structure\nDockerfile\n# Specify our base image\rFROM node:18-alpine\r# Copy our files to the image\rCOPY . .\r# Set the working directory\rWORKDIR /server\r# Install Project Dependencies\rRUN npm install\r# Expose Port 4000 for mapping\rEXPOSE 4000\r# Run our Express server\rCMD [\u0026#34;node\u0026#34;, \u0026#34;server\u0026#34;] .dockerignore\nnode_modules\r*.md\r.git Build in your Terminal\ndocker build -t express-in-a-box . Running a Container from the Image Open Docker Desktop\nSelect the Images panel\nClick the Run icon\nExpand the Optional Settings\nPorts : 4000 and Run Docker Images, Layers, Caching Docker Images are read only.\nWhen we make changes to our source code we will need to rebuild our Image (until we discuss Volumes).\nThough our simple Express app is doesn\u0026rsquo;t have much by way of dependencies, it would be a royal pain if every time we wanted to build an Image for a React app it had to go out and download all of the node modules with each build.\nFortunately, Docker caches Layers and does its best to expedite things.\nThe thing to know here is that each Layer builds upon the previous and as soon as a Layer has changed all subsequent Layers cannot be constructed from cache.\nOptimized Docker file # Specify our base image\rFROM node:18-alpine\r# Set the working directory\rWORKDIR /server\r# Copy package.json to the image\rCOPY ./server/package.json .\r# Install Project Dependencies\rRUN npm install\r# Copy the rest of our code.\rCOPY ./server .\r# Expose Port 4000 for mapping\rEXPOSE 4000\r# Run our Express server\rCMD [\u0026#34;node\u0026#34;, \u0026#34;server\u0026#34;] And build\ndocker build -t express-in-a-box . and then build again\nAll our layers are CACHED! Nice!\nMake a change in server.js and then build once more.\nSince our changes happened in a Layer after the npm install, we successfully avoided re-installing dependencies in our build. Yay us!\nDocker Volumes As developers we want to make development as quick and painless as possible so that we can have more fun. Even with caching in place, it\u0026rsquo;s would be a pain to have to rebuild our container every time we make a change to our code.\nDocker Volumes relieve this pain by allowing us map local directories to directories in our container.\nVolumes come into play when we run a Container, without our Image having to be rebuilt until/unless we want to share our ship our app.\nTo demonstrate how this works, let\u0026rsquo;s start by installing nodemon as a global package in our image, and then change the last CMD to run the dev script.\nDockerfile # Specify our base image\rFROM node:18-alpine\r# Install nodemon, globally\rRUN npm install -g nodemon \u0026hellip;etc\n# Run our Express server via nodemon in the dev script\rCMD [\u0026#34;npm\u0026#34;, \u0026#34;run\u0026#34;, \u0026#34;dev\u0026#34;] package.json \u0026#34;scripts\u0026#34;: {\r\u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;,\r\u0026#34;dev\u0026#34;: \u0026#34;nodemon --legacy-watch server.js\u0026#34;\r}, The \u0026ndash;legacy-watch flag is important. Without it nodemon won\u0026rsquo;t detect changes in our container volume.\nbuild\ndocker build -t express-in-a-box . Jump back into Docker Desktop and run the image to spin up the container, but this time in the Optional Settings we\u0026rsquo;ll also set up Volumes. The Host path needs to be an absolute path to our app directory. In my case it will be: C:\\Users\\jsolomon11\\JBS\\Courses\\SSD\\Intake28\\WebDev2\\Lectures\\Day12\\Docker\\SSD-FWD2-DockerExplorer\\ExpressInABox\nThe Container path will just be an absolute path from the container root /app We also need to add a second volume in our container, this time without a Host path, so that it uses the node_modules from the container instead of our local.\nDocker Compose We\u0026rsquo;ve explored plenty of Docker for one morning, but there\u0026rsquo;s one more thing worth introducing before we set sail: Docker Compose.\nDocker Compose is a tool for managing multiple Images and Containers that work together for a project.\nFor example, for a typical web application we might want to containerize:\nA web server / API back end. A database server A client-side app To do so we would set up each of these with individual Dockerfile s, and in a parent directory we\u0026rsquo;d have a single docker-compose.yaml defining:\nThe path to each Dockerfile The corresponding Container names Port mappings Volume Mappings Practice The following is NOT required, but if you would like some practice working with Docker and/or you would like to be able to exclude the \u0026ndash;no-experimental-fetch flag when running your Code Challenge project\u0026hellip; See if you can figure out how to run it in a Node v16 container.\nFind an appropriate parent image on Dockerhub\rGo to Dockerhub\rSearch Node\rSwitch to the Tags tab\rFilter with \u0026#34;16-a\u0026#34;\rPull the desired parent image\rdocker pull node:16-alpine\rAdd a Dockerfile in the root of the project\rSpecify the base image\rFROM node:16-alpine\rSet a working directory for volume mapping\rWORKDIR /app\rCopy package.json to image\rCOPY package.json .\rInstall project dependencies\rRUN npm install\rCopy the rest of your files\rCOPY . .\rExpose port 3000\rEXPOSE 3000\rRun gulp\rCMD [\u0026#34;npx\u0026#34;, \u0026#34;gulp\u0026#34;]\rBuild the image\rdocker build -t code-challenge:node16 .\rOpen Docker Desktop\rLocate the image\rClick Run\rUnder Optional Settings\rSet the Host port to 3000\rUnder Volumes\rSet Host Path to the absolute path to your project root i.e. C:\\Users\\jsolomon11\\JBS\\Courses\\SSD\\Intake28\\WebDev2\\Lectures\\Day12\\Docker\\SSD-FWD2-DockerExplorer\\html-project-master\rSet Container path to /app\rRun\rOpen your browser to localhost:3000 That\u0026rsquo;s it. The project is now running in a container with Node v16\n"
},
{
	"uri": "http://localhost:1313/aws/ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/frontend/css/flex/",
	"title": "Flexbox",
	"tags": [],
	"description": "",
	"content": "Flexbox Single dimension. Direct children become flex items\nParent .parent { display: flex; } Align center (Parent container) .parent { display: flex; justify-content: center // main axis align-items: center; // cross axis } Flex Parent Properties Flex Direction flex-direction: row; Values : column (vertical), row-reverse, column-revers Main axis : row (left to right), column (top to bottom) Flex Wrap Default\nflex-wrap: nowrap; // 한 줄에 쭉 정렬하는거, 공간 없으면 shrink Values : wrap (다음 줄로 넘어감), wrap-reverse (새로운 아이템이 추가 되면 cross axis 거꾸로 추가)\nFlex Flow Shorthand for combination of flex-direction and flex-wrap\nflex-flow: column wrap; // flex-direction, flex-wrap Flex Gaps row-gap: 10%;\rcolumn-gap: 10%;\rgap: (row column); Flex Child Properties Flex Grow How much the item takes ‘extra space’ (after wrapping if wrap is enabled), along the main axis\nflex-grow: 0 // Unitless Flex Shrink How much the item shrink when there is ‘not enough’ space along the main axis\nflex-shrink: 1 // Unitless If you don’t want item to shrink flex-shrink: 0;\nFlex Basis To set the initial minimum size along the main axis (minimum width or height)\nflex-basis: auto Unit: em,px, %, etc Ex) flex-basis: 200px; Flex Shorthand Grow + Shrink + Basis\nValue 1개: flex: (flex-grow) or (flex-basis)px; // 유닛 있으면 그로우, 아니면 베이시스 Value 2개: flex: (flex-grow) (flex-shrink); (flex-grow) (flex-basis)px; Value 3개: flex: (flex-grow) (flex-shrink) (flex-basis); Ordering Flex Items Changing the orders. Screen reader 머시기 땜시 HTML에서 바꾸는게 더 낫긴 함 아래 참고 https://webaim.org/blog/flexbox-and-the-screen-reader-experience/\n.container : nth-child(n) { order: 3; } Flex Alignment and Justification Properties justify-content (main axis, parent) Parent, main axis flex-start, flex-end, center space-between: space out between items, outside items go to edges space-around: space but yes space before border space-evenly : even spaces align-items Parent, cross axis flex-start / flex-end / center / baseline align-self Child에서, align-items랑 속성은 같음\nalign-content Align wrapped content (flex-wrap: wrap일 때) flex-start / flex-end / center / space-between / space-around / space-evenly / stretch\nplace-self justify-content + align-self\nPractice Flexbox Froggy https://flexboxfroggy.com/\nCheat sheet https://yoksel.github.io/flex-cheatsheet/\n"
},
{
	"uri": "http://localhost:1313/frontend/html/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": "Form Form Data Flow User filles the inputs User submits the form User inputs are validate Data from the form is sent to a processing script(JS or PHP) Form data is processed (client side or server side) Processor(JS) returns a status and response data Visual feedback given to the user (option) Form Element Attributes action: URL of the form processing endpoint (file) method : GET, POST name : sent to the processor Form Methods GET Data is sent to the query parameters in the URL (Don’t send sensitive info) GET URL can be bookmarked POST Data is transmitted as part of the HTTP request body. (sent to the processor) Input : Attributes type name : for the server id : for CSS/JS disabled : visible, does not send the data to the server readonly : visible, simmilar to disable but send the date to the server hidden : invisible, date is sent required placeholder : prompt text in text inputs pattern : data validation using regex with javascript Input : Types \u0026lt;input type=\u0026#34;“types”\u0026#34; /\u0026gt; text attributes : name, id, minlength, maxlength, size, value, required textarea long form text no value attribute no self closing \u0026lt;textarea\u0026gt; \u0026lt;/textarea\u0026gt; attributes : row=“height”, cols=“equivalent of size for text input” password single-line text field checkbox Select multiple options input is self closing so they are grouped via the name attribute should have a value attribute checked =“true”: if you want to make it initially checked \u0026lt;input type=\u0026#34;“checkbox”\u0026#34; name=\u0026#34;“css”\u0026#34; value=\u0026#34;“css”\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;“css”\u0026#34;\u0026gt;CSS\u0026lt;/label\u0026gt; radio Single selection Group with same name checked=“true” : initial check \u0026lt;input type=\u0026#34;“radio”\u0026#34; name=\u0026#34;“aa”\u0026#34; value=\u0026#34;“a”\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;“a”\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;“radio”\u0026#34; name=\u0026#34;“aa”\u0026#34; value=\u0026#34;“b”\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;“b”\u0026#34;\u0026gt;\u0026lt;/label \u0026gt;\u0026lt;/label\u0026gt; select name: when form is submitted id: for label multiple : if you want to select more than one option : should have value selected : initial value group : optgroup \u0026lt;select multiple\u0026gt; \u0026lt;optgroup label=\u0026#34;“Person”\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;“”\u0026#34; selected\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;/optgroup\u0026gt; \u0026lt;/select\u0026gt; submit displayed as button, you can submit the form hitting enter (submit is not required) Submit : button Reset : button, clears the forms \u0026lt;input type=\u0026#34;“submit”\u0026#34; value=\u0026#34;“button”\u0026#34; /\u0026gt; ETC : email, tel, number, color Label Element \u0026lt;label for=\u0026#34;“id\u0026#34; of the input”\u0026gt;NAME\u0026lt;/label\u0026gt; Fieldset and Legend Elements fieldset : grouping of inputs, labels legend : caption(label) of the fieldset \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Acount info\u0026lt;/legend\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input\u0026gt; * n \u0026lt;/fieldset\u0026gt; Placeholder Attribute Accessibility Issues Do not omit label, if you want them to hide, use css below .visually-hidden { position: absolute !important; width: 1px !important; height: 1px !important; padding: 0 !important; margin: -1px !important; overflow: hidden !important; clip: rect(0, 0, 0, 0) !important; white-space: nowrap !important; border: 0 !important; } Styling Placeholder Text since placeholder is a pseudo-element from a CSS perspective, use below input::placeholder { color: blue } Input :focus when click the input, you can style it too using pseudo selector .form input:focus { color: blue} HTML5 Form Validation HTML5 does simple input validation required attribute is one of it type=“email” : html5 validate if it is correct email format style …:valid { } / …:invalid { } Pattern Attribute Using regex Attributes : use title, aria-label together Style: ..:invalid { } \u0026lt;input type=\u0026#34;“”\u0026#34; … pattern=\u0026#34;“REGEX”\u0026#34; title=\u0026#34;“error\u0026#34; message” aria-label=\u0026#34;“error\u0026#34; message” /\u0026gt; HTML regex: https://www.html5pattern.com/ Responsive Images Web Image Formats JPEG, PNG, GIF, SVG, WebP\nImage attributes : srcset, sizes HTML img attributes to handle responsive images It is about which image is loaded when the page is rendered. (when changing screen size, img doesn’t change). Srcset Developer : provide a set of images and resolution information Browser : choose the most appropriate one based on the screen dimensions srcset=“1) image path 2) space 3) image’s real size in pixel + w” \u0026lt;img src=\u0026#34;“image”\u0026#34; alt=\u0026#34;“alt”\u0026#34; srcset=\u0026#34;“img_path\u0026#34; 2400w, img_path 1200w, …” /\u0026gt; Sizes Developer : specify what size of the image under media condition A media condition : media query. (Generally same as css media query breakpoint) Image size : when the media condition is true, the image size (not percentage, px, vw only) Default image size when the condition is not met. (after last comma) \u0026lt;img .. size=\u0026#34;”(max-width:\u0026#34; 1260px) calc(100vw - 60px), 1200px” /\u0026gt; Testing srcset \u0026amp; sizes Inspect \u0026gt; network \u0026gt; disable cache \u0026gt; refresh(f5)\nPicture Element Source tells the browser to load a certain image (srcset) at a certain screen width (media). Img inside of is default. When you don’t specify, img doesn’t show up. Flow : find media in picture \u0026gt; srcset, size \u0026gt; display appropriate img\u0026gt; if none, display img \u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;images/vancouver-skyline-winter-retina.jpg 1600w, sizes=\u0026#34;(max-width: 960px) calc(100vw - 40px), 920px\u0026#34; media=\u0026#34;(max-width: 600px)\u0026#34; \u0026lt;img src=“image\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; IMAGE SOFTWARE AND NOTES Image Editing Software Photopea\nhttps://www.photopea.com/\nVectr\nhttps://vectr.com/\nPixlr\nhttps://pixlr.com/\nToast.ui Image Editor\nhttps://github.com/nhn/tui.image-editor\nFree Images Unsplash\nhttps://github.com/nhn/tui.image-editor\nPixabay\nhttps://pixabay.com/\nCC Search\nhttps://wordpress.org/openverse/?referrer=creativecommons.org\nWikimedia Commons\nhttps://commons.wikimedia.org/wiki/Main_Page\nGoogle Images with a filter by license\n"
},
{
	"uri": "http://localhost:1313/c/intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": "C# C# is a simple and powerful object-oriented programming language created by Microsoft.\n.NET Development Platform A platform that can create websites, services, desktop.\n.NET consists of the Common Lnguage Runtime (CLR) and the .NET Framework class library. CLR is a runtime layer between the application and the operation system. It manages code at execution time, providing memory management while enforcing code accuracy.\nVisual Studio Microsoft Visual Studio is an Integrated Development Environment (IDE).\nQuick Start Open Visual Studio \u0026gt; Create a new project \u0026gt; Console App (.NET Framework)\n"
},
{
	"uri": "http://localhost:1313/react/1-intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": "React Javascript library for web and native user interfaces\nEnvironment Setup 1. Use Boilerplate Create React App npx create-react-app [name]\rcd [name]\rnpm start Vite NPM Yarn npm create vite@latest yarn create vite 2. Manual Setup Compile JSX, Transpile JS : Babel Linting : ESLing Generate index.html : Webpack Reload on save : NPM Initial File Structure src components page folders App.js 404.js index.js Index.js import React from \u0026#34;react\u0026#34;; import { render } from \u0026#34;react-dom\u0026#34;; import { BrowserRouter as Router } from \u0026#34;react-router-dom\u0026#34;; import \u0026#34;bootstrap/dist/css/bootstrap.min.css\u0026#34;; import App from \u0026#34;./components/App\u0026#34;; import \u0026#34;./index.css\u0026#34;; render( \u0026lt;Router\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Router\u0026gt;, document.getElementById(\u0026#34;app\u0026#34;) ); App.js import React from \u0026#34;react\u0026#34;; import { Route, Switch } from \u0026#34;react-router-dom\u0026#34;; import HomePage from \u0026#34;./home/HomePage\u0026#34;; import AboutPage from \u0026#34;./about/AboutPage\u0026#34;; import Nav from \u0026#34;./common/Nav\u0026#34;; import PageNotFound from \u0026#34;./PageNotFound\u0026#34;; function App() { return ( \u0026lt;div className=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;Nav /\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34; component={HomePage} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; component={AboutPage} /\u0026gt; \u0026lt;Route component={PageNotFound} /\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Nav.js import React from \u0026#34;react\u0026#34;; import { NavLink } from \u0026#34;react-router-dom\u0026#34;; const Nav = () =\u0026gt; { const activeStyle = { color: \u0026#34;#F15B2A\u0026#34; }; return ( \u0026lt;nav\u0026gt; \u0026lt;NavLink to=\u0026#34;/\u0026#34; activeStyle={activeStyle} exact\u0026gt; Home \u0026lt;/NavLink\u0026gt; \u0026lt;NavLink to=\u0026#34;/about\u0026#34; activeStyle={activeStyle}\u0026gt; About \u0026lt;/NavLink\u0026gt; \u0026lt;/nav\u0026gt; ); }; export default Nav; Key terms JSX Javascript syntax for writing HTML in Javascript\nComponents "
},
{
	"uri": "http://localhost:1313/python/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Install Python Check Python version\npython3 --version If Python doesn\u0026rsquo;t exist, install python here https://www.python.org/downloads/\nbrew install python3 Pipenv Pipenv is a packaging tool that provides all necessary means to create a virtual environment for the Python project.\nInstall Install python \u0026gt; Install pip \u0026gt; Install pipenv\npip install pipenv\rpipenv --version Create a new project In the root of working directory\npipenv --python 3.11 Activate the virtual environment You have to activate to use virtual environment and use python command line\npipenv shell Install packages pipenv install [name] Run the app pipenv run python name.py\ror\rpython name.py Install dependencies pipenv install VSC Extension Python\n(I\u0026rsquo;m going to use VSC for Python for now but soon will shift to Pycharm)\nFile extension name.py\nOfficial Docs https://www.python.org/\nhttps://docs.python.org/\nPython Python is script Language. It is one of the most powerful programming languages, mostly used in data science, machine learning, and big data analytics.\nProgramming Language A combination of words and symbols that is used to write programs. It is a way programmers communicate with computers through set of instructions known as code or program. Programming languages are compiled languages. Compiled Language Language that requires a compiler to convert the source code to machine code(bits 0, 1). Script Language Programming language that supports scripts. Scripts Scripts are small programs mainly used to automate the execution of a specific function in a specific runtime environment. The scrpts are not compiled. The code is transformed to binary code and executed line by line by interpreter.\rHow Python interpreter works Editor -\u0026gt; Source File -\u0026gt; Interpreter (Compiler, Virtual Machine) -\u0026gt; Running Program\nCompiler vs Interpereter Compiler converts the code into machine code before program run\nInterpreters converts the code into machine code When the program is run\nScript languages : Python, Javascripts\nSoftware Development Process Analysis \u0026gt; Design \u0026gt; Coding \u0026gt; Testing \u0026gt; Deploy \u0026gt; Maintain\nDebug A mode to run the code step by step\nUnit Test A part of code that the developer needs to write. It is a function that test the application functions.\n"
},
{
	"uri": "http://localhost:1313/xtc/1job.md/",
	"title": "Job Interview",
	"tags": [],
	"description": "",
	"content": "Resume url:\nssd.oatwebdesign.com\nAccess Code:\nSSD-RESUMES\u0026amp;\nResume Review Resume : 100 Skip : 70 Interview : 3-5\nGeneral bad : very self focused question like asking about vacation / salary .. follow up : 5 days Golden Rules Be prepared Use Evidence Be (polished) you What to expect from interview : how you are evaluated? Can you do the job? Will you do the job? Will you be a pin or pleasure to manage? Fit on team? What is your potential? 4 Types of Interview Questions Introductory Tell me about your self refer the pic (SWAP) Skills Work A Personal Tell me why you applied to this job! (Anlyze the job, Point out your 3 strenth like tech) Analyze the company what does they do / who\u0026rsquo;s their client? size of organization what differentiates their business what tech do they use who is their ideal candidate how can you add value to this organization what is their workplace culture what are their corporate values who is on their tech team/leadership team Get ready Informed Candidate Prepared Candidate Authentic Candidate How to prepare Resarch : too much resaerch will make you over confidence! (mission, core value, lined in or glassdoor, teamblind) Revise : cacking the code interview, leetcode Reach out : networking top 3 strengths (tech) tech : react, node : portfolio once the idea come up, i do right away : a lot of git repos outgoing : pictures 3 things that differentiate me ? consistency know how to handle stress/burnout (working hard and taking a rest well) dont get feel bad about bad comments about me lol Technical refer a learning hub\nquestions about : memeory, understanding, exploratory\nTips for detail : Describe in details, show your thinking, provide examples for junior : attitute is key\nGeneral Question What is your greatest weakness ? List the weekness saying \u0026lsquo;sometimes\u0026rsquo; 3 specific actions you are taking now to overcome : I\u0026rsquo;m addressing this by\u0026hellip;. Money it is negotiation about value salary negotiation : preparation, approach find your value to negotiate Behavioural asking about future behaviour SHARE Situation Hinderance/Proble Actions you took (70% of entire) Results Evaluation, Reflections What to ask at the end of work 1. Functional, Technology What project lnaguages, frameworks and libraries do you use What source control do you use What software development process do you use What does your project cycle typically look like How do you typically deal with a project running behind schedule? 2. The Role and Success Who are your key clients Define success for this role? Where is this work performed and what technology is provided? Who is on the development team? How is team structured? Where does development sit in the organization What is challening about this role After inverview Send a thank you letter Mention : I appreicate learning about ~~~~ Inverview Lab Smart Questions o Ask I just completed the BCIT Software Systems Development, an intensive, 9-month hands on program I am proud to share that I developed .net mvc project \u0026hellip;.\nInterview Questions Soft skills Your super power middleware in NodeJS css vs Tailwind Conditional statement in Vue.js Relational DB vs NoSQL HTML : src set, sizes In flexbox, what is to place an item? "
},
{
	"uri": "http://localhost:1313/aws/5-lambda/lambda-function/",
	"title": "Lambda Function",
	"tags": [],
	"description": "",
	"content": "Lambda function in VSC Install\nnpm i pg\rnpm init -y Add Module to package.json\n\u0026#34;type\u0026#34; : \u0026#34;module\u0026#34; everything (node module, json files) has to be one file, same path as index.js\nConfigure index.js DB Setup in index.js connectionString will be added in environment setup on AWS\nimport pg from \u0026#34;pg\u0026#34;;\rconst { Pool } = pg;\rlet pool;\rif (!pool) {\rconst connectionString = process.env.DATABASE_URL;\rpool = new Pool({\rconnectionString,\rapplication_name: \u0026#34;\u0026#34;,\rmax: 1,\r});\r} Handler event.requestContext.http.method : distinguitsh what request is\nexport const handler = async (event) =\u0026gt; {\rswitch (event.requestContext.http.method) {\rcase \u0026#34;GET\u0026#34;:\rreturn await getWords(event);\rcase \u0026#34;POST\u0026#34;:\rreturn await postWord(event);\rcase \u0026#34;PUT\u0026#34;:\rreturn await putWord(event);\rcase \u0026#34;DEL\u0026#34;:\rreturn await deleteWord(event);\rdefault:\rreturn {\rstatusCode: 405,\rbody: \u0026#34;Method Not Allowed\u0026#34;,\r};\r}\r}; Get example JSON.parse() and JSON.stringify() to convert the data\nconst getWords = async (event) =\u0026gt; {\rconst body = JSON.parse(event.body);\rconst result = await ...SQL query...\rconst res = {\rstatusCode: 200,\rbody: JSON.stringify(result),\r};\rreturn res;\r}; Delete example let id = event?.pathParameters?.id\rlet intId = parseInt(id)\r... sql query ...\rconst response = {\rstatusCode: 200,\rbody: JSON.stringify(books),\r}; Database SQL query Use it inside each request function or create a separate database.js file\n// GET\rconst getLocations = async (event) =\u0026gt; {\rconst res = await pool.query(`\rSELECT * FROM locations JOIN weather ON locations.id = weather.location_id;\r`);\rconst response = {\rstatusCode: 200,\rheaders: {\r\u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34;,\r},\rbody: JSON.stringify(res.rows),\r};\rreturn response;\r};\r// POST\rconst createLocation = async (event) =\u0026gt; {\rconst newLocation = JSON.parse(event.body);\rconst userId = event.requestContext.authorizer.jwt.claims.sub;\rawait pool.query(\u0026#34;BEGIN\u0026#34;);\rconst locationQuery = {\rtext: \u0026#39;INSERT INTO locations (name, timezone, user_uuid VALUES ($1, $2, $3) RETURNING id\u0026#39;,\rvalues: [newLocation.name, newLocation.timezone, userId],\r};\rconst locationResult = await pool.query(locationQuery);\rconst weatherQuery = {\rtext: \u0026#39;INSERT INTO weather (location_id, timestamp, temperature, description, user_uuid) VALUES ($1, $2, $3, $4, $5)\u0026#39;,\rvalues: [\rlocationResult.rows[0].id,\rnew Date(),\rnewLocation.weather.temperature,\rnewLocation.weather.description,\ruserId,\r],\r};\rawait pool.query(weatherQuery);\rawait pool.query(\u0026#34;COMMIT\u0026#34;);\rconst response = {\rstatusCode: 201,\rheaders: {\r\u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34;,\r},\rbody: JSON.stringify(locations),\r};\rreturn response;\r}; Check if user is valid : use can check this with \u0026lsquo;sub\u0026rsquo; in the token Upload to Lambda Compress files (not folder) : package.json, node_modules, index.js Back to Lambda \u0026gt; Upload from \u0026gt; .zip file Lambda configuration in AWS Key : DATABASE_URL\nValue : postgresql://byul:[PASSWORD]@absurd-beast-2237.g95.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full\nEdit Lambda function\nAdd Environment variables in AWS \u0026gt; Lambda \u0026gt; Edit environment variables as DATABASE_URL / \u0026lsquo;from cockroach connection\u0026rsquo;\nTest API Lambda Test or Postman or Curl in Terminal :\ncurl --request POST \\ -- header \u0026#34;content-type:\u0026#34;application/json\u0026#34; \\ --data \u0026#39;{\u0026#34;name\u0026#34; : \u0026#34;White Chicks}\u0026#39; \\ https://url for the post React app JSON.stringify() when sending the data\nconst token = await getAccessToken(); const newData = { name: name, timezone: timezone, weather: { temperature: temperature, description: description }, }; const resres = await fetch(\u0026#34;https://el7eechsu5.execute-api.ca-central-1.amazonaws.com/weather\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: JSON.stringify(newData), headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Authorization: token, }, }).then((res) =\u0026gt; res.json()); * internal server error : usually error in server code\nDeploy in Netlify folder : lowercase file : uppercase npm run build \u0026gt; ci=~~로 변경 env variables (react: .env, REACT_APP_NAME public \u0026gt; _redirects \u0026gt; and add below /* /index.html 200 ** S3 \u0026amp; API Gateway https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-upload-image-s3/\nRailway DB npm i mysql2 Railway DB Configuration\nimport mysql from \u0026#39;mysql2\u0026#39;\rconst pool = mysql\r.createPool({\rhost: process.env.MYSQLHOST,\ruser: process.env.MYSQLUSER,\rpassword: process.env.MYSQLPASSWORD,\rdatabase: process.env.MYSQLDATABASE,\rport: process.env.MYSQLPORT || 3306,\r})\r.promise() "
},
{
	"uri": "http://localhost:1313/leetcode/",
	"title": "LeetCode",
	"tags": [],
	"description": "",
	"content": "LEETCODE Theory Easy "
},
{
	"uri": "http://localhost:1313/database/mssql/",
	"title": "MS SQL",
	"tags": [],
	"description": "",
	"content": "SQL Server : Relational Database Management System\nRDMS\nData SEcurity Data Integrity Referential Integrity ERD (An Entity Relationship Diagram)\nEntity : Tables Entity Properties : Columns Each table has a primary key\nPrimary key : Unique value on every table Foreign Key : Defines a relationship to another table Conventions Table Name : PascalCase Table Property (Column), Attribute : camelCase Row : Tuple Relation/Association Schema SQL SQL is Structured Query Language, is used to interact with the Database Engine.\nCreate a Database\nCREATE DATABASE Name; Delete a Database\nDROP DATABASE Name; Data Types Type Description INT -2,147,483,648 to 2,147,483,647 DECIMAL(p,s) p defaults to 18, s defaults to 0 NUMERIC(p,s) same as decimal BIT Integer 0, 1, or null MONEY -922,337,203,685,477.5808 to 922,337,203,685,477.5807 DATE 0001-01-01 ~ 9999-12-31 TIME hours minuites and secounds on a 24 hour clock DATETIME date + time CHAR(size) fixed length with a max of 8,000 characters VARCHAR(size) varaible length with a max size of 8,000 p (precision) : The maximum total number of decimal digits to be stored. s (scale) : The number of decimal digits that are stored to the right of the decimal point. SELECT - extracts data from a database UPDATE - updates data in a database DELETE - deletes data from a database INSERT INTO - inserts new data into a database CREATE DATABASE - creates a new database ALTER DATABASE - modifies a database CREATE TABLE - creates a new table ALTER TABLE - modifies a table DROP TABLE - deletes a table CREATE INDEX - creates an index (search key) DROP INDEX - deletes an index\nConvention Database name : PascalCase Table name : PascalCase, singular (?) Column name : camelCase, singular Create Table "
},
{
	"uri": "http://localhost:1313/asp.net/basic/",
	"title": "MVC Basics",
	"tags": [],
	"description": "",
	"content": "MVC Model : Database Logic View : Razor markup (HTML embedded C# code) Controller : User interacts Why MVC? For the rapid application development and maintenance\rDbContext Class The link between the db and the c# It contains database connection and schema Entity Framwork Automate database related activities with .NET\nOpen a connection to the db Create dataset Convert data from the dataset (ApplicationDbContext) Create Entity Framework Create ASP .Net Core Web App (Model-View-Controller) Check Place solution and project in the same directory Framework: .NET 6.0 (Lng-term support), Authentication type: None Check Check Configure for HTTPS Entry Point program.cs \u0026amp; appsettings.json\napp.MapControllerRoute( name: \u0026#34;default\u0026#34;, pattern: \u0026#34;{controller=Home}/{action=Index}/{id?}\u0026#34;); MapControllerRoute() : defines where the processing flow will go first. app.Run() : Application start. Layout Shared templates are in Views\u0026gt;Shared folder.\n\u0026lt;main role=\u0026#34;main\u0026#34; class=\u0026#34;pb-3\u0026#34;\u0026gt;\r@RenderBody()\r\u0026lt;/main\u0026gt;\r...\r@await RenderSectionAsync(\u0026#34;Scripts\u0026#34;, required: false) @RenderBody() : It is a placed where the current view is swapped int. @RenderSection() : JavaScript files that get pulled into this View. @ symbol indicates to the compiler that C# code is to follow. Connect with DB Connect SQL Sever, Create DB\nRun script in Package Manager Console. Install the right version (Match with Framework Core version)\nInstall-Package Microsoft.EntityFrameworkCore.Tools\rInstall-Package Microsoft.EntityFrameworkCore.SqlServer\rInstall-Package Microsoft.EntityFrameworkCore Then, Run script below (Initial Connection to DB)\nScaffold-DbContext \u0026#34;Server=[SERVERNAME];Database=[DBNAME];Trusted_Connection=True;\u0026#34; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models Identity Framework Manages authenticated users in your web application\nCreate Identity Framework Create ASP .Net Core Web App (Model-View-Controller) Check Place solution and project in the same directory Framework: .NET 6.0 (Lng-term support) Authentication type: Individual Account Check Check Configure for HTTPS Required Packeges (Match the version with framwork version) Entity Framework packages will be installed automatically.\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore Microsoft.AspNetCore.Identity.EntityFrameworkCore Microsoft.AspNetCore.Identity.UI Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools Visible the Identity Files Pages relateted to Identity are not visible in the project. To make it visible,\nRight click Areas \u0026gt; Add \u0026gt; New Sacffold Item \u0026gt; Identity \u0026gt; Override all files\nAnd then, select the ApplicationDbContext file and add\nIf you don\u0026rsquo;t match the framework version and the packages, it causes the Scaffolding error.\nEdit Identity Files Create an additional tables in the same database for Identity Information such as RegisteredUser. Modifying ASP Tables directly is not recommended. Create a class for RegisteredUser(Code First) and then come back here.\nTo enable access to the code first data, the context should be accessed through dependency injection through the controller\u0026rsquo;s constructor.\n1. Import DB inside identity.cshtml.cs file private readonly ApplicationDbContext _context; public RegisterModel(..., ApplicationDbContext context) { ...; _context= context; } 2. Save to DB After if (result.Succeeded)\nMyRegisteredUser registerUser = new MyRegisteredUser() { Email = Input.Email, FirstName = Input.FirstName }; _context.MyRegisteredUsers.Add(registerUser); _context.SaveChanges(); 3. Accessing Secured Areas In Identity framework, you can use [Authorize] annotation. Also, user name can be accessed to User.Identity.Name\n[HomeController.cs]\n// Dependency Injection private readonly ApplicationDbContext _context; // Import DB // Add to Controller constructor public HomeController(ILogger\u0026lt;HomeController\u0026gt; logger, ApplicationDbContext context) { _logger = logger; _context = context; } // Only logged in user can access to this controller [Authorize] public IActionResult SecureArea() { string userName = User.Identity.Name; // User Info var registeredUser = _context.MyRegisteredUsers .Where(ru =\u0026gt; ru.Email == userName) .FirstOrDefault(); // DB logic return View(registeredUser); // send the registeredUser model to the view } [View]\n@model MvcWebAppDay3Exe.Models.MyRegisteredUser // import model\ror\r@using AppName.ViewModels\r@model IEnumerable\u0026lt;practiceVM\u0026gt; // passed from controller\r@{\rViewData[\u0026#34;Title\u0026#34;] = \u0026#34;SecureArea\u0026#34;;\r}\r\u0026lt;h1\u0026gt;SecureArea\u0026lt;/h1\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;h4\u0026gt;MyRegisteredUser\u0026lt;/h4\u0026gt;\r\u0026lt;hr /\u0026gt;\r\u0026lt;dl class=\u0026#34;row\u0026#34;\u0026gt;\r\u0026lt;dt class = \u0026#34;col-sm-2\u0026#34;\u0026gt;\r@Html.DisplayNameFor(model =\u0026gt; model.Email)\r\u0026lt;/dt\u0026gt;\r\u0026lt;dd class = \u0026#34;col-sm-10\u0026#34;\u0026gt;\r@Html.DisplayFor(model =\u0026gt; model.Email)\r\u0026lt;/dd\u0026gt;\r\u0026lt;dt class = \u0026#34;col-sm-2\u0026#34;\u0026gt;\r@Html.DisplayNameFor(model =\u0026gt; model.FirstName)\r\u0026lt;/dt\u0026gt;\r\u0026lt;dd class = \u0026#34;col-sm-10\u0026#34;\u0026gt;\r@Html.DisplayFor(model =\u0026gt; model.FirstName)\r\u0026lt;/dd\u0026gt;\r\u0026lt;/dl\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;a asp-action=\u0026#34;Edit\u0026#34; asp-route-id=\u0026#34;@Model?.Email\u0026#34;\u0026gt;Edit\u0026lt;/a\u0026gt; |\r\u0026lt;a asp-action=\u0026#34;Index\u0026#34;\u0026gt;Back to List\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt; "
},
{
	"uri": "http://localhost:1313/pluralsight/",
	"title": "Pluralsight",
	"tags": [],
	"description": "",
	"content": "Work Pluralsight Unit Test React/Redux SQL "
},
{
	"uri": "http://localhost:1313/pluralsight/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "redux : react state management library\nVersion React 17 Redux 4 React Router 5 Environment Build Dev environment Compile JSX Transpile JS Linting Generate index.html Reload on save =\u0026gt; one command (npm) with Node, Webpack, Babel, ESLint, npm Scripts Webpack webpack.config.dev.js file Babel Transpile modern JS : Tell Babel what browsers you need to support Compile JSX to JS : So the browser understand the code Configure Babel Go to package.json and add below \u0026#34;babel\u0026#34;: {\r\u0026#34;presets\u0026#34;: [\r\u0026#34;babel-preset-react-app\u0026#34;\r]\r}, NPM package.json \u0026#34;scripts\u0026#34;: {\r\u0026#34;start\u0026#34;: \u0026#34;webpack serve --config webpack.config.dev.js --port 3000\u0026#34;\r}, npm start to run\nDebugging put debugger; inside the app\nESLint ESLint will alert us when we make mistakes\nSummary Webpack\nBabel ESLint React Component Approaches Create React Components There are 4 Ways to Create React Components\n1. createClass Component The original way to create a React component\nvar HellowWorld = React.createClass({ render: function () { return \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;; }, }); 2. JS Class Component class HelloWorld extends React.Component { constructor(props) { super(props); } render() { return \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;; } } 3. Function Component function HelloWorld(props) { return \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;; } 4. Arrow Function Component const HelloWorld = (props) =\u0026gt; Hello World\nClass Component vs Function Component React Life Cycle React Hool (useEffect, useRef,\u0026hellip;) Container vs Presentation Container (Stateful, Controller View) Have little or no markup ex) Backend for the frontend Mainly passing data and actions down to child components. Knows about Redux Often statueful Presentation (Stateless, View) Nearly all markup Receipt data and actions via props Doesn\u0026rsquo;t know about Redux Often no state Initial App Structure Intro to Redux State The state is a built-in React object that is used to contain data or information about the component. A component\u0026rsquo;s state can change over time. Whenever it changes, the component re-renders.\nState Management Lift State (Parent to Child Component) Lifted to common ancestor of two components Pass down to children : Prop drilling Good for small app React Context You can use global data Import the context and consume the context in your component Provider : In your top level component Consumer : Use Consumer where you use global data. Redux Has one separte Store to store global data Any components can dispatch an action (ex. createUser) -\u0026gt; Redux Store update to the new data Any connected components receieved this new data from the Redux store =\u0026gt; It rerender! Redux vs. Context API Redux는 Flux 아키텍처 패턴을 구현한 라이브러리로, 전역 상태 관리를 위해 사용된다. Redux는 애플리케이션의 상태를 중앙 집중적으로 관리하고, 상태 변경을 예측 가능하도록 만든다. 이를 위해 Redux는 불변성을 유지하고, 상태 변경을 위한 액션(Action)을 사용하며, 이 액션들을 통해 상태를 변경하는 리듀서(Reducer)를 작성한다.\n반면, Context API는 React v16.3에서 소개된 기능으로, 컴포넌트 트리에서 전역 데이터를 공유하기 위한 방법이다. Context API는 Provider와 Consumer를 사용하여 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달한다. 이를 통해 Redux와 같은 전역 상태 관리가 가능하지만, Redux보다는 간단하고 쉽게 구현할 수 있다.\nRedux Redux is a predictable state container designed to help you write JavaScript apps that behave consistently across client, server, and native environments\nWhy Redux One Store : Redux centralized all of your application state in a single store, avoid storing the same data more than once Recuced Bolilerplate (less boilerplate than Flux) Isomorphic/Universal Friendly : Architecture is friendly to server rendering your React components Immutable Store Hot Reloading Time-travel debugging : step foward and backward through state Small (2k) 3 Core Redux Principles 1. One immutable store Your application state is placed in a single immutable store\n2. Actions trigger changes The only way to change state in Redux is to emit an action\n3. Reducers update state (Reducers return updated state) State changes are handled by pure functions which are called reducers\nRedux Flow Store, Action, Reducer\nStore Store is where storing global state.\n// Create Store let store = createStore(reducer); store.dispatch(action) The store can dispatch an action\nstore.subscribe(listener) can subscribe to a listener\nstore.getState() return its current state\nreplaceReducer(nextReducer) replace a reducer, for hot reloading\nv changing state is only by dispatching the action. v actions are handled by reducers\rAction {type: RATE_COURSE, rating: 5} The events happening in the application are called actions. Actions are plain objects containing a description of an event. An action must have a type property. It describes a user\u0026rsquo;s intent.\nIt can be simple number, boolean, any value that is serializable. No functions or promises.\nActions typically created by \u0026lsquo;Action creators\u0026rsquo;. Typically the action creator has the same name as the action\u0026rsquo;s type.\n// Action Creator rateCourse(rating) { return { type: RATE_COURSE, rating: rating } // returing action } Reducer Reducer is a function that takes state in and action and returns new state to change(update) the store. Usually contains a switch statement\nWhen the new state is returned from the Reducer, the store is updated.\nReact re-renders any components that are utilizing the data using React-Redux.\nReducer\nfunction myReducer(state, action) { switch (action.type) { case \u0026#34;INCREMENT_COUNTER\u0026#34;: state.counter++; // state is immutable, can\u0026#39;t change like this. return state; default: return state; } } Reducer example\nfunction myReducer(state, action) { switch (action.type) { case \u0026#34;INCREMENT_COUNTER\u0026#34;: return { ...state, counter: state.counter + 1 }; // right way to update the state. default: return state; } } Copy the object : \u0026hellip;state Update the counter property from copied obejct : counter: state.counter + 1 Reducers must be pure.\nThey should produce no side effects\nForbidden in Reducers Mutate arguments Perform side effects : like API calls or routing transitions Call non-pure functions A reducer\u0026rsquo;s return value should depend solely on the values of its parameters\nIt should call no other non-pure funtions like date.now or math.random\nInstead of mutating state, Reducers should return an updated copy of state. Redux will use that copy to update the store\nAll Reducers are called on each dispatch : That is why all reducers should return the untoched state as the default\nEach reducer only handles its slice of state.\nSubscription Store에 보관된 State를 가져옴\nImmutability Redux store is immutable.\nImmutability? To change state, return a new object. Immutable state : instead of changing your state object, you must return a new object that represents your application\u0026rsquo;s new state.\nMutating is updating the state\nImmutable already\nNumber String Boolean Undefined Null =\u0026gt; every time you change the value of these, a new copy is created.\nMutable\nObjects Arrays Functions Handlilng Immutable State Native JS Object.assign Spread operator Map, filter, reduce Libraries Immer seamless-immutable react-addons-update Immutable.js Why Immutability? Each time you need to change your store\u0026rsquo;s state, you must return an updated copy.\nWhy? 3 reasons.\nClarity It is clear to know what file you have to open to see the state changing. Performance Imporve performance It doesn\u0026rsquo;t have to check if the property in the state has changed or not (because it is immutable). Instead, it checks the reference in the memory to see if the state has changed or not. Awesome Sauce Time-travel debugging Undo/Redo Turn off individual actions Play interations back Handling Immutablility How Do I Enforce Immutability?\nuse library like immer, immutable.js, seamless-immutable,,,, Connecting React to Redux Container vs Presentational Components Container Presentational Focus on how things work Focus on how things look Aware of Redux Unaware of Redux Subscribe to Redux State Read data from props Dispatch Redux actions Invoke callbacks on props React-Redux Introduction React-Redux React-redux ties your React Components together to Redux. It consists with Provider component and the Connect function.\nProvider It is utilized at your app\u0026rsquo;s route. It wraps your entire application.\n\u0026lt;Provider store={this.props.store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;Provider\u0026gt; Connect function A function provided by React Redux. It connects your React components to the Redux store.\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorPage); mapStateToProps mapDispatchToProps A Chat with Redux Redux Flow \u0026hellip;\n"
},
{
	"uri": "http://localhost:1313/leetcode/theory/",
	"title": "Theory",
	"tags": [],
	"description": "",
	"content": "Brute force A method of accomplishing something primarily by means of strength, without the use of great skill\nBig O Big O, also known as Big O notation, represents an algorithm\u0026rsquo;s worst-case complexity. It uses algebraic terms to describe the complexity of an algorithm.\nBig O defines the runtime required to execute an algorithm by identifying how the performance of your algorithm will change as the input size grows. But it does not tell you how fast your algorithm\u0026rsquo;s runtime is.\nBig O notation measures the efficiency and performance of your algorithm using time and space complexity.\nTime \u0026amp; Space complexity relationsthip with input size\nTime Complexity An algorithm\u0026rsquo;s time complexity specifies how long it will take to execute an algorithm as a function of its input size.\nAs a function of its input size\nHow many statement executed based on the input size\rTypes of complexities Constant: O(1), Excellent/Best Logarithmic time: O(log n), Good Linear time: O(n), Fair Logarithmic time: O(n log n), Bad Quadratic time: O(n^2), Horrible/Worst Exponential time: O(2^n), Horrible/Worst Factorial time: O(n!), Horrible/Worsk Constant Time : O(1) When your algorithm is not dependent on the input size n, it is said to have a constant time complexity with order O(1). This means that the run time will always be the same regardless of the input size.\n// no matter how big the size of input is, there\u0026#39;s only one execution.\rconst firstElement = (array) =\u0026gt; {\rreturn array[0];\r}; Linear Time: O(n) You get linear time complexity when the running time of an algorithm increases linearly with the size of the input. This means that when a function has an iteration that iterates over an input size of n, it is said to have a time complexity of order O(n).\n# Runtime depends on the input size.\rconst calcFactorial = (n) =\u0026gt; {\rlet factorial = 1;\rfor (let i = 2; i \u0026lt;= n; i++) {\rfactorial = factorial * i;\r}\rreturn factorial;\r}; Logarithm Time: O(log n) This is similar to linear time complexity, except that the runtime does not depend on the input size but rather on half the input size. When the input size decreases on each iteration or step, an algorithm is said to have logarithmic time complexity.\nconst binarySearch = (array, target) =\u0026gt; {\rlet firstIndex = 0;\rlet lastIndex = array.length - 1;\rwhile (firstIndex \u0026lt;= lastIndex) {\rlet middleIndex = Math.floor((firstIndex + lastIndex) / 2);\rif (array[middleIndex] === target) {\rreturn middleIndex;\r}\rif (array[middleIndex] \u0026gt; target) {\rlastIndex = middleIndex - 1;\r} else {\rfirstIndex = middleIndex + 1;\r}\r}\rreturn -1;\r}; Quadratic Time: O(n^2) When you perform nested iteration, meaning having a loop in a loop, the time complexity is quadratic, which is horrible.\nconst matchElements = (array) =\u0026gt; {\rfor (let i = 0; i \u0026lt; array.length; i++) {\rfor (let j = 0; j \u0026lt; array.length; j++) {\rif (i !== j \u0026amp;\u0026amp; array[i] === array[j]) {\rreturn `Match found at ${i} and ${j}`;\r}\r}\r}\rreturn \u0026#34;No matches found 😞\u0026#34;;\r}; Exponential Time: O(2^n) const recursiveFibonacci = (n) =\u0026gt; {\rif (n \u0026lt; 2) {\rreturn n;\r}\rreturn recursiveFibonacci(n - 1) + recursiveFibonacci(n - 2);\r}; Space Complexity An algorithm\u0026rsquo;s space complexity specifies the total amount of space or memory required to execute an algorithm as a function of the size of the input. (If space depend on the size of the input array)\nBut often, people confuse Space-complexity with Auxiliary space. Auxiliary space is just a temporary or extra space and it is not the same as space-complexity. In simpler terms,\nSpace Complexity = Auxiliary space + Space use by input values\nReference\nConstant Space: O(1) Constant Space Complexity occurs when the program doesn’t contain any loops, recursive functions or call to any other functions.\nint main() { int a = 5, b = 5, c; c = a + b; printf(\u0026#34;%d\u0026#34;, c); } Linear Space : O(n) Linear space complexity occurs when the program contains any loops.\nint main() { int n, i, sum = 0; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); int arr[n]; for(i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%d\u0026#34;, \u0026amp;arr[i]); sum = sum + arr[i]; } printf(\u0026#34;%d\u0026#34;, sum); } Hash Table A hash table is a data structure that is used to store keys/value pairs. It uses a hash function to compute an index into an array in which an element will be inserted or searched. By using a good hash function, hashing can work well.\nHasing\nHashing is a technique that is used to uniquely identify a specific object from a group of similar objects.\rLinked List A linked list is a linear data sturcture that the elements are not stored at contiguous memory locations. It consists of nodes where each node contains a data and a reference(link) to the next node in the list.\nA linked list is a collection of nodes. The first node is called the head, and it\u0026rsquo;s used as the starting point.\nLinked lists are more straightfoward when it comes to insertion and deletion of elements. (list can just add/delete at the last child)\nList : [ node(data, next), node(data, next), ... ]\nHow to optimize your app Optimize the database queries.\nCaching\nIf the data doesn\u0026rsquo;t change frequently, consider caching it to reduce the number of database queries. (Tool: Redis, Memcached)\nServer-side rendering (SSR) Rendering a web page on the serverm rather than in the browser. It is also SEO-friendly. Use libraries like Next.js or Gatsby to implement SSR.\nCDN For static assets (images, videos, \u0026hellip;) use CDN(Content Delievery Network)\nOptimize the backend code Use the latest version, minimize the number of HTTP requests\nProfiling Profiling is the process of measuring and analyzing the performance of an application to identify performance bottlenecks. Use browser developer tolls in Chrome DevTools. (inspect -\u0026gt; performance -\u0026gt; record)\nLazy loading Load the data when needed\nInfinite scrolling\nDatabase query\nAvoid using COUNT, MIN, MAX. Calculate in frontend\n"
},
{
	"uri": "http://localhost:1313/pluralsight/unittest/",
	"title": "Unit Test",
	"tags": [],
	"description": "",
	"content": "Unit Testing an ASP.NET Core Web API Introduction to Unit Testing Project Structure Service Layer = Presentation or Out facing Business Data : wherecontext and entity(tables) are Tackling Basic Unit Testing Scenarios Setting Up Tests and Controlling Test Execution Working with Data-driven Tests Isolating Unit Tests with ASP.NET Core Techniques and Mocking Unit Testing ASP.NEt Core API Controllers Unit Testing ASP.NET Core Middleware, Filters and SErvice Registrations Integrating Unit Tests in Your Development and Release Flows Integration Testing ASP.NET Core 3 Applications: Best Practices Introducing ASP.NET Core Integration Tests Writing Integration Tests for ASP.NET Core Web APIs: Part 1 Applying Test Driven Development (TDD) with Integration Tests Writing Integration Tests for ASP.NET Core Web APIs: Part 2 Writing Integration Tests for ASP.NET Core UI Apps Testing Advanced Requirements in ASP.NET Core UI Apps Testing with Visual Studio 2022 Understanding Visual Studio Testing Tools Exploring Visual Studio Testing Tools "
},
{
	"uri": "http://localhost:1313/xtc/work/angularjs/",
	"title": "Angular JS",
	"tags": [],
	"description": "",
	"content": "Angular JS Data Binding Data-binding is an automatic way of updating the view whenever the model changes, as well as updating the model whenever the view changes. This is awesome because it eliminates DOM manipulation from the list of things you have to worry about.\nng-if ng-switch ng-model ng-show ng-hide\n$scope $parent.name\nController Controllers are the behavior behind the DOM elements. AngularJS lets you express the behavior in a clean readable form without the usual boilerplate of updating the DOM, registering callbacks or watching model changes.\nPlain JavaScript Unlike other frameworks, there is no need to inherit from proprietary types in order to wrap the model in accessors methods. AngularJS models are plain old JavaScript objects. This makes your code easy to test, maintain, reuse, and again free from boilerplate.\nCreate Anuglar Component Folder : [wwwroot/js/components]\ncomponentName.component.js (function () { \u0026#34;use strict\u0026#34;; angular.module(\u0026#34;synicApp\u0026#34;).component(\u0026#34;componentName\u0026#34;, { templateUrl: \u0026#34;/js/components/componentName.html\u0026#34;, bindings: { variable1: \u0026#34;\u0026lt;\u0026#34;, // one way binding variable2: \u0026#34;=\u0026#34;, // two way binidng }, controller: componentNameController, }); componentNameController.$inject = []; function componentNameController(SocialMediaLinksService, constants, UtilsService, $scope) { var $ctrl = this; } })(); componentName.html \u0026lt;div\u0026gt;{{$ctrl.varaible1}}\u0026lt;/div\u0026gt; When you use it \u0026lt;component-name variable1=\u0026#34;test\u0026#34; variable2=\u0026#34;test2\u0026#34;\u0026gt;\u0026lt;/component-name\u0026gt; POST Request $scope.submitFunction = function () { $http({ method: \u0026#34;POST\u0026#34;, url: \u0026#34;/api/route\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, }, data, }) .then((res) =\u0026gt; { console.log(\u0026#34;RESULT: \u0026#34;, res.data); }) .catch((err) =\u0026gt; { console.log(\u0026#34;ERROR: \u0026#34;, err); }); }; Sending single item ... data: variable ... public dynamic UpdateFullfilledStatus([FromBody] int salesOrderId) Modal https://angular-ui.github.io/bootstrap/#!#modal\n1. Markup \u0026lt;script type=\u0026#34;text/ng-template\u0026#34; id=\u0026#34;angularModal.html\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal-header\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;modal-title\u0026#34; id=\u0026#34;modal-title\u0026#34;\u0026gt;Modal Title\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;modal-body\u0026#34; id=\u0026#34;modal-body\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; ng-click=\u0026#34;ok()\u0026#34;\u0026gt;OK\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn btn-warning\u0026#34; type=\u0026#34;button\u0026#34; ng-click=\u0026#34;cancel()\u0026#34;\u0026gt;Cancel\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-default\u0026#34; ng-click=\u0026#34;testOpen()\u0026#34;\u0026gt;Open me!\u0026lt;/button\u0026gt; 2. Javascript Import scripts Modal click event function // ng-click=openModal() from HTML $scope.openModal = function () { var modalInstance = $uibModal.open({ templateUrl: \u0026#34;addDiscountContent.html\u0026#34;, controller: \u0026#34;AddDiscountModalCtrl\u0026#34;, resolve: { // Properties inside resolve goes to Modal Controller. items: function () { return \u0026#34;haha\u0026#34;; }, }, }); // Return event when closing modal modalInstance.result.then( function (selectedItem) { // \u0026#39;Ok\u0026#39; clicked console.log(\u0026#34;modal click ok : \u0026#34; + selectedItem); }, function () { // \u0026#39;Cancel\u0026#39; clicked console.log(\u0026#34;modal에서 dismissed at: \u0026#34; + new Date()); } ); }; Controller angular.module(\u0026#34;synicApp\u0026#34;).controller(\u0026#34;AddDiscountModalCtrl\u0026#34;, function ($scope, $uibModalInstance, items) { console.log(\u0026#34;ITEM: \u0026#34;, items); // When click Ok button $scope.ok = function () { $uibModalInstance.close(\u0026#34;RETURN HOHO\u0026#34;); }; // When click Cancel button $scope.cancel = function () { $uibModalInstance.dismiss(\u0026#34;cancel\u0026#34;); }; }); 3. CSS Angular structure Service - complex logics (do not get confused with IServices) Controller - set of functions/ services\nRESTful // needs validation of unique options POST (add) /api/cart/{cartid}/items\n// no need to validate unique options PUT (edit item) /api/cart/{cartid}/items/{itemId}\n\u0026ndash; just updating the qty\n"
},
{
	"uri": "http://localhost:1313/c/basic/",
	"title": "Basic",
	"tags": [],
	"description": "",
	"content": " Console.ReadLine(); Console.WriteLine(\u0026#34;Hi\u0026#34;); Console.Write(\u0026#34;Hi \u0026#34;); F5 -\u0026gt; Run Ctrl(Command) + B -\u0026gt; build\nBasic Code Structures Namespace Namespaces are used to organize classes into logical groups. They are also referred to as libraries. Referencing the namespace with a using statement. It allows you to access its classes within the file.\nusing Name; namespace ConsoleApp1 { ... } Access Modifier The Access Modifier controls how a class or its components can be used by other code. (internal/static etc..)\nMethod Blocks of code\nClass A group of related methods and properties\nName Convention Identifier Name Convention Namespace PascalCase Class PascalCase Property PascalCase Method PascalCase Variable/Parameter camelCase Parameter camelCase Constant UPPER_CASE Enumeration Type PascalCase Enumeration Value PascalCase Namespace, class, variable names : nouns Method names : verb Data Types // Numeric byte num = 255; // 0-255 int min = 21; // -2147483648 - 2147483647 long distance = 3548455; // -9223372036854775808 - 9223372036854775807 // Floating float price = 20.99f; // 7dp double interest = 2.625; // 16dp decimal temp = 21.5m; // 29dp // Boolean bool isTrue = true; // String char letter = \u0026#39;a\u0026#39;; string st = \u0026#34;Ceasars\u0026#34;; string user = Console.ReadLine(); // user prompt DateTime rn = DateTime.Now; object car = new { make = \u0026#34;Mustang\u0026#34;, colour = \u0026#34;blue\u0026#34;} var type has to be declared and assigned at initial\nError Handling try { /// } catch (Exception e){ /// } Casting Convert into differnt data type\nImplicit Conversion Converting from smaller to larger, there is no risk of data loss.\nchar -\u0026gt; int -\u0026gt; long -\u0026gt; float -\u0026gt; double\nIn implicit casting, small into larger is done automatically.\nExplicit Conversion Converting from larger to smaller\ndouble -\u0026gt; float -\u0026gt; long -\u0026gt; int -\u0026gt; char\nint aa = 23; byte num; num = (byte)aa String to Int ? ///\nOperator Type Operator Arthmetic +, -, *, /, % Comparison ==, !=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= Logical \u0026amp;\u0026amp;, ! Conditional If/Else if(){ ... } else if () { ... } else { ... } Ternary Operator condition ? true statement : false statement Switches switch (condition){ case 1: ... break; case 2: ... break; default: break; } Loops for for (int i = 0; i \u0026lt; 5; i++){ Console.WriteLine(\u0026#34;Hi\u0026#34;); } foreach // string[] str foreach (string item in strs) { // } while while(i\u0026lt;7){ ... i++ } Do-while do { ... } while (i \u0026lt; 6); Log Data Refer C# Day1\n.NET Memory Management C# Day3\n"
},
{
	"uri": "http://localhost:1313/python/basic/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Variables Operators Functions Module Flows : If, For, While Errors Variables Variable is a type of virtual box, created in the memory of the computer, which we can keep a value. A variable has name, data type, value.\nVariables are volatile, they exist in the memory just while the program is running. they are erased when the program ends.\nPython read codes from top to bottom. If variable has changed at the end, it will take the latest value.\nConstant Variable that shouldn\u0026rsquo;t be changed.\nCONS_TANT = \u0026#39;a\u0026#39; Name convention Name cannot starts with a number, cannot use reserved python words.\nVariables : snake_case Constants : UPPER_UPPER Classes : UpperCamelCase Functions : snake_case Reserved Python keywords\nand, del, from, None, True, as, elif, global, nonlocal, try, assert, else, if, not, while, break, except, import, or, with, class, False, in , pass, yield, continue, finally, is, raise, async, def, for, lambda, return, await\rData types # String my_name = \u0026#34;text\u0026#34; # Number my_num = 1 # Boolean my_bool = True or False Data Conversion float(x) int(a) str(z) type(a) Comments # Single line \u0026#39;\u0026#39;\u0026#39; DocString : multiple lines \u0026#39;\u0026#39;\u0026#39; Variable Scope : Global global keyword must be used to change the global variable inside of a function\nname = \u0026#39;aa\u0026#39; def function(): global name = \u0026#39;bb\u0026#39; Data formats CSV : Comma Separated Values \u0026ldquo;a, b, c, d\u0026rdquo;\nJSON : Javascript Object Notation [{\u0026ldquo;a\u0026rdquo;:\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;:\u0026ldquo;b\u0026rdquo;}]\nOperators Arthmetic Operators \\+, \\-, \\*, /, %(Modulus), \\*\\*(Power), //(Rounding after division)\nAssignment Operators =, +=, -=, \\*=, /=, %=, //=\nComparison or Relational Operators ==, !=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=\nLogical Operators and, or, not\nshort-circuit evaluation : a or b 에서 이미 a가 true면 evaluating no need use the first expression to guard the second expression Identity Operators is, is not\nMembership Operators in, not in\nLogical Operators \u0026amp;(AND), |(OR), ^(XOR), ~(NOT)\nOperators Precedence Python evaluates boolean expression from left to right\nParentheses : () Arithmetic : + / Relational operator : \u0026gt; \u0026gt;= not and or Functions A function is a group of related statements performing an action in the system. It should perform a single task and has input parameters and returns.\nNickname(?) : Procedure, sub-routine, method\nName convention Starts with a verb, is descriptive, lower_snake_case.\nFunction Definition The indentation defines the code block (2-4 spaces/tab). Use DocString for the details.\ndef name(x, y): \u0026#39;\u0026#39;\u0026#39; :param x: first num :param y: second num :return the sum of the passed numbers \u0026#39;\u0026#39;\u0026#39; a = x + y return a return multiple values from function : use Tuple ()\nFunction Stub pass keyword does nothing. It is sued as a placeholder.\ndef some_function(): # function that does nothing yet pass Calling a Function name(1, 2) Void Functions is a function that returns nothing\nParameter (Argument) Parameters can be anything : string, number, list or function\ndef name(parameter); print(\u0026#34;user\u0026#34;, parameter) Default parameter\ndef name(aa=\u0026#34;am\u0026#34;) print(aa) Optional parameter\ndef name(aa=None) print(aa) Main function Python convention is to define a main function.\nimport sys import os def main(): pass if __name__ == \u0026#34;__main__\u0026#34;: main() Built-in Functions print()\ninput() : return string type\ninput returns whatever user inputs.. it automatically become string type\ntype()\nid()\nPython Standard Library Built in functions in python how to use? import module from random import randit\rrandint(1, 30) Install Requests package\npip install requests from requests import get response = get(\u0026#34;https://google.ca\u0026#34;) print(response.status_code) Module Script Script is a Python code that is passed to the Python Interpreter to be executed. By convention, the script have a main() function.\nModules Module is a collection of functions. Nothing is running unless it is called from script.\nImporting Modules import math import utilities a = utilities.sample_function(10, 2) Benefits of using modules Organizing and grouping the code based on functionality or purpose Reuse code Breaks donw a large program into smaller pieces Can build libraries of modules, use existing built-in libraries or purchase and use spcialized libraries. Built-in Modules datetime import datetime date = datetime.datetime.now() day = date.day week = date.weekday() mon = date.month full_mont = date.strftime(\u0026#39;%B\u0026#39;) # Full month name, %b for an abbreviated one year = date.year random import random a = random.random() b = random.randint(0, 5) # 0~5 Packages https://pypi.org/\nRequests from requests import get Flow Boolean Expression Boolean expressions are evaluated to True(0) or False(1).\ntrue and true = true false and true = false true and false = false false and false = false true or true == true true or false = true false or true = true false or false = false If Branching : Do different things based on a logical condition.\nExample\nage = 50 if age \u0026gt; 18 and age \u0026lt; 35: print(\u0026#34;true\u0026#34;) elif age \u0026gt; 16 or age age == 20: print(\u0026#34;t and f\u0026#34;) else: print(\u0026#34;false\u0026#34;) Successive if statement\nif condition: pass if condition2: pass = : assign data == : compare data For For loops over each element in a sequence or container (list, set, dict, string) one at a time.\nweb = [\u0026#34;google.com\u0026#34;, \u0026#34;facebook.com\u0026#34;] for a in web: print(a) # reversed for name in reversed(names): pass # use index, range for index in range(5): pass range(start, end, step)\nWhile First, understand the boolean expressions since boolean condition is evaluated at the beginning of the loop.\nwhile count \u0026lt; 30: if count \u0026lt; 10: break elif count \u0026gt; 15: continue else: pass Sentinal value : a value that causes the loop to terminate.\nWhen the while loop ends boolean expression(condition) to false break sentence is encountered exit(0) return sentence continue is continuing\nErrors Syntax Errors A violation of the programming language rules Syntax\nSet of keywords and set of rules for writing the code.\rRuntime Errors Correct syntax but the program attempts to do somthing impossible (like divide by zero or multiply string)\nSyntax Error : Cannot be understood but was not caught at start IndentationError : Lines are not indented ValueError : Invalid value is used NameError : variables that don\u0026rsquo;t exist TypeError : incorrect types Runtime\nTime the program is running.\rSemantic (Logic) Error The program runs but does not do what you intended it to do\nError Handling An exception is an error that happens during the execution of a program.\nwhile True: try: # Code pass except ValueError: print(\u0026#34;Error message\u0026#34;) except ZeroDivisionError: print(\u0026#34;Infinity\u0026#34;) finally: print(\u0026#34;This block is executed whether the error is or not\u0026#34;) Coding standards https://peps.python.org/pep-0008/\n"
},
{
	"uri": "http://localhost:1313/frontend/css/",
	"title": "CSS",
	"tags": [],
	"description": "",
	"content": "Gradients linear-gradient(90deg, color unit, color unit) Properties : radial-gradients, conic-gradients, repeating-(type)-gradients Multiple gradients : separate by comma Cheat site : https://cssgradient.io/ https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients\nBorder border-radius: 50%; (circle)\rborder-radius: (top-left, top-right, bottom-right, bottom-left);\rborder-radius: 5rem / 10rem; (horizontal, vertical) Unit: px, em, % Opacity Opacity: 0.5; Unit: 0 ~ 1 Child element can only decrease the opacity RGBA bakcground-color: rgba(0, 0, 0, 0.5); RGB color format + alpha(opacity) channel Box Shadow box-shadow: inset(option) (x) (y) (blur-radius) (spread-radius) (color); Multiple box-shadow is seperate by comma : box-shadow 0 0 0 0 yellow, 0 0 0 0 black; Text Shadow text-shadow: (offset-x) (offset-y) (blur) (color); Multiple : text-shadow: 1px 1px 1px gray, 2px 2px 2px yellow; Filter filter: blur(%) Properties : hue-rotate(degree), saturate(%), brightness(%), contrast(%), grayscale(%), sepia(%) https://developer.mozilla.org/en-US/docs/Web/CSS/filter#try_it\nSelector .class: nth-child(n) { ...; } nth-child(even) or (odd) nth-child(n+1) nth-child(3n) "
},
{
	"uri": "http://localhost:1313/xtc/angular/day2/",
	"title": "Day2",
	"tags": [],
	"description": "",
	"content": "Angular Pipes Pipes allow us to easily and consistently format values and/or transform data.\nAngular provides a set of built-in pipes that we can use, as needed, right away.\nFor instance, if we want to display the title for each of our projects in uppercase, we can use the UpperCasePipe to do so right in our template.\napp.component.html \u0026lt;h2\u0026gt;{{ project.title | uppercase }}\u0026lt;/h2\u0026gt; To see a full list of the built in pipes, check the API docs:\nhttps://angular.io/api/common#pipes\nFor a full guide on using pipes:\nhttps://angular.io/guide/pipes\nCreating a Custom Pipe In addition to the built-in pipes that Angular provides, we can write our own custom pipes which opens up MUCH greater possibilities for transforming data.\nLet\u0026rsquo;s use the Angular CLI to generate a custom pipe so we can filter our projects by tag.\nIn your terminal, run:\nng generate pipe project-filter By doing this via the CLI not only is project-filter.pipe.ts created for us (with boilerplate), but the pipe is also imported into app.module.ts and added to the declarations in the @NgModule decorator.\napp.module.ts import { NgModule } from \u0026#39;@angular/core\u0026#39;;\rimport { BrowserModule } from \u0026#39;@angular/platform-browser\u0026#39;;\rimport { AppComponent } from \u0026#39;./app.component\u0026#39;;\rimport { ProjectFilterPipe } from \u0026#39;./project-filter.pipe\u0026#39;;\r@NgModule({\rdeclarations: [AppComponent, ProjectFilterPipe],\rimports: [BrowserModule],\rproviders: [],\rbootstrap: [AppComponent],\r})\rexport class AppModule {} Filtering Projects by Tag To filter our projects by tag we will need to:\nImport the Project and Tag classes from app.component.ts Pass our array of Projects and optionally a Tag into the pipe. Check if the project.tags of each Project includes the provided Tag In this case I use JSON.stringify on both in order to do a simple string indexOf check for the presence of the tag in the project tags. Return the filtered array of Projects. project-filter.pipe.ts import { Pipe, PipeTransform } from \u0026#39;@angular/core\u0026#39;;\rimport { Project, Tag } from \u0026#39;./app.component\u0026#39;;\r@Pipe({\rname: \u0026#39;projectFilter\u0026#39;,\r})\rexport class ProjectFilterPipe implements PipeTransform {\r// The transform method will receive our array of Projects and return only those that contain our Tag if defined\rtransform(projects: Project[], tag: Tag | undefined): Project[] {\rlet filteredProjects = [];\rif (tag) {\rfilteredProjects = projects.filter((project) =\u0026gt; {\r// Convert the project tags as well as the tag to strings\r// Since indexOf returns -1 if not found, add 1 to make not found a falsy value\rreturn JSON.stringify(project.tags).indexOf(JSON.stringify(tag)) + 1;\r});\r} else {\rfilteredProjects = projects;\r}\rreturn filteredProjects;\r}\r} Using our projectFilter Pipe Since our custom pipe was imported and registered in app.module.ts, we can use it anywhere in our app template files.\nThe @Pipe decorator set the name of our pipe to projectFilter, so when we\u0026rsquo;re going to iterate through our projects in app.component.html, we just send the projects and tagFilter into the pipe as follows:\n\u0026lt;article\r*ngFor=\u0026#34;let project of projects | projectFilter : tagFilter\u0026#34;\r[class.hidden]=\u0026#34;\rcategoryFilter \u0026amp;\u0026amp; project.category?.id != categoryFilter.id\r\u0026#34;\r\u0026gt; Refactoring our List Components Right now we have absolutely everything happening in our AppComponent, which is far from optimal.\nA well structured application is modular, so let\u0026rsquo;s start moving things in that direction beginning by creating shells for a ProjectsComponent, TagsComponent, and CategoriesComponent.\nCreating Components Use the Angular CLI to create a new components named projects, tags, and categories respectively:\nng generate component projects That will create a projects folder under src/app containing all of the files needed for our component:\nThe component projects.component.ts, The template projects.component.html The stylesheet projects.component.scss A testing file projects.somponent.spec.ts It also updates app.module.ts to import and declare the component so we can use it.\nOpen projects.component.ts and you\u0026rsquo;ll find that it has created a shell for our component and populated the @Component decorator with the selector, templateUrl, and styleUrls.\nimport { Component } from \u0026#39;@angular/core\u0026#39;;\r@Component({\rselector: \u0026#39;app-projects\u0026#39;,\rtemplateUrl: \u0026#39;./projects.component.html\u0026#39;,\rstyleUrls: [\u0026#39;./projects.component.scss\u0026#39;]\r})\rexport class ProjectsComponent {\r} Repeat for categories and tags.\nLeave these in their skeleton form, for now. We\u0026rsquo;re going to get back to this shortly, but before doing so let\u0026rsquo;s improve how we\u0026rsquo;re handling the associated data.\nCreating Models for our Data Generating Models The next step in cleaning up our application is to move our Project, Category, and Tag class definitions out of app.component.ts and redefine them as interfaces\nng generate interface model/project\nng generate interface model/category\nng generate interface model/tag\ncategory.ts export interface Category {\rid: number;\rname: string;\rslug: string;\r} tag.ts export interface Tag {\rid: number;\rname: string;\rslug: string;\r} Note: I\u0026rsquo;ve stripped the pivot property out. We\u0026rsquo;ll remove it from our data too.\nproject.ts import { Category } from \u0026#39;./category\u0026#39;;\rexport interface Project {\rid: number;\rtitle: string;\rslug: string;\rexcerpt: string;\rbody: string;\rurl: string | null;\rpublished_date: string | null;\rimage: string | null;\rthumb: string | null;\rcategory_id: number | null;\rcreated_at: string;\rupdated_at: string;\rcategory: Category | null;\rtags: any;\r} Extracting our Data Currently our AppComponent is cluttered with dummy data for our projects, categories, and tags.\nLet\u0026rsquo;s clean that up.\nConvert Our JSON files to TypeScript Create a data folder to store our files Create projects.ts Import the Project interface from ../model/project Cut and paste the PROJECTS const from app.component.ts Export the PROJECTS const. src/app/data/projects.ts import { Project } from \u0026#39;../model/project\u0026#39;;\rexport const PROJECTS: Project[] = [\r{\rid: 1,\rtitle: \u0026#39;Portfolio Showcase\u0026#39;,\rslug: \u0026#39;portfolio-showcase\u0026#39;,\r... Rinse and repeat for categories and tags.\nAngular Services Services allow us to modularize our code by separating out general processing tasks from the view-related functionality that optimally is the only thing that our components should be responsible for.\nServices are injectable, so by creating narrowly focused, well defined, service classes we can re-use their functionality in any components that need them - both cleanly and efficiently.\nCreate a ProjectService ng generate service project That gives us our boilerplate service.\nImport the Project interface Import the PROJECTS data Add a method that returns the PROJECTS project.service.ts import { Injectable } from \u0026#39;@angular/core\u0026#39;;\rimport { Project } from \u0026#39;./model/project\u0026#39;;\rimport { PROJECTS } from \u0026#39;./data/projects\u0026#39;;\r@Injectable({\rprovidedIn: \u0026#39;root\u0026#39;,\r})\rexport class ProjectService {\rconstructor() {}\rgetProjects(): Project[] {\rreturn PROJECTS;\r}\r} Do the same for categories and tags.\nUsing Services in our Components To use the ProjectService in ProjectsComponent we will need to:\nImport the ProjectService Add a constructor with a private parameter of type ProjectService Add a projects property to hold our array of Projects Initialize it to an empty array Add a getProjects method that sets the projects property to the array returned from projectService.getProjects() Add an ngOnInit() method that calls the getProjects() method. import { ProjectService } from \u0026#39;../project.service\u0026#39;;\rexport class ProjectsComponent {\rconstructor(private projectService: ProjectService) {}\rprojects: Project[] = [];\rgetProjects(): void {\rthis.projects = this.projectService.getProjects();\r}\rngOnInit(): void {\rthis.getProjects();\r}\r... Same same for categories and tags.\nAngular Data Flow We\u0026rsquo;re almost back to having our app back up and running, but now that we\u0026rsquo;ve created a split out individual components we need to be able to pass our categoryFilter and tagFilter down from the AppComponent to the ProjectsComponent and also be able to set them from the ProjectsComponent as well as from the CategoriesComponent or TagsComponent.\nIn general, what this looks like is:\nPassing Data to Child Components In the child component we need to:\nImport Input from @angular/core Decorate any property that will be provided by the parent with @Input() In the parent component we need to:\nSet a property to the value we want to pass down This happens in the class file - app.component.ts Use property binding to actually send the value to the input This happens in the template - app.component.html For example, we want to send categoryFilter and tagFilter from our AppComponent to the ProjectsComponent, so:\nprojects.component.ts import { Component, Input } from \u0026#39;@angular/core\u0026#39;;\r...\r@Input() categoryFilter: Category | undefined;\r@Input() tagFilter: Tag | undefined; app.component.ts ...\rtagFilter: Tag | undefined;\rsetTagFilter(tag: Tag) {\rthis.tagFilter = tag;\r}\rcategoryFilter: Category | undefined;\rsetCategoryFilter(category: Category) {\rthis.categoryFilter = category;\r}\rclearFilters() {\rthis.categoryFilter = undefined;\rthis.tagFilter = undefined;\r} app.component.html ...\r\u0026lt;app-projects\r[categoryFilter]=\u0026#34;categoryFilter\u0026#34;\r[tagFilter]=\u0026#34;tagFilter\u0026#34;\r\u0026gt;\u0026lt;/app-projects\u0026gt;\r... Passing Data from Child to Parent In the child component.ts we need to:\nImport Output and EventEmitter Decorate a property in the child with @Output Set that @Output property to a new EventEmitter Add a method that, when called emits the appropriate event. In the child component.html we need to:\nBind an event handler to the event emitting method in the component In the parent component.ts we need to:\nDefine a method that will take the appropriate action when the emitted event is received In the parent component.html we need to:\nbind a custom event listener to the handler above. Putting that all together\u0026hellip;\nprojects.component.ts import { Component, Input, Output, EventEmitter } from \u0026#39;@angular/core\u0026#39;;\r...\r@Input() categoryFilter: Category | undefined;\r@Output() newCategoryFilterEvent = new EventEmitter\u0026lt;Category\u0026gt;();\r@Input() tagFilter: Tag | undefined;\r@Output() newTagFilterEvent = new EventEmitter\u0026lt;Tag\u0026gt;();\rsetCategoryFilter(category: Category) {\rthis.categoryFilter = category;\rthis.newCategoryFilterEvent.emit(category);\r}\rsetTagFilter(tag: Tag) {\rthis.tagFilter = tag;\r}\rclearFilters() {\rthis.categoryFilter = undefined;\rthis.tagFilter = undefined;\r} projects.component.html \u0026lt;article\r*ngFor=\u0026#34;let project of projects | projectFilter : tagFilter\u0026#34;\r[class.hidden]=\u0026#34;categoryFilter \u0026amp;\u0026amp; project.category?.id != categoryFilter.id\u0026#34;\r\u0026gt;\r\u0026lt;section\u0026gt;\r\u0026lt;h2\u0026gt;{{ project.title | uppercase }}\u0026lt;/h2\u0026gt;\r\u0026lt;div\u0026gt;{{ project.excerpt }}\u0026lt;/div\u0026gt;\r\u0026lt;/section\u0026gt;\r\u0026lt;footer\u0026gt;\r\u0026lt;div *ngIf=\u0026#34;project.category\u0026#34; (click)=\u0026#34;setCategoryFilter(project.category)\u0026#34;\u0026gt;\rCategory: \u0026lt;span\u0026gt;{{ project.category.name }}\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div *ngIf=\u0026#34;project.tags?.length\u0026#34;\u0026gt;\rTags:\r\u0026lt;span *ngFor=\u0026#34;let tag of project.tags\u0026#34; (click)=\u0026#34;setTagFilter(tag)\u0026#34;\u0026gt;\r{{ tag.name }}\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;\r\u0026lt;/article\u0026gt; app.component.ts ...\rexport class AppComponent {\rtitle = \u0026#39;Solomon Showcase\u0026#39;;\rdate = new Date();\rauthor = \u0026#39;Josh Solomon\u0026#39;;\rtagFilter: Tag | undefined;\rsetTagFilter(tag: Tag) {\rthis.tagFilter = tag;\r}\rcategoryFilter: Category | undefined;\rsetCategoryFilter(category: Category) {\rthis.categoryFilter = category;\r}\r... app.component.html ..\r\u0026lt;app-projects\r[categoryFilter]=\u0026#34;categoryFilter\u0026#34;\r(newCategoryFilterEvent)=\u0026#34;setCategoryFilter($event)\u0026#34;\r[tagFilter]=\u0026#34;tagFilter\u0026#34;\r(newTagFilterEvent)=\u0026#34;setTagFilter($event)\u0026#34;\r\u0026gt;\u0026lt;/app-projects\u0026gt;\r... Cleaning up the AppComponent Once we have implemented all of that, we can finally clean up our AppComponent and its template.\napp.component.ts import { Component } from \u0026#39;@angular/core\u0026#39;;\rimport { ProjectsComponent } from \u0026#39;./projects/projects.component\u0026#39;;\rimport { CategoriesComponent } from \u0026#39;./categories/categories.component\u0026#39;;\rimport { TagsComponent } from \u0026#39;./tags/tags.component\u0026#39;;\rimport { Project } from \u0026#39;./model/project\u0026#39;;\rimport { Category } from \u0026#39;./model/category\u0026#39;;\rimport { Tag } from \u0026#39;./model/tag\u0026#39;;\r@Component({\rselector: \u0026#39;app-root\u0026#39;,\rtemplateUrl: \u0026#39;./app.component.html\u0026#39;,\rstyleUrls: [\u0026#39;./app.component.scss\u0026#39;],\r})\rexport class AppComponent {\rtitle = \u0026#39;Solomon Showcase\u0026#39;;\rdate = new Date();\rauthor = \u0026#39;Josh Solomon\u0026#39;;\rtagFilter: Tag | undefined;\rsetTagFilter(tag: Tag) {\rthis.tagFilter = tag;\r}\rcategoryFilter: Category | undefined;\rsetCategoryFilter(category: Category) {\rthis.categoryFilter = category;\r}\rclearFilters() {\rthis.categoryFilter = undefined;\rthis.tagFilter = undefined;\r}\r} app.component.html \u0026lt;header\u0026gt;\r\u0026lt;h1\u0026gt;{{ title }}\u0026lt;/h1\u0026gt;\r\u0026lt;/header\u0026gt;\r\u0026lt;main\u0026gt;\r\u0026lt;section id=\u0026#34;side-nav\u0026#34;\u0026gt;\r\u0026lt;article *ngIf=\u0026#34;categoryFilter || tagFilter\u0026#34;\u0026gt;\r\u0026lt;h2\u0026gt;Filter:\u0026lt;/h2\u0026gt;\r\u0026lt;div class=\u0026#34;current-filter\u0026#34; (click)=\u0026#34;clearFilters()\u0026#34;\u0026gt;\r{{ categoryFilter?.name || tagFilter?.name }}\r\u0026lt;i class=\u0026#34;bi bi-trash\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/article\u0026gt;\r\u0026lt;h3\u0026gt;Categories\u0026lt;/h3\u0026gt;\r\u0026lt;article id=\u0026#34;categories\u0026#34;\u0026gt;\r\u0026lt;app-categories\r[categoryFilter]=\u0026#34;categoryFilter\u0026#34;\r(newCategoryFilterEvent)=\u0026#34;setCategoryFilter($event)\u0026#34;\r\u0026gt;\u0026lt;/app-categories\u0026gt;\r\u0026lt;/article\u0026gt;\r\u0026lt;h3\u0026gt;Tags\u0026lt;/h3\u0026gt;\r\u0026lt;article id=\u0026#34;tags\u0026#34;\u0026gt;\r\u0026lt;app-tags\r[tagFilter]=\u0026#34;tagFilter\u0026#34;\r(newTagFilterEvent)=\u0026#34;setTagFilter($event)\u0026#34;\r\u0026gt;\u0026lt;/app-tags\u0026gt;\r\u0026lt;/article\u0026gt;\r\u0026lt;/section\u0026gt;\r\u0026lt;section id=\u0026#34;projects\u0026#34;\u0026gt;\r\u0026lt;app-projects\r[categoryFilter]=\u0026#34;categoryFilter\u0026#34;\r(newCategoryFilterEvent)=\u0026#34;setCategoryFilter($event)\u0026#34;\r[tagFilter]=\u0026#34;tagFilter\u0026#34;\r(newTagFilterEvent)=\u0026#34;setTagFilter($event)\u0026#34;\r\u0026gt;\u0026lt;/app-projects\u0026gt;\r\u0026lt;/section\u0026gt;\r\u0026lt;/main\u0026gt;\r\u0026lt;footer\u0026gt;\u0026amp;copy; {{ date.getFullYear() }} {{ author }}\u0026lt;/footer\u0026gt; Refactoring Stylesheets You\u0026rsquo;ll still likely need to refactor your stylesheets because they are scoped to the component that they\u0026rsquo;re imported by. Styles in app.component.scss will NOT be applied to output from projects.component.html etc., but if you\u0026rsquo;ve made it this far moving your styles around should be easy as pi.\n"
},
{
	"uri": "http://localhost:1313/asp.net/db/",
	"title": "DB Connection",
	"tags": [],
	"description": "",
	"content": "DB First MVC Entity framwork has NO connection string in appsettings.json\nInstall Packages\nEntityFrameworkCore.Tools EntityFrameworkCore.SqlServer EntityFrameworkCore Connect to DB (Initial Connection) Run the command line\nScaffold-DbContext \u0026#34;Server=[serverName];Database=[dbName];Trusted_Connection=True;\u0026#34; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models OutputDir Models : Create class inside Models folder Update DB Scaffold-DbContext \u0026#34;Server=[serverName];Database=[dbName];Trusted_Connection=True;\u0026#34; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -force Same as connection, but add -force at the end.\nDatabase Context nameContext.cs file contains information about the schema and database connection\nThis inhertis from .Net\u0026rsquo;s DbContext class that has the database connection and contians information about the overall database schema.\nnameContext class is referenced whenever a query is made to the database. This is done through the object Relational Mapping mechanism (ORM)\nEntity Classes Tables in the DB become Entity Classes\nExample\nnamespace WebApplication1.Models { public partial class Test1 { // Constructor can exist. // Columns public string? Firstname { get; set; } public string? LastName { get; set; } // Navigations properties : Relations public virtual TableName? MfgNavigation { get; set; } // One (Parent) public virtual ICollection\u0026lt;TableName\u0026gt; PrimaryKey { get; set } // Many } } Navigation properties references neighbouring tables.\nICollection vs IQueryable vs IEnumerable\u0026hellip; ㅆㅃ\nController public IActionResult Index() { testContext context = new testContext(); // This is where you query your linq IQueryable\u0026lt;Test1\u0026gt; test = from p in context.Test1s select p; return View(test); } The one you are sending from Controller View(test) and from razor @model should be the SAME MODEL\nRazor @model IEnumerable\u0026lt;WebApplication1.Models.Test1\u0026gt;\r\u0026lt;div\u0026gt;\r@Html.DisplayNameFor(model=\u0026gt;model.Firstname)\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r@foreach(var item in Model){\r@Html.DisplayFor(modelItem =\u0026gt; item.Firstname)\r}\r\u0026lt;/div\u0026gt; Code First 1. Change the Connection String (Initial Connection) [appsettings.json]\n\u0026#34;ConnectionStrings\u0026#34;: {\r\u0026#34;DefaultConnection\u0026#34;: \u0026#34;Server=[Server Name];Database=[DB Name];Trusted_Connection=True;MultipleActiveResultSets=true\u0026#34; }, Apply the changes\nUpdate-Database 2. Create Table Create class file inside Models folder (Name: Singular, Pascal)\n[Models/EntityName.cs]\npublic class EntityName { [Key] // for primary key [Display (Name = \u0026#34;First Name\u0026#34;)] [Required] public string ColumnName { get; set; } // Singular, Pascal } 3. Import in DbContext Import inside [Data/ApplicationDbContext.cs]\npublic class ApplicationDbContext : IdentityDbContext { public ApplicationDbContext(DbContextOptions\u0026lt;ApplicationDbContext\u0026gt; options) : base(options) { } // Add this line public DbSet\u0026lt;EntityName\u0026gt; TableNames { get; set; } // Table name as plural } 4. Apply the updates Whenever you make changes in DB,\nMake a change \u0026gt; Migration \u0026gt; Update One at a time\nadd-migration description\rupdate-database "
},
{
	"uri": "http://localhost:1313/leetcode/easy/",
	"title": "Easy",
	"tags": [],
	"description": "",
	"content": "Two Sum Solution Python C# Solution #1 : Brute Force\n# Runtime: 9ms class Solution(object): def twoSum(self, nums, target): for i in range(len(nums)): for j in range(i+1, len(nums)): if nums[j] == target - nums[i]: return [i, j] Solution #2 : Two-pass Hash Table\n# Runtime: 20ms class Solution(object): def twoSum(self, nums, target): map = {} for (i, num) in enumerate(nums): map[num]=i for (i, num) in enumerate(nums): x = target - num if(x in map and map[x]!=i): return [i, map[x]] Solution #3 : One-pass Hash Table\nclass Solution: def twoSum(self, nums: List[int], target: int) -\u0026gt; List[int]: hashmap = {} for i in range(len(nums)): complement = target - nums[i] if complement in hashmap: return [i, hashmap[complement]] hashmap[nums[i]] = i static int[] twoSum(List\u0026lt;int\u0026gt; nums, int target) { Dictionary\u0026lt;int, int\u0026gt; map = new Dictionary\u0026lt;int, int\u0026gt;(); int x; for(int i =0; i \u0026lt; nums.Count; i++) { x = target - nums[i]; if (map.ContainsKey(x)) { Console.WriteLine(x); return new int[] { i, map[x] }; } map.Add(nums[i], i); } return new int[] { 0,0 }; } Key Concepts Consider Big O (Time complexity, Space complexity) Using hash tables Roman to Integer Solutions Python C# Solution #1\ndef romanToInt(s): s = s.replace(\u0026#39;IV\u0026#39;, \u0026#39;IIII\u0026#39;).replace(\u0026#39;IX\u0026#39;, \u0026#39;VIIII\u0026#39;).replace(\u0026#39;XL\u0026#39;, \u0026#39;XXXX\u0026#39;).replace(\u0026#39;XC\u0026#39;, \u0026#39;LXXXX\u0026#39;).replace(\u0026#39;CD\u0026#39;, \u0026#39;CCCC\u0026#39;).replace(\u0026#39;CM\u0026#39;, \u0026#39;DCCCC\u0026#39;) roman_to_integer = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000, } to_int = sum(map(lambda x: roman_to_integer[x], s)) print(\u0026#34;aa\u0026#34;, to_int) return to_int Solution #2\ndef romanToInt(s): # 12ms roman = { \u0026#39;I\u0026#39;: 1, \u0026#39;V\u0026#39;: 5, \u0026#39;X\u0026#39;: 10, \u0026#39;L\u0026#39;: 50, \u0026#39;C\u0026#39;: 100, \u0026#39;D\u0026#39;: 500, \u0026#39;M\u0026#39;: 1000, } count = 0 for i in range(len(s) -1 ): if roman[s[i]] \u0026lt; roman[s[(i+1)] ]: count-= roman[s[i]] else: count+= roman[s[i]] return count + roman[s[-1]] int RomanToInt(string s) { var map = new Dictionary\u0026lt;Char, int\u0026gt; { { \u0026#39;I\u0026#39; , 1 }, { \u0026#39;V\u0026#39; , 5 }, { \u0026#39;X\u0026#39; , 10 }, { \u0026#39;L\u0026#39; , 50 }, { \u0026#39;C\u0026#39; , 100 }, { \u0026#39;D\u0026#39; , 500 }, { \u0026#39;M\u0026#39; , 1000 } }; int sum = 0; for (int i = 0; i \u0026lt; s.Length -1; i++) { if (map[s[i]] \u0026lt; map[s[i]]) { sum -= map[s[i + 1]]; } else { sum += map[s[i]]; } } return sum + map[s.LastOrDefault()]; } Key concepts Hashtable Longest Common Prefix Solutions Python C# def longestCommonPrefix(self, strs): pre = strs[0] for i in strs: while not i.startswith(pre): pre = pre[:-1] return pre public string LongestCommonPrefix(string[] strs) { string prefix = strs[0]; foreach (string item in strs) { while (!item.StartsWith(prefix)) { prefix = prefix.Remove(prefix.Length - 1, 1); } } return prefix; } Algorithm Horizantal Vertical Valid Parentheses Python C# def isValid(s): stack = [] pairs = {\u0026#39;(\u0026#39;: \u0026#39;)\u0026#39;, \u0026#39;{\u0026#39;: \u0026#39;}\u0026#39;, \u0026#39;[\u0026#39;: \u0026#39;]\u0026#39;} for item in s: if item in pairs: stack.append(item) elif stack != [] and pairs[stack[-1]] == item: stack.pop() else: return False return len(stack) == 0 bool IsValid(string s) { List\u0026lt;char\u0026gt; stack = new List\u0026lt;char\u0026gt;(); Dictionary\u0026lt;char, char\u0026gt; pairs = new Dictionary\u0026lt;char, char\u0026gt;() { { \u0026#39;(\u0026#39;, \u0026#39;)\u0026#39;},{ \u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;},{ \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;}, }; foreach(char item in s) { if (pairs.ContainsKey(item)) { stack.Add(item); } else if (stack.Count !=0 \u0026amp;\u0026amp; pairs[stack[stack.Count-1]] == item) { stack.RemoveAt(stack.Count-1); } else { return false; } } return stack.Count == 0; } Merge Two Sorted Lists When you assign to list.next, it becomes the next value\nSolutions Python C# list1.next = value Algorithm Linked list Recursive Approach Iterative Approach Time complexity : O(n+m) time Space complexity : O(n+m) / O(1) Search Insert Position Python C# def searchInsert(self, nums, target): nums.append(target) nums.sort() return nums.index(target) def searchInsert(self, nums, target): return len([x for x in nums if x \u0026lt; target]) # Add item if target is less than the item # Return the length of list, it will be the index the target should be Algorithm Climbing Staris Solution Python C# def searchInsert(self, nums, target): Algorithm The Fibonacci Sequence Recursive / Dynamic Programming / Back Tracking TAB Python C# "
},
{
	"uri": "http://localhost:1313/frontend/css/grid/",
	"title": "Grid",
	"tags": [],
	"description": "",
	"content": " Length units for grid : px, ex(relative to parent), rem(relative to html), fr(fractional)\nGrid Layouts .container { display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr; } Shorthand\ngrid-template: rows / columns; Grid container won’t have any effect until the columns and rows are defined.\nRepeat grid-template-columns: repeat(n, size); Auto Explicit grid : when you specify grid-template-columns, grid-template-rows together Implicit : auto generated. Grid-auto-rows: grid height is determined by the tallest item grid-auto-rows: 15rem; auto size for rows, repeat(2,1fr)은 row가 무수히 많을 때 의미가 없으므로 grid-auto-columns: n; grid-flow가 column 일 때 사용 grid-auto-flow: row or column; grid의 direction (=flex-direction) auto-fill; exact size(value) auto-fit; stretch(value) minmax() grid-auto-rows: minmax(minsize, maxsize) min-content max-content Responsive = repeat + auto + minmax grid-template-columns:repeat(auto-fit, minmax(10px, 1fr)); Gap Unit: px, rem, em, % (fr x), in Parent column-gap : 2px;\rrow-gap: 1rem;\rgap: (column) (row); Start/End grid-column-start: 1\rgrid-column-end: 4 (= grid-column-end: span 3; or -1;)\rgrid-column : 1 / 4; (same as start + end)\rgrid-column: span 4 (grid item takes 3 spaces) Grid Template Areas (parent)\ngrid-template-columns: 1fr 1fr;\rgrid-template-rows: 1fr 1fr 1fr;\rgrid-template-areas : “ header header “ “side content” “footer footer” area는 columns, rows에 알맞게 배열 (child)\ngrid-area: name; name에 “” 안붙임 Alignment (parent)\njustify-content align-content place-content (child)\njustify-items align-items place-items * grid child does not layer or overlap each other\nPractices https://gridbyexample.com/\nhttps://www.quackit.com/css/grid/examples/css_grid_website_layout_examples.cfm\n"
},
{
	"uri": "http://localhost:1313/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "OOP Python Introduction : Install, Basic, Operators, Errors Basics : Variables, Operators, Functions, Module, Flows, Errors String Data structure : List, Tuple, Set, Dictionary Files Regular Expression Beautiful Soup Flask Selenium "
},
{
	"uri": "http://localhost:1313/react/2-route/",
	"title": "Route",
	"tags": [],
	"description": "",
	"content": "Tab npm install --save react-tabs —save: development purpose and deployed\nhttps://reactcommunity.org/react-tabs/\nhttps://github.com/reactjs/react-tabs\nimport { Tab, Tabs, TabList, TabPanel } from \u0026#34;react-tabs\u0026#34;; import \u0026#34;react-tabs/style/react-tabs.css\u0026#34;; \u0026lt;Tabs\u0026gt; \u0026lt;TabList\u0026gt; \u0026lt;Tab\u0026gt;Title 1\u0026lt;/Tab\u0026gt; \u0026lt;Tab\u0026gt;Title 2\u0026lt;/Tab\u0026gt; \u0026lt;/TabList\u0026gt; \u0026lt;TabPanel\u0026gt; \u0026lt;h2\u0026gt;Any content 1\u0026lt;/h2\u0026gt; \u0026lt;/TabPanel\u0026gt; \u0026lt;TabPanel\u0026gt; \u0026lt;h2\u0026gt;Any content 2\u0026lt;/h2\u0026gt; \u0026lt;/TabPanel\u0026gt; \u0026lt;/Tabs\u0026gt;; Router Routing is what component to render when a user enters a new URL\nhttps://reactrouter.com\nnpm install react-router-dom Basic Route Example import React from \u0026#34;react\u0026#34;; import { Route, Switch } from \u0026#34;react-router-dom\u0026#34;; import HomePage from \u0026#34;./home/HomePage\u0026#34;; import AboutPage from \u0026#34;./about/AboutPage\u0026#34;; import Header from \u0026#34;./common/Header\u0026#34;; import PageNotFound from \u0026#34;./PageNotFound\u0026#34;; function App() { return ( \u0026lt;div className=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34; component={HomePage} /\u0026gt; \u0026lt;Route path=\u0026#34;/about\u0026#34; component={AboutPage} /\u0026gt; \u0026lt;Route path=\u0026#34;/courses\u0026#34; component={CoursesPage} /\u0026gt; \u0026lt;Route component={PageNotFound} /\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Browser Router import { BrowserRouter, Routes, Route } from \u0026#34;react-router-dom\u0026#34;; function AppRouter () { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;Nav /\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; exact element={App /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/*\u0026#34; element={\u0026lt;PageNotFound /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); } export default AppRouter; Create Browser Router Entry import { createBrowserRouter, RouterProvider } from \u0026#34;react-router-dom\u0026#34;; function App() { const router = createBrowserRouter([ { path: \u0026#34;/\u0026#34;, element: \u0026lt;Nav /\u0026gt;, children: [ { path: \u0026#34;/\u0026#34;, element: \u0026lt;App /\u0026gt; }, { path: \u0026#34;/profile\u0026#34;, element: \u0026lt;Profile /\u0026gt; }, ], }, ]); return ( \u0026lt;AuthProvider\u0026gt; \u0026lt;RouterProvider router={router} /\u0026gt;{\u0026#34; \u0026#34;} \u0026lt;/AuthProvider\u0026gt; ); } Nav.js import { Outlet } from \u0026#39;react-router-dom\u0026#39;; .... return ( \u0026lt;\u0026gt;\u0026lt;nav\u0026gt;\u0026lt;/nav\u0026gt;\u0026lt;Outlet /\u0026gt;\u0026lt;/\u0026gt; ) Authenticated Routes AuthRoute.js import { Navigate, useLocation } from \u0026#34;react-router-dom\u0026#34;; export default function AuthRoute({ children }) { const { user } = useContext(AuthContext); // Global Variable const location = useLocation(); if (!user) { return \u0026lt;Navigate to={{ pathname: \u0026#34;/login\u0026#34;, state: { from: location } }} /\u0026gt;; } return children; } Entry element: \u0026lt;AuthRoute\u0026gt; \u0026lt;Profile /\u0026gt; \u0026lt;/AuthRoute\u0026gt;; NavLink It enables to style :active for navigation bar menu\nimport { NavLink } from “react-router-dom”; \u0026lt;NavLink to=\u0026#34;PATH\u0026#34;\u0026gt; HOME \u0026lt;/NavLink\u0026gt; Link Internal link in the app, use Link\nimport { Link } from “react-router-dom”; \u0026lt;Link to=\u0026#34;PATH\u0026#34;\u0026gt; HOME \u0026lt;/Link\u0026gt; External Link : \u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\nDocument Title useEffect(() =\u0026gt; { document.title = `About`; }, []); Responsive Nav // Track Nav Open or Close (useState) const [ navOpen, setNavOpen ] = usetState(false); // handle navOpen by clicking const showHideNav = () =\u0026gt; { setNavOpen(!navOpen); } // 데스크탑이면 메뉴 닫기 const isDesktop = (e) =\u0026gt; { if (e.matches) { setNavOpen(false); } } const closeNav = (e) =\u0026gt; { if (window.innerWidth \u0026lt; 600 ){ showHideNav(); } else { e.target.blur(); } } // navOpen controll by window size changes useEffect( () =\u0026gt; { let mediaQuery = window.matchMedia(‘(min-width: 600px)’); mediaQuery.addEventListener(‘change’, isDesktop); return () =\u0026gt; mediaQuery.removeEventListener(‘change’, isDesktop); }, [] ) return ( // 햄버거 버튼 \u0026lt;div onClick={showHideNav}\u0026gt; // 메뉴 \u0026lt;nav onClick={closeNav} /\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;Menu 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Menu 2\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt; ); "
},
{
	"uri": "http://localhost:1313/aws/s3/",
	"title": "S3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/frontend/sass/",
	"title": "Sass",
	"tags": [],
	"description": "",
	"content": "Sass "
},
{
	"uri": "http://localhost:1313/xtc/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": "New computer setup Node : download it from the official website\nGit : from website\nHugo\nMS Sql server\nMS Server Studio\nVisual Studio\nVSC\ngithub login format on save wakatime prettier emmet ESLint chrome\nslack\nPath Environment Variables System \u0026gt; Advanced system settings \u0026gt; Advanced \u0026gt; Environment Variables Add new path to \u0026lsquo;Path\u0026rsquo; under the bot User variables and System variables "
},
{
	"uri": "http://localhost:1313/xtc/php/2-setup/",
	"title": "Software setup for Laravel",
	"tags": [],
	"description": "",
	"content": "Windows Docker Setup open Docker Desktop \u0026gt; Settings (gear icon) \u0026gt; General Make sure Use the WSL 2 based engine is checked\nDocker Desktop \u0026gt; Settings \u0026gt; Resources \u0026gt; WSL Integration\nEnable integration with the Linux Distro you just installed. Apply \u0026amp; restart WSL Ubuntu for WSL : Download Ubuntu 22.04.1 LTS from Microsoft apps VSC Extensions : WSL, Remote Development Adding WSL in VSC : Ctrl+, \u0026gt; wsl \u0026gt; check integrated: use wsl profiles Docker : Settings \u0026gt; General \u0026gt; WSL2 based engine | Resources \u0026gt; Ubuntu-22.04 check MySQL \u0026amp; MySQL Workbench (Window) Install MySQL Workbench https://dev.mysql.com/downloads/workbench/\nStopping MySQL Server Windows key + R Type services.msc Scroll down until you see MySQL80\\ Click Stop the Service PHP in Windows Download : https://windows.php.net/download#php-8.2 (thread safe version) Check your system architecture : Start menu \u0026gt; Settings \u0026gt; System \u0026gt; About Extract file, move it into C:\\Program Files Copy the full path Start menu \u0026gt; Edit the system environment variables \u0026gt; Environment Variables System variables \u0026gt; Double click Path \u0026gt; New \u0026gt; add the path Open terminal : $ php -v PHP in Ubuntu VSC terminal \u0026gt; Ubuntu\n$ sudo apt-get update\r$ sudo apt-get install -y php8.0\r$ php -v Curl, Wget WSL Terminal\n$ sudo apt install curl (yes)\r$ curl --help\r$ sudo apt-get install wget\r$ wget --version Composer https://getcomposer.org/download/\nAdditional Browser Setup PHP Browser Extension - Clockwork\nhttps://chrome.google.com/webstore/detail/clockwork/dmggabnehkmmfmdffgajcflpdjlnoemp?hl=en-US\nTailwindCSS Dev Tools\nhttps://chrome.google.com/webstore/detail/devtools-for-tailwind-css/mihalpimkkhhigoielhempcamoffhfij\nVSC Extension https://marketplace.visualstudio.com/items?itemName=shufo.vscode-blade-formatter\nMac brew install php\rphp -v\rbrew install composer\rbrew install wget ?? sail?? "
},
{
	"uri": "http://localhost:1313/c/array/",
	"title": "Array",
	"tags": [],
	"description": "",
	"content": "Enumeration ///\nArray Array class stores a fixed length sequentail collection of elements of the same type\nDeclare // 1. string[] nameOfArray = new string[2]; nameOfArray[0] = \u0026#34;aa\u0026#34;; nameOfArray[1] = \u0026#34;bb\u0026#34;; // 2. string[] nameOfArray = new string[] { \u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34; } Type of Array console let user knows the type of array, not the item of array. if you want to print the specific item, refer the index of the item.\nConsole.Write(nameOfArray) Length nameOfArray.Length Sort Numerical or Alphabetical order\nArray.Sort(nameOfArray) Multidimensional Arrays string[,] nameOfArray = new string[] { {\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;}, {\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;} } Length of Multidimensional Array nameOfArray.GetLength(index) List Simmilar to array but the size can be modified during run-time\nC# Day 5\nDeclare, Assign List\u0026lt;T\u0026gt; name = new List\u0026lt;T\u0026gt;(); List\u0026lt;T\u0026gt; aa = new List\u0026lt;T\u0026gt;() { ... } T: string, int, obejct, custom class\nCustom Class class FullName { public string FirstName { get; set; } public string LastName { get; set; } } class program { static void Main(){ List\u0026lt;FullName\u0026gt; fullName = new List\u0026lt;FullName\u0026gt;(); fullName.Add(new FullName(){FirstName = \u0026#34;aa\u0026#34;, LastName=\u0026#34;bb\u0026#34;}) } } List Methods Add() list.Add(item)\nInsert() list.Insert(index, item)\nInsert item at index\nInserRange() list.InsertRange(index, Collection)\nInsert collection(IEnumrable) at index\nRemove() Remove item by value\nRemoveRange() Remove range at index\nRemoveAt() Remove item at index\nClear(); Remove all items\nDictionaries Dictionary\u0026lt;string, int\u0026gt; pair = new Dictionary\u0026lt;string, int\u0026gt;(); ContainsKey(key) TryGetValue(key, value) Generics C# Day 5\n"
},
{
	"uri": "http://localhost:1313/frontend/bootstrap/",
	"title": "Bootstrap",
	"tags": [],
	"description": "",
	"content": "Bootstrap "
},
{
	"uri": "http://localhost:1313/asp.net/crud/",
	"title": "CRUD",
	"tags": [],
	"description": "",
	"content": "Create Get Controller public IActionResult Create() { FoodStoreContext db = new FoodStoreContext(); ViewData[\u0026#34;Mfg\u0026#34;] = new SelectList(db.Table, \u0026#34;Mfg\u0026#34;, \u0026#34;Mfg\u0026#34;); return View(); } View Right click on View in Contrller and add Create template\nPost Controller\n[HttpPost] public IActionResult Create([Bind(\u0026#34;ProductId,Name,Mfg,Vendor,Price\u0026#34;)] Product product) { FoodStoreContext db = new FoodStoreContext(); // Ensure data is valid. if (ModelState.IsValid) { db.Add(product); db.SaveChanges(); // Commit changes to database. // Save is successful so show updated listing. return RedirectToAction(nameof(Index)); } // Data not valid so show form again with populated drop downs. ViewData[\u0026#34;Mfg\u0026#34;] = new SelectList(db.Manufacturers, \u0026#34;Mfg\u0026#34;, \u0026#34;Mfg\u0026#34;, product.Mfg); ViewData[\u0026#34;Vendor\u0026#34;] = new SelectList(db.Suppliers, \u0026#34;Vendor\u0026#34;, \u0026#34;Vendor\u0026#34;, product.Vendor); return View(product); } Detail Controller\npublic IActionResult Detail(string? id) { testContext context = new testContext(); var test = (from p in context.Test1s where p.Firstname == id select p).FirstOrDefault(); return View(test); } Razor\n@model WebApplication1.Models.Test1\r@{\rViewData[\u0026#34;Title\u0026#34;] = \u0026#34;Detail\u0026#34;;\r}\r\u0026lt;div\u0026gt;\r@Model.Firstname @Model.LastName\r\u0026lt;/div\u0026gt; Update (Edit) Delete Controller\npublic IActionResult Delete(string? id) { testContext db = new testContext(); var test = (from p in db.Test1s where p.Firstname == id select p).FirstOrDefault(); db.Remove(test); db.SaveChanges(); return RedirectToAction(nameof(Index)); } \u0026lt;a asp-action=\u0026#34;Delete\u0026#34; asp-route-id=\u0026#34;@item.Firstname\u0026#34;\u0026gt;Delete\u0026lt;/a\u0026gt; View Model Create a new ViewModel Add a new method inside Home controller put everything into anonymous type (var) using forEach, store it to VM (List) Store Data(DB) to VM Pass to the view (@IEmnumaerable?) Create the view and import the VM Use it Code First + View Model Practice * "
},
{
	"uri": "http://localhost:1313/xtc/work/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": "Db Update Update Data File\nUpdate Context file\nAdd-Migration Name\nif there are build errors, migration will fail. Check migration file : it only contains updates Up : for executing, Down : for roll back, both should match. (If drop in Up, add in Down) Check migration designer file\nCheck snapshot file : it contains entire db structure (Compare difference)\nIf everything is okay, update-database\nRoll Back Migration / When you want to pull from dev branch Change the connection string to local DB\nUpdate whatever you need\nupdate-database -Migration:\u0026ldquo;MigrationName\u0026rdquo; Migration name is the ealier one than you want to revert\nremove-migration\nadd-migration name\n// CleanUpOrderFlow\nremove migration without update just remove-migration and comment $([System.DateTime]::Now.Month) $([System.DateTime]::Now.Year) $([System.DateTime]::Now.AddMonths(-1).Month) $([System.DateTime]::Now.AddMonths(-1).Year) $(DefaultItemExcludes);Migrations*.Designer.cs \u0026lt;ItemGroup Condition=\u0026quot;'$(Configuration)'=='DEBUG'\u0026quot;\u0026gt;\r\u0026lt;Compile Include=\u0026quot;Migrations\\$(YearOfCurrentMonth)$(CurrentMonth)*.Designer.cs\u0026quot; /\u0026gt;\r\u0026lt;Compile Include=\u0026quot;Migrations\\$(YearOfLastMonth)$(LastMonth)*.Designer.cs\u0026quot; /\u0026gt;\r\u0026lt;/ItemGroup\u0026gt;\rthis out from web.\nforce change : assigning default value change data file\nand then change context file (NOT a snapshot)\nmodelBuilder.Entity\u0026lt;RestaurantGroupOption\u0026gt;() .Property(x =\u0026gt; x.Status) .HasDefaultValue(EntityStatus.Active); modelBuilder.Entity\u0026lt;RestaurantGroupOptionProduct\u0026gt;() .Property(x =\u0026gt; x.Status) .HasDefaultValue(EntityStatus.Active); and then migration\nSetting up Local DB find your local db name Open the Start menu, and enter services.\nChange the connection string in your project (Visual studio)\nWhen there is new migration ? : Check EFMigration history just in case\nPull from master branch Check the migration update-database (Make sure you are using local connection string) "
},
{
	"uri": "http://localhost:1313/xtc/angular/day3/",
	"title": "Day3",
	"tags": [],
	"description": "",
	"content": "Creating a Project Detail Component ng generate component project-detail In the newly created component we need to:\nImport the Project model Add Input to the import from @angular/core Add a project property decorated with @Input import { Component, Input } from \u0026#39;@angular/core\u0026#39;; import { Project } from \u0026#39;../model/project\u0026#39;; @Component({ selector: \u0026#39;app-project-detail\u0026#39;, templateUrl: \u0026#39;./project-detail.component.html\u0026#39;, styleUrls: [\u0026#39;./project-detail.component.scss\u0026#39;], }) export class ProjectDetailComponent { @Input() project?: Project; } Show the Project Detail Component, Conditionally For now we are going to set things up such that display of the project detail is contingent on a project having been passed a project from the projects component.\nproject-detail.component.html\n\u0026lt;article *ngIf=\u0026#34;project\u0026#34;\u0026gt;\r\u0026lt;section\u0026gt;\r\u0026lt;h2\u0026gt;{{ project.title | uppercase }}\u0026lt;/h2\u0026gt;\r\u0026lt;div\u0026gt;{{ project.body }}\u0026lt;/div\u0026gt;\r\u0026lt;/section\u0026gt;\r\u0026lt;footer\u0026gt;\r\u0026lt;div *ngIf=\u0026#34;project.category\u0026#34;\u0026gt;\rCategory: \u0026lt;span\u0026gt;{{ project.category.name }}\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div *ngIf=\u0026#34;project.tags?.length\u0026#34;\u0026gt;\rTags:\r\u0026lt;span *ngFor=\u0026#34;let tag of project.tags\u0026#34;\u0026gt;\r{{ tag.name }}\r\u0026lt;/span\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;\r\u0026lt;/article\u0026gt; projects.component.ts\nselectedProject?: Project;\ronSelect(project: Project): void {\rthis.selectedProject = project;\r}\rclearSelectedProject(): void {\rthis.selectedProject = undefined;\r} projects.component.html\nWrap the element that outputs the list of projects in a container that only shows if there is no selected project. Add a section that outputs and a Back button if it is set. \u0026lt;ng-container *ngIf=\u0026#34;!selectedProject\u0026#34;\u0026gt;\r\u0026lt;article\r*ngFor=\u0026#34;let project of projects | projectFilter : tagFilter\u0026#34;\r[class.hidden]=\u0026#34;categoryFilter \u0026amp;\u0026amp; project.category?.id != categoryFilter.id\u0026#34;\r\u0026gt;\r...\r\u0026lt;/article\u0026gt;\r\u0026lt;/ng-container\u0026gt; \u0026lt;section *ngIf=\u0026#34;selectedProject\u0026#34;\u0026gt;\r\u0026lt;div (click)=\u0026#34;clearSelectedProject()\u0026#34;\u0026gt;Back\u0026lt;/div\u0026gt;\r\u0026lt;app-project-detail [project]=\u0026#34;selectedProject\u0026#34;\u0026gt;\u0026lt;/app-project-detail\u0026gt;\r\u0026lt;/section\u0026gt; Angular Routing To set up routing in our Angular app we\u0026rsquo;re going to generate a new top-level module and then import it into our AppModule.\nBoth can be accomplished in one step with the CLI by running:\nng generate module app-routing --flat --module=app src/app/app-routing.module.ts\nimport { NgModule } from \u0026#34;@angular/core\u0026#34;; import { CommonModule } from \u0026#34;@angular/common\u0026#34;; @NgModule({ declarations: [], imports: [CommonModule], }) export class AppRoutingModule {} Boilerplate Cleanup We don\u0026rsquo;t need the CommonModule import, so you can remove it both from the top and from the imports array in the @NgModule decorator.\nWhat we DO need to import are\nRouterModule and Routes from the @angular/routing Our ProjectsComponent and ProjectDetailComponent. import { NgModule } from \u0026#34;@angular/core\u0026#34;; import { RouterModule, Routes } from \u0026#34;@angular/router\u0026#34;; import { ProjectsComponent } from \u0026#34;./projects/projects.component\u0026#34;; import { ProjectDetailComponent } from \u0026#34;./project-detail/project-detail.component\u0026#34;; Setting up Routes Next, we\u0026rsquo;ll start setting up our custom routes as an array of Routes.\nLet\u0026rsquo;s route requests to \u0026lsquo;projects\u0026rsquo; to our ProjectsComponent.\nconst routes: Routes = [{ path: \u0026#34;projects\u0026#34;, component: ProjectsComponent }]; Then, within the @NgModule decorator, we\u0026rsquo;ll pass our routes array to the forRoot() method of the RouterModule in the imports array and also export the now configured RouterModule so we can use it throughout our app.\n@NgModule({ declarations: [], imports: [RouterModule.forRoot(routes)], exports: [RouterModule], }) RouterOutlet At a high level, the Router module provides us with a RouterOutlet component and when a route is matched it will display whichever component we have specified for that route.\nTo see this in action, replace the component in app.component.html with app.component.html\n\u0026lt;header\u0026gt;\r\u0026lt;h1\u0026gt;{{ title }}\u0026lt;/h1\u0026gt;\r\u0026lt;/header\u0026gt;\r\u0026lt;main\u0026gt;\r\u0026lt;router-outlet\u0026gt;\u0026lt;/router-outlet\u0026gt;\r\u0026lt;/main\u0026gt;\r\u0026lt;footer\u0026gt;\u0026amp;copy; {{ date.getFullYear() }} {{ author }}\u0026lt;/footer\u0026gt; Set up Navigation with routerLinks Router also provides us with a routerLink directive that we can use to turn any clickable element into an internal (client side) link by assigning it a path.\napp.component.html\n\u0026lt;header\u0026gt;\r\u0026lt;h1\u0026gt;{{ title }}\u0026lt;/h1\u0026gt;\r\u0026lt;nav\u0026gt;\r\u0026lt;span routerLink=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/span\u0026gt; |\r\u0026lt;span routerLink=\u0026#34;/projects\u0026#34;\u0026gt;Projects\u0026lt;/span\u0026gt;\r\u0026lt;/nav\u0026gt;\r\u0026lt;/header\u0026gt; Route Parameters Next, let\u0026rsquo;s add a parameterized route to display our project detail component.\nTo make this work we will:\nAdd a parameterized route in the app-routing module Add a method to our project service that returns a specific project by id Set up our project-detail component to read the id parameter from the route and call the appropriate method in the project service For good measure, we\u0026rsquo;ll also add a back button and use the Location directive to allow the user to navigate back via their client-side navigation history. app-routing.module.ts\nimport { NgModule } from \u0026#39;@angular/core\u0026#39;; import { RouterModule, Routes } from \u0026#39;@angular/router\u0026#39;; import { ProjectsComponent } from \u0026#39;./projects/projects.component\u0026#39;; import { ProjectDetailComponent } from \u0026#39;./project-detail/project-detail.component\u0026#39;; const routes: Routes = [ { path: \u0026#39;projects\u0026#39;, component: ProjectsComponent }, { path: \u0026#39;projects/:id\u0026#39;, component: ProjectDetailComponent }, ]; ... project.service.ts\ngetProject(id: number): Observable\u0026lt;Project\u0026gt; { const project = PROJECTS.find((p) =\u0026gt; p.id === id)!; return of(project); } project-detail.component.ts\nimport { Component, Input } from \u0026#39;@angular/core\u0026#39;; import { ActivatedRoute } from \u0026#39;@angular/router\u0026#39;; import { Location } from \u0026#39;@angular/common\u0026#39;; import { ProjectService } from \u0026#39;../project.service\u0026#39;; import { Project } from \u0026#39;../model/project\u0026#39;; @Component({ selector: \u0026#39;app-project-detail\u0026#39;, templateUrl: \u0026#39;./project-detail.component.html\u0026#39;, styleUrls: [\u0026#39;./project-detail.component.scss\u0026#39;], }) export class ProjectDetailComponent { constructor( private route: ActivatedRoute, private projectService: ProjectService, private location: Location ) {} // @Input() project?: Project; project?: Project; ngOnInit(): void { this.getProject(); } getProject(): void { const id = Number(this.route.snapshot.paramMap.get(\u0026#39;id\u0026#39;)); this.projectService .getProject(id) .subscribe((project) =\u0026gt; (this.project = project)); } goBack(): void { this.location.back(); } } project-detail.component.ts\nimport { Component, Input } from \u0026#39;@angular/core\u0026#39;; import { ActivatedRoute } from \u0026#39;@angular/router\u0026#39;; import { Location } from \u0026#39;@angular/common\u0026#39;; import { ProjectService } from \u0026#39;../project.service\u0026#39;; import { Project } from \u0026#39;../model/project\u0026#39;; @Component({ selector: \u0026#39;app-project-detail\u0026#39;, templateUrl: \u0026#39;./project-detail.component.html\u0026#39;, styleUrls: [\u0026#39;./project-detail.component.scss\u0026#39;], }) export class ProjectDetailComponent { constructor( private route: ActivatedRoute, private projectService: ProjectService, private location: Location ) {} // @Input() project?: Project; project?: Project; ngOnInit(): void { this.getProject(); } getProject(): void { const id = Number(this.route.snapshot.paramMap.get(\u0026#39;id\u0026#39;)); this.projectService .getProject(id) .subscribe((project) =\u0026gt; (this.project = project)); } goBack(): void { this.location.back(); } } project-detail.component.html\n\u0026lt;header\u0026gt;\r\u0026lt;button type=\u0026#34;button\u0026#34; (click)=\u0026#34;goBack()\u0026#34;\u0026gt;Back\u0026lt;/button\u0026gt;\r\u0026lt;/header\u0026gt; Outputting HTML For our project detail page when we output the project.body we\u0026rsquo;re back to seeing our \u0026lt;p\u0026gt; tags.\nAll of the same cautions and warning about script injection are worth repeating, but since we have absolute control of the content let\u0026rsquo;s output our HTML as HTML again.\nThe issue, in this case, is that when we use interpolation in our templates Angular is protecting us by escaping the data.\n\u0026lt;div\u0026gt;{{ project.body }}\u0026lt;/div\u0026gt;\nThe workaround is to bind our data to the innerHTML of our div.\nproject-detail.component.html\n\u0026lt;div [innerHTML]=\u0026#34;project.body\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; Fetching Data Asynchronously Currently our projects service is loading and returning the data synchronously.\nIt\u0026rsquo;s not a big deal since our data is local and lightweight, but in most situations that would not be the case. As such, let\u0026rsquo;s convert our services to run asynchronously.\nWe can do so quite easily using the RxJS which is already available in our Angular project.\nWhat we\u0026rsquo;re going to use from the RxJS library are the Observable class which allows us to subscribe and the of() function which gathers and emits the data asynchronously until it completes (or errors out).\nWithout getting too far off track, this is the Observer pattern in action.\nYou can learn more about RxJS here: https://rxjs.dev/\nImplementing Async Data Loading project.service.ts\nimport { Injectable } from \u0026#34;@angular/core\u0026#34;; import { Observable, of } from \u0026#34;rxjs\u0026#34;; import { Project } from \u0026#34;./model/project\u0026#34;; import { PROJECTS } from \u0026#34;./data/projects\u0026#34;; @Injectable({ providedIn: \u0026#34;root\u0026#34;, }) export class ProjectService { constructor() {} getProjects(): Observable\u0026lt;Project[]\u0026gt; { const projects = of(PROJECTS); return projects; } // getProjects(): Project[] { // return PROJECTS; // } } projects.component.ts\nFirst we need to add OnInit to our imports from @angular/core\nimport { Component, OnInit, Input, Output, EventEmitter } from \u0026#34;@angular/core\u0026#34;; Then we need to let angular know that our component class implements OnInit\nexport class ProjectsComponent implements OnInit { Lastly, we chain a subscribe method onto our getProjects() call and use the callback to set our projects data.\nprojects: Project[] = []; getProjects(): void { // this.projects = this.projectService.getProjects(); this.projectService .getProjects() .subscribe((projects) =\u0026gt; (this.projects = projects)); } Category and Tag Routing Rather than passing data up and down our component tree and relying on condition output and pipes to filter our projects, let\u0026rsquo;s handle this with route parameters.\nNote: Performance wise this is a step backwards since we will be making unnecessary requests to fetch data that is highly unlikely to change within any given session, BUT it will be MUCH simpler to manage and we\u0026rsquo;re fetching asynchronously so it doesn\u0026rsquo;t overly degrade the UX\u0026hellip;\nThe process here is nearly identical to using route params to load a single project.\nAdd parameterized routes Add methods to our project service Update the projects component to use the new service methods app-routing.module.ts\nimport { NgModule } from \u0026#34;@angular/core\u0026#34;; import { RouterModule, Routes } from \u0026#34;@angular/router\u0026#34;; import { ProjectsComponent } from \u0026#34;./projects/projects.component\u0026#34;; import { ProjectDetailComponent } from \u0026#34;./project-detail/project-detail.component\u0026#34;; const routes: Routes = [ { path: \u0026#34;projects\u0026#34;, component: ProjectsComponent }, { path: \u0026#34;projects/categories/:id\u0026#34;, component: ProjectsComponent }, { path: \u0026#34;projects/tags/:id\u0026#34;, component: ProjectsComponent }, { path: \u0026#34;projects/:id\u0026#34;, component: ProjectDetailComponent }, ]; project.service.ts\ngetProjectsByCategory(id: number): Observable\u0026lt;Project[]\u0026gt; { const projects = PROJECTS.filter((p) =\u0026gt; p.category_id === id)!; return of(projects); } getProjectsByTag(id: number): Observable\u0026lt;Project[]\u0026gt; { const projects = PROJECTS.filter((p) =\u0026gt; { if (p.tags.some((t) =\u0026gt; t.id === id)) { return true; } else { return false; } })!; return of(projects); } projects.component.ts\nimport { ActivatedRoute } from \u0026#39;@angular/router\u0026#39;; import { Location } from \u0026#39;@angular/common\u0026#39;; ... export class ProjectsComponent implements OnInit { constructor( private projectService: ProjectService, private route: ActivatedRoute ) {} ... getProjectsByCategory(): void { const id = Number(this.route.snapshot.paramMap.get(\u0026#39;id\u0026#39;)); this.projectService .getProjectsByCategory(id) .subscribe((projects) =\u0026gt; (this.projects = projects)); } getProjectsByTag(): void { const id = Number(this.route.snapshot.paramMap.get(\u0026#39;id\u0026#39;)); this.projectService .getProjectsByTag(id) .subscribe((projects) =\u0026gt; (this.projects = projects)); } ngOnInit(): void { const segment: string = this.route.snapshot.url[1]?.path; if (segment === \u0026#39;categories\u0026#39;) { this.getProjectsByCategory(); } else if (segment === \u0026#39;tags\u0026#39;) { this.getProjectsByTag(); } else { this.getProjects(); } } Note: I\u0026rsquo;m taking a rather circuitous approach to determining whether we want all projects, projects by category, or projects by tag. That too could be parameterized instead of deconstructing the path, but for now this gets the job done.\nhttp://localhost:4200/projects/categories/1\nhttp://localhost:4200/projects/tags/1\nIf you\u0026rsquo;re satisfied with how this works, you can go back through your projects, categories, and tags components and replace your event driven data-flow approach with simple routerLinks.\nI\u0026rsquo;m not going to walk you through it, but you could also swap out the id based parameters with slugs if you choose.\nBug Fix: Here\u0026rsquo;s a fix so that changes in the route params triggers a re-fetch of the projects data.\nprojects.component.ts\n// replace the previous version of ngOnInit with this: ngOnInit(): void { this.route.params.subscribe((params) =\u0026gt; { const segment: string = this.route.snapshot.url[1]?.path; if (segment === \u0026#39;categories\u0026#39;) { this.getProjectsByCategory(); } else if (segment === \u0026#39;tags\u0026#39;) { this.getProjectsByTag(); } else { this.getProjects(); } }); } Displaying Images To display local images:\nCreate an images folder under /src/assets. Access them by binding the to the src attribute of your img tag Remember to wrap the string in single quotes when binding \u0026lt;img [src]=\u0026#34;\u0026#39;assets/images/JoshuaGiraffe.jpg\u0026#39;\u0026#34; alt=\u0026#34;Josh Solomon\u0026#34; /\u0026gt; To set a background image in your CSS:\nThe assets folder is available at the root of your app. body { background-image: url(\u0026#34;/assets/images/JoshuaGiraffe.jpg\u0026#34;); } Or\u0026hellip; load your images externally from a CDN, S3 bucket, etc.\n"
},
{
	"uri": "http://localhost:1313/xtc/work/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "CSS The z index of child elements is always the z index of the parent element.\n(a child element is limited to the stacking context of its parent.)\nhttps://www.freecodecamp.org/news/4-reasons-your-z-index-isnt-working-and-how-to-fix-it-coder-coder-6bc05f103e6c/\njQuery var toggleCheck = $(`#toggle-${id}`); // If the return is fullfilled, set the button to true if (result.data == 104) { toggleCheck.prop(\u0026#34;checked\u0026#34;, true); } else { toggleCheck.prop(\u0026#34;checked\u0026#34;, false); } HTML Follow the basic bootstrap structure like container, container-fluid\n"
},
{
	"uri": "http://localhost:1313/aws/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/aws/5-lambda/lambda-.net/",
	"title": "Lambda in .NET",
	"tags": [],
	"description": "",
	"content": "Install the lambda template for .net\ndotnet new -i Amazon.Lambda.Templates Create a function\ndotnet new lambda.EmptyFunction --name MyFunction\rUpdate the profile and region in aws-lambda-tools-defaults.json\r...\r\u0026#34;profile\u0026#34;: \u0026#34;default\u0026#34;,\r\u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;,\r...\rusing Amazon.Lambda.RuntimeSupport;\rvar handler = (string input, ILambdaContext context) =\u0026gt;\r{\rcontext.Logger.LogInformation(\u0026#34;Get Request\u0026#34;);\rcontext.Logger.LogInformation(input);\rvar response = new APIGatewayHttpApiV2ProxyResponse\r{\rStatusCode = (int)HttpStatusCode.OK,\rBody = \u0026#34;Hello AWS Serverless\u0026#34;,\rHeaders = new Dictionary\u0026lt;string, string\u0026gt; { { \u0026#34;Content-Type\u0026#34;,\r\u0026#34;text/plain\u0026#34; } }\r};\rreturn response;\r};\rawait LambdaBootstrapBuilder.Create(handler).Build().RunAsync(); From inside the function directory, run the following command to install the runtime support package\ndotnet add package Amazon.Lambda.RuntimeSupport\rdotnet add package Amazon.Lambda.APIGatewayEvents Test the function locally\ndotnet test MyFunction.Tests/MyFunction.Tests.csproj\rdotnet tool install -g Amazon.Lambda.Tools "
},
{
	"uri": "http://localhost:1313/xtc/php/3-intro/",
	"title": "Laravel Intro",
	"tags": [],
	"description": "",
	"content": "Laravel Laravel is a full stack web application managing a PHP framework\nLaravel Sail Sail was created by the Laravel team as a tool to expedite and Dockerize Laravel development with an emphasis on modern development practices using the latest tools and technologies\nLaunching Laravel App Window : Open Ubuntu terminal in VSC Make sure Docker is running : empty containers, images In your working directory,\ncurl -s \u0026#34;https://laravel.build/[name]\u0026#34; | bash\rcd [name]\r./vendor/bin/sail up -d //start the container\r./vendor/bin/sail stop //stop the container attached mode : output is being directed into the terminal detached mode : add -d after sail up (faster), after initial run with attached mode Setting up a Shell Alias (Window) Check which shell is running : $ ps -p $$ Switch to home directory : $ cd ~ Verify .bashrc exists : $ ls -alh Open .bashrc with vi : $ vi .bashrc Insert mode : type i Paste in the following Alias definition (around line 100) alias sail=\u0026#39;[ -f sail ] \u0026amp;\u0026amp; sh sail || sh vendor/bin/sail\u0026#39; Save and close : esc \u0026gt; :wq \u0026gt; enter Restart the shell to use the alias : ./vender/bin/sail up -\u0026gt; sail up Exploring the App docker-compose.yml : configuration for the group of images/containers composer.json : like package.json artisan : Artisan is the CLI included with Laravel. Blade Blade is the templating engine that is included with Laravel.\nBlade is lightweight, relatively straightforward to use, compiles down into plain PHP (so you don\u0026rsquo;t have to write the PHP yourself) and is cached until the template is modified which makes it fast.\nBlade templates are stored in the resources/views directory and have the extension .blade.php\nDisplay data from Routes \u0026lt;?php echo $name; ?\u0026gt; or\n{{ $name }} Default Variables using ?? (Null coalescing operator) {{ $name ?? \u0026#34;Default\u0026#34; }} Routes Routes configure app/Providers/RouteServiceProvider.php\n[ routes/web.php ]\n\u0026lt;?php\ruse Illuminate\\Support\\Facades\\Route;\rRoute::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;name-of-blade\u0026#39;); } Passing the data Passing Single Data\nRoute::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;name-of-blade\u0026#39;, [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Byul\u0026#39;]); } Passing Multiple Data\nview(\u0026#39;welcome, [\u0026#39;name\u0026#39;=\u0026gt;\u0026#39;aa\u0026#39;, \u0026#39;sal\u0026#39;=\u0026gt;\u0026#39;aa\u0026#39;]) or\rview(\u0026#39;welcome\u0026#39;)-\u0026gt;with(\u0026#39;name\u0026#39;,\u0026#39;aa\u0026#39;)-\u0026gt;with(\u0026#39;sal\u0026#39;,\u0026#39;aa\u0026#39;) Route Parameters\nRoute::get(\u0026#39;/greetings/{name}\u0026#39;, function ($name) {\rreturn view(\u0026#39;welcome\u0026#39;)-\u0026gt;with(\u0026#39;name\u0026#39;, $name) }); Optional Route Parameters\nRoute::get(\u0026#39;/greetings/{name?}\u0026#39;, function ($name=\u0026#39;aa\u0026#39;) {\rreturn view(\u0026#39;welcome\u0026#39;)-\u0026gt;with(\u0026#39;name\u0026#39;, $name) }); name is an optional route parameter aa is a default value Fallback Routes : Unhandled requests (404 errors)\nRoute::fallback(function() {\rreturn view(\u0026#39;404page-view\u0026#39;) }); Controller Note: If for some reason you are working locally instead of via Sail, you would run:\nphp artisan list You will encounter php artisan \u0026hellip; in many online tutorials. Just replace php with sail if you\u0026rsquo;re sailing along with containers.\nsail artisan make:controller GreetingController app/Http/Conrollers/GreetingController.php\nclass GreetingController extends Controller { public function greet($name = \u0026#39;Earthling\u0026#39;) { return view(\u0026#39;welcome\u0026#39;) -\u0026gt;with(\u0026#39;name\u0026#39;, $name) -\u0026gt;with(\u0026#39;salutation\u0026#39;, \u0026#39;Greetings\u0026#39;); } } routes/web.php\nLet\u0026rsquo;s change our /greetings/{name?} route to call the greet method in our controller:\nRoute::get(\u0026#39;/greetings/{name?}\u0026#39;, [GreetingController::class, \u0026#39;greet\u0026#39;]); Note: We don\u0026rsquo;t need to explicitly pass the route parameter to controller. It is passed automatically.\nWe do, however, need to make our controller available for use.\nWe can import the class by adding the following near the top of our file\nuse App\\Http\\Controllers\\GreetingController; Or, to make things easier and avoid typos, we can use the PHP Namespace Resolver extension and simply place our cursor within GreetingController and press Ctrl-Alt-i to have the class imported for us.\nhttps://marketplace.visualstudio.com/items?itemName=MehediDracula.php-namespace-resolver\nBlade Layout Options In order to set up our layouts and have views within other views, there are several ways we can go.\nWe can either:\nTemplate Inheritance Use the @section directive to define sections of content Use the @yield directive to display the contents of a given section Use the @extends directive to specify which layout a child view should \u0026ldquo;inherit\u0026rdquo;. Include views directly within other views using the @include directive There are also conditional variants @includeIf, @includeWhen, @includeUnless, and @includeFirst Use Blade components and slots. For brevity\u0026rsquo;s sake and to minimize confusion, we\u0026rsquo;ll focus mainly on components and slots, but first let\u0026rsquo;s take a quick look at the older way of doing things.\nLayouts through Inheritance Layouts the Legacy Way Let\u0026rsquo;s begin by deconstructing welcome.blade.php.\nCreate a new folder named layouts under resources/views/, and within that also create a folder named partials.\nIn the layouts folder, create a file named app.blade.php\nresources/views/layouts/app.blade.php\nCopy the entire contents of welcome.blade.php into app.blade.php.\nThen, cut out the div that exists inside the body tag and replace it with:\n@yield(\u0026#39;content\u0026#39;) Go back to welcome.blade.php and replace the all of the code with just the div you cut out from the previous step.\nThe @yield directive above is telling the Blade engine that we will be defining a section with the indicated name in the view file that extends this layout.\nAt the top of the file add in @extends(\u0026rsquo;layouts.app\u0026rsquo;) and wrap the div with @section(\u0026lsquo;content\u0026rsquo;) and @endsection.\n@extends(\u0026#39;layouts.app\u0026#39;) @section(\u0026#39;content\u0026#39;) \u0026lt;div class=\u0026#34;relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center py-4 sm:pt-0\u0026#34;\u0026gt; {{ $salutation ?? \u0026#39;Hello\u0026#39; }}, {{ $name ?? \u0026#39;Laravel\u0026#39;}}! \u0026lt;/div\u0026gt; @endsection The @extends directive tells Blade which layout file to use and @section(\u0026lsquo;content\u0026rsquo;) and @endsection tells Blade what should be inserted when we @yield(\u0026lsquo;content\u0026rsquo;) in the layout.\nPartials with @include Within the partials folder let\u0026rsquo;s create a new file named _head.blade.php and extract the \u0026lt;head\u0026gt; element out of app.blade.php into _head.blade.php\nNote: By convention partial templates should begin with an underscore.\nThe @include directive allows us to directly include a partial view within another view.\nAdd the following code to app.blade.php where the HTML head should be.\n@include(\u0026#39;layouts.partials._head\u0026#39;) Some additional things to know about the @include directive:\nAll variables available to the parent view are inherited by @included sub-views. We can also make additional data available to sub-views. @include(\u0026lsquo;view.name\u0026rsquo;, [\u0026lsquo;status\u0026rsquo; =\u0026gt; \u0026lsquo;complete\u0026rsquo;]) We can conditionally include a sub-view. @includeWhen($boolean, \u0026lsquo;view.name\u0026rsquo;, [\u0026lsquo;status\u0026rsquo; =\u0026gt; \u0026lsquo;complete\u0026rsquo;]) @includeUnless($boolean, \u0026lsquo;view.name\u0026rsquo;, [\u0026lsquo;status\u0026rsquo; =\u0026gt; \u0026lsquo;complete\u0026rsquo;]) Set up a Laravel Portfolio App Let\u0026rsquo;s start a new Laravel Project for your Portfolio Application\nOpen your Ubuntu WSL terminal Stop any running sail containers sail stop Optionally, you can delete the containers from Docker Desktop Initialize a new project curl -s https://laravel.build/jsolomon-showcase | bash Provide your Ubuntu password when prompted Launch the app in via Sail (Docker), detached sail up -d Verify in browser http://localhost/ Initialize a local git repo for version control git init add files and make your initial commit Create and push to a github remote Blade Components The alternative to using @include and @yield with @extends and @section/@endsection is to use Blade components.\nFirst, let\u0026rsquo;s create a components folder directly under the views folder and within that, create layout.blade.php\nNote: Similar to how any file in the views folder is available as a view, anything in views/components is instantly available as a Blade component.\nNext, copy over the contents of welcome.blade.php and strip out the body html\n\u0026lt;html lang=\u0026#34;{{ str_replace(\u0026#39;_\u0026#39;, \u0026#39;-\u0026#39;, app()-\u0026gt;getLocale())}}\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\r\u0026lt;body class=\u0026#34;antialiased\u0026#34;\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Inside the body tag, rather than using @yield, let\u0026rsquo;s echo out a content variable. Insert:\n{{ $content }} Projects Views For our portfolio application we will be managing and displaying a collection of projects, so let\u0026rsquo;s organize our views accordingly.\nCreate a folder directly under resources/views/ named projects, and within that create index.blade.php and project.blade.php\nTo reference a Blade component we use what looks like an HTML tag, but prefixed with x-\nIn our case we want to use the layout component, so in index.blade.php let\u0026rsquo;s add:\n\u0026lt;x-layout\u0026gt;\r\u0026lt;/x-layout\u0026gt; Since our layout component is expecting and echoing out a variable named $content, we need to provide it in one of two ways.\nWe can either:\nAdd it as an attribute in the component tag \u0026lt;x-layout content=\u0026quot;Build a Portfolio\u0026quot;\u0026gt; Create a slot and set its name attribute \u0026lt;x-slot name=\u0026quot;content\u0026quot;\u0026gt;Build a Portfolio\u0026lt;/x-slot\u0026gt; \u0026lt;x-layout\u0026gt;\r\u0026lt;x-slot name=\u0026#34;content\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center py-4 sm:pt-0\u0026#34;\u0026gt;\rDisplay a list of projects.\r\u0026lt;/div\u0026gt;\r\u0026lt;/x-slot\u0026gt;\r\u0026lt;/x-layout\u0026gt; Also copy the contents of index.blade.php to project.blade.php and change the text.\nTo test this out, let\u0026rsquo;s create new routes for our project index and detail views.\nRouting Intro In routes/web.php add the following:\nRoute::get(\u0026#39;/projects\u0026#39;, function () { return view(\u0026#39;projects.index\u0026#39;); }); Route::get(\u0026#39;/projects/project\u0026#39;, function () { return view(\u0026#39;projects.project\u0026#39;); }); Navigate to http://localhost/projects and http://localhost/projects/project\nNote: Our layout Blade component is what is referred to as an anonymous component, which is to say it is just a view template without an associated class file. Later we\u0026rsquo;ll be building components that are made up of both a class and a template.\nWe also could have used artisan to make our component.\nFor our anonymous component the artisan command would have been:\nsail artisan make:component layout --view Project Controller, Routes, \u0026amp; Views Let\u0026rsquo;s start out by creating our ProjectController\nIn your Ubuntu terminal, run:\nsail artisan make:controller ProjectController That will create our controller file in app/Http/Controllers/\nIn ProjectController.php, inside the class definition, add the following methods to return our views.\npublic function index() { return view(\u0026#39;projects.index\u0026#39;); } public function show($project) { return view(\u0026#39;projects.project\u0026#39;, [\u0026#39;project\u0026#39; =\u0026gt; $project]); } Update our Routes In routes/web.php let\u0026rsquo;s set up the get routes to call the appropriate controller methods.\nFirst, add the following near the top to make our new controller available:\nuse App\\Http\\Controllers\\ProjectController; Then, refactor our projects routes, as follows:\nRoute::get(\u0026#39;/projects\u0026#39;, [ProjectController::class, \u0026#39;index\u0026#39;]); Route::get(\u0026#39;/projects/{project}\u0026#39;, [ProjectController::class, \u0026#39;show\u0026#39;]); Note:\nIf you have the PHP Namespace Resolver extension installed you can place your cursor within ProjectController, right-click, and choose Import Class. This can be helpful in avoiding typos.\nRoute Parameter Intro For the individual project view we\u0026rsquo;re using a route parameter.\nEventually we\u0026rsquo;ll be extracting either a slug or an id and loading our data from the database accordingly, but for now just make sure that the show() function in ProductController receives $product and passes it to the view.\nTo see the value, echo it out in the view with \u0026lt;h2\u0026gt;Project: {{ $project }}\u0026lt;/h2\u0026gt;\nDummy Data In order to take the next steps with our projects index and detail views, let\u0026rsquo;s hard-code some dummy data in our ProjectController.\nInside the index() method, before the return statement, add the following:\n$projects = [\r[\r\u0026#39;id\u0026#39; =\u0026gt; 0,\r\u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Node.js Yearbook\u0026#39;,\r\u0026#39;description\u0026#39; =\u0026gt; \u0026#39;Details coming soon...\u0026#39;,\r\u0026#39;is_published\u0026#39; =\u0026gt; false\r],\r[\r\u0026#39;id\u0026#39; =\u0026gt; 1,\r\u0026#39;title\u0026#39; =\u0026gt; \u0026#39;React Movie App\u0026#39;,\r\u0026#39;description\u0026#39; =\u0026gt; \u0026#39;...\u0026#39;,\r\u0026#39;is_published\u0026#39; =\u0026gt; false\r],\r[\r\u0026#39;id\u0026#39; =\u0026gt; 3,\r\u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Laravel Portfolio Back-End\u0026#39;,\r\u0026#39;description\u0026#39; =\u0026gt; \u0026#39;In progress. Stay tuned.\u0026#39;,\r\u0026#39;is_published\u0026#39; =\u0026gt; false\r]\r]; Then, pass the dummy data to the index view:\nreturn view(\u0026#39;projects.index\u0026#39;) -\u0026gt;with(\u0026#39;projects\u0026#39;, $projects); While we\u0026rsquo;re here, let\u0026rsquo;s also simulate passing a single todo to our singular todo view.\n$project= [ \u0026#39;id\u0026#39; =\u0026gt; 4, \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Vue.js Portfolio Front-End\u0026#39;, \u0026#39;description\u0026#39; =\u0026gt; \u0026#39;...\u0026#39;, \u0026#39;is_published\u0026#39; =\u0026gt; false ]; return view(\u0026#39;projects.project\u0026#39;, [\u0026#39;project\u0026#39; =\u0026gt; $project]); Blade Loops and Conditionals In order to output our projects list in our index view, we\u0026rsquo;re going to need some conditional logic as well as iteration. Fortunately, Blade provides simple directives to handle these.\nIf Statements We can create if statements using @if, @elseif, @else, and @endif directives.\nIn index.blade.php add the following, above the div with our placeholder text, but within the x-slot named content:\n@if (count($projects)) \u0026lt;div\u0026gt;{{ count($projects) }} projects to peep.\u0026lt;/div\u0026gt; @else \u0026lt;div\u0026gt;Nothing to showcase, yet.\u0026lt;/div\u0026gt; @endif Loops Blade also offers several looping directives.\nFor our purposes we\u0026rsquo;ll use a @foreach loop.\nReplace the placeholder content with:\n@foreach ($projects as $project) \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;/projects/{{ $project[\u0026#39;id\u0026#39;] }}\u0026#34;\u0026gt;{{ $project[\u0026#39;title\u0026#39;] }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{ $project[\u0026#39;description\u0026#39;] }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; @endforeach Note: Since we are currently passing in the projects as an array of arrays we need to use square bracket syntax to access the values by their key.\nOnce we are have a Project model we\u0026rsquo;ll be working with objects and will be able to access their properties using $project-\u0026gt;id.\nFor more info on Blade directives, see the docs:\nhttps://laravel.com/docs/9.x/blade#blade-directives\nTailwindCSS Setup Installation\nsail npm install -D tailwindcss postcss autoprefixer Initialization\nsail npx tailwindcss init -p Set the Template Paths In tailwind.config.js\n/** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ module.exports = { content: [\u0026#34;./resources/**.*.blade.php\u0026#34;, \u0026#34;./resources/**/*.js\u0026#34;], theme: { extend: {}, }, plugins: [], }; Add the Tailwind Directives to CSS In resources/css/app.css\n@tailwind base;\r@tailwind components;\r@tailwind utilities; To fix the \u0026ldquo;unknown @ rules warning in VSCode.\nOpen Settings in VSCode (Ctrl + ,) then type \u0026ldquo;files assoc\u0026rdquo; in the search bar.\nAdd an item to associate *.css with tailwindcss\nAdd the Tailwind CSS Intellisense Extension for VSCode https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\nuser \u0026gt; tailwind CSS: Emmet Completions (check)\nLoad Tailwind from CDN into main layout file In layout.blade.php, replace the first \u0026lt;style\u0026gt;...\u0026lt;/style\u0026gt; element with:\n\u0026lt;script src=\u0026quot;https://cdn.tailwindcss.com\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\nStart Styling with TailwindCSS! As an initial test, let\u0026rsquo;s add some tailwind classes to the project count div at the top of index.blade.php\n\u0026lt;div class=\u0026#34;text-xl text-orange-700 bg-gray-100\u0026#34;\u0026gt;{{ count($projects) }} projects to peep.\u0026lt;/div\u0026gt; Tailwind Styling our Projects \u0026lt;div\rclass=\u0026#34;relative flex justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center py-4 sm:pt-0\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;mt-6\u0026#34;\u0026gt;\r\u0026lt;section class=\u0026#34;grid grid-cols-1 md:grid-cols-2 gap-2\u0026#34;\u0026gt;\r@foreach ($projects as $project)\r\u0026lt;div class=\u0026#34;p-6 bg-white overflow-hidden shadow sm:rounded-lg\u0026#34;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;a href=\u0026#34;/projects/{{ $project[\u0026#39;id\u0026#39;] }}\u0026#34;\u0026gt;{{ $project[\u0026#39;title\u0026#39;] }}\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;{{ $project[\u0026#39;description\u0026#39;] }}\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r@endforeach\r\u0026lt;/section\u0026gt;\r@if (count($projects))\r\u0026lt;div class=\u0026#34;text-xs w-full text-right\u0026#34;\u0026gt;{{ count($projects) }} projects to peep.\u0026lt;/div\u0026gt;\r@else\r\u0026lt;div\u0026gt;Nothing to showcase, yet.\u0026lt;/div\u0026gt;\r@endif\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; Extracting a Project Card Component Create a projects folder under components and a project-card.blade.php inside that.\nNext, cut out the div that we had inside the projects loop in index.blade.php and paste it into the new project-card.blade.php component.\n\u0026lt;div class=\u0026#34;p-6 bg-white overflow-hidden shadow sm:rounded-lg\u0026#34;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;a href=\u0026#34;/projects/{{ $project[\u0026#39;id\u0026#39;] }}\u0026#34;\u0026gt;{{ $project[\u0026#39;title\u0026#39;] }}\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;{{ $project[\u0026#39;description\u0026#39;] }}\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; Passing Project Data to our Component Back in index.blade.php we could include our component from inside the loop with:\n\u0026lt;x.projects.project-card /\u0026gt; But our component will complain that $project is undefined.\nIf we wanted to pass a simple string to our component we could do so by adding an attribute i.e. \u0026lt;x.projects.project-card title=\u0026ldquo;Hello\u0026rdquo;/\u0026gt;, but to pass objects or arrays to a component we need to use props.\n\u0026lt;x-projects.project-card :project=\u0026#34;$project\u0026#34; /\u0026gt; Within our project-card component we can receive the prop by adding the following at the top of the file.\n@props([\u0026#39;project\u0026#39;]) Create a Simple Header Nav In resources/views/components/layout.blade.php\n\u0026lt;header class=\u0026#34;px-6 py-8\u0026#34;\u0026gt;\r\u0026lt;nav class=\u0026#34;md:flex md:justify-between md:items-center\u0026#34;\u0026gt;\r\u0026lt;div\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34; class=\u0026#34;text-s font-bold uppercase\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;mt-8 md:mt-0\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;/register\u0026#34; class=\u0026#34;ml-3 text-xs font-bold uppercase\u0026#34;\u0026gt;Register\u0026lt;/a\u0026gt;\r\u0026lt;a href=\u0026#34;/login\u0026#34; class=\u0026#34;ml-3 text-xs font-bold uppercase\u0026#34;\u0026gt;Log In\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/nav\u0026gt;\r\u0026lt;/header\u0026gt; "
},
{
	"uri": "http://localhost:1313/leetcode/medium/",
	"title": "Medium",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/database/monbodb/",
	"title": "MongoDB",
	"tags": [],
	"description": "",
	"content": "Mongo DB is No SQL Databases that stores data as documents in a JSON-like format.\nMongoDB SQL Database Database Tables Collections Columns Fields Rows Documents Install https://www.mongodb.com/nosql-explained/nosql-vs-sql\nLocal : MongoDB Community Server Cloud : MongoDB Atlas Commands in Local machine\nshow databases\ruse nameOfDatabase\rinsert : db.table.insertMany([ {}, {}, {} ])\rlist : db.table.find() MongoDB in Node Get connection string MongoDB \u0026gt; Database \u0026gt; Connect \u0026gt; Connect your application\nConfiguration npm install mongodb mongoose const { mongoose } = require(\u0026#34;mongoose\u0026#34;); const Profile = require(\u0026#34;./models/Profile.js\u0026#34;); const uri = \u0026#34;.../DBNAME?...\u0026#34;; // put DBname prefix ? inside connection string // set up default mongoose connection, use .env for your uri mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true }); // store a reference to the default connection const db = mongoose.connection; // Bind connection to error event (to get notification of connection errors) db.on(\u0026#34;error\u0026#34;, console.error.bind(console, \u0026#34;MongoDB connection error:\u0026#34;)); // Once we have our connection, let\u0026#39;s load and log our profiles db.once(\u0026#34;open\u0026#34;, async function () { const profiles = await await Profile.find({}); // if we don\u0026#39;t close the db connection, our app will keep running db.close(); }); Mongoose Mongoose is a Node.js-based Object Data Modeling(ODM) library for MongoDB. Mongoose allows us to define data models using schemas and provides and interface to interact with the MongoDB database using these models.\nIt simeplifies the interation with MongoDB by providing a schemabased solution, validation, middelware, and other utilities.\nODM : Object Document Mapping (*ORM: Object Relational Mapping in Sql Database) ODM is a technique to perform CRUD operations between an application and a database system Mongoose is mapping Node.js classes to MongoDB collection(table) Schema defines the fields Use schema as the basis of the Model Schema import mongoose from \u0026#34;mongoose\u0026#34;; const schema = new mongoose.Schema({ name: { type: String, required: true }, created: { type: Date, required: true, default: Date.now }, obj: { type: mongoose.Schema.Types.ObjectId, ref: \u0026#34;CollectionName\u0026#34; }, }); const Schema = mongoose.model(\u0026#34;CollectionName\u0026#34;, schema); export default Schema; // Collection name as singular form Mongoose Query const Model = mongoose.model('Model', schema)\nCreate Model.create({schema...})\nModel.object.add({})\nAdd the relationship\nRead Model.find()\nModel.findById()\nModel.findOne()\nModel.populate()\nUpdate Model.save()\nModel.findByIdAndUpdate()\nModel.findOneAndUpdate()\nDelete Model.findByIdAndDelete()\nModel.findOneAndDelete()\nconst doc = await ModelName.findOne(); doc.name = \u0026#34;\u0026#34;; doc.save(); "
},
{
	"uri": "http://localhost:1313/xtc/php/sql/",
	"title": "MySQL Migration",
	"tags": [],
	"description": "",
	"content": "Database Setup and Configuration Great news!\nWhen we created our project via Sail, Laravel set up and configured our database, running in its own container, ready for us to use.\nLaravel stores all sensitive and/or environment specific configuration, including key info for our database, using dotenv.\nOpen up the .env file in the root of your Laravel project and take a gander.\nThe default DB_USERNAME and DB_PASSWORD make me cringe, but let\u0026rsquo;s just work with it for now. I\u0026rsquo;ve included notes in a separate slide on how to go about changing these\u0026hellip; but for now just know that the username is sail and the password is password.\nFurther details of the database configuration, including which database to use by default, are defined in config/database.php\nThe default is mysql, which is what we want to work with.\nNote: The .env file is excluded from version control in the .gitignore that Laravel set up for us.\nConnecting MySQL Workbench to the Container If you don\u0026rsquo;t already have it up and running, make sure:\nYou have Docker Desktop running You have your project containers running too Open your Ubuntu terminal in VSCode Make sure you are in the root of your project Launch your project in detached mode sail up -d Open MySQL Workbench\nClick the + next to MySQL Connections Set an appropriate Connection Name Set the Username to sail (per the value found in .env) Click Test Connection to confirm.\nIt will prompt you for the password, which (grrrrr) is set to password .\nYou should get a connection success message with some additional details.\nClick OK to save the connection in the MySQL Workbench dashboard.\nFrom here, when you click on the connection it will connect to your MySQL server, running in the container, any time you have your container running.\nThe next slide should hopefully be a recap of key MySQL commands.\nMySQL Fundamentals Open the MySQL connection that we made in the last step.\nAvailable Databases We\u0026rsquo;re connected to the MySQL server instance that is running in our Docker container, but are not yet set to work with the database that Laravel set up for our application itself.\nIn the Query 1 panel, enter the following, then click the lightning bolt icon at the top of the panel to run it:\nSHOW databases; You should see a results grid displaying 4 rows.\nThree of these results are \u0026ldquo;system\u0026rdquo; databases:\ninformation_schema performance_schema testing The fourth database should match the name of your application, in snake_case. In my case, that\u0026rsquo;s solomon_showcase.\nTo specify which database we want to work with and list out all of the tables therein, type and run:\nUSE solomon_showcase;\rSHOW tables; Running our Initial Migration sail artisan migrate Back in MySQL Workbench, place your cursor on the line with SHOW tables; and then click the lightning bolt icon with a cursor superimposed.\nSELECT * FROM users; DESCRIBE users; Migrations In the last step we ran sail artisan migrate and it created the following tables in the database for us:\nmigrations users password_resets failed_jobs personal_access_tokens It did so by running the code located in the database/migrations/ directory.\nOpen the file in that migrations folder that ends with _create_users_table.php\nThere, you will see that it defines a new class which extends Migration, and within that class there are two key methods: up() and down().\nThe up() method is used to add tables, columns, or indexes in our database and the down() method is used to reverse what was done in up().\nDeconstructing the *_create_users_table migration:\nIt\u0026rsquo;s calling the create() method of the Schema class with two arguments: the name of the table to be created and a closure in which the columns are defined (via a Blueprint object).\nTake a moment to familiarize yourself with (and bookmark) the documentation on creating tables as well as the column types available through migrations with Laravel\u0026rsquo;s Schema Builder:\nhttps://laravel.com/docs/9.x/migrations#creating-tables\nhttps://laravel.com/docs/9.x/migrations#available-column-types\nCreating a Migration for Projects Table In the Ubuntu WSL terminal, run the following:\nsail artisan make:migration create_projects_table Based on the migration name provided, Laravel determined that we wanted to create a table with the name projects.\nOpen up the newly created migration and you\u0026rsquo;ll see:\nLet\u0026rsquo;s run that migration to see what it produces.\nsail artisan migrate $table-\u0026gt;id(); created the id column as an auto-incrementing, unsigned big integer, not nullable, column with a primary key index on it.\n$table-\u0026gt;timestamps(); created two, nullable, timestamp columns for us.\nAwesome, but we need more columns to manage our projects data.\nRe-defining our Projects Table Looking back at the dummy data that we set up in our ProjectController, in addition to the columns above our projects table will need at least the following columns added:\ntitle Let\u0026rsquo;s assume we want these to be a max of 50 characters and required. description This column should support long text is_published This should be a boolean that is not nullable and defaults to false We could set up a migration to alter the existing table, but since we don\u0026rsquo;t have any data in there yet, let\u0026rsquo;s roll back our previous migration, update our column definitions, then run things forward again.\nTo reverse the effects of our last sail artisan migrate command we can run:\nsail artisan migrate:rollback That ran the down() method in each of the migrations that were included in the last batch that were executed (just one migration in this case), and our todos table is no more.\nTo see which migrations were included in the last batch, you can query the migrations table:\nSELECT * FROM migrations; If you don\u0026rsquo;t want to roll back all of the migrations from the last batch, you can also explicitly specify how many steps to roll back:\nsail artisan migrate:rollback --step=1 Practice - Edit the Projects Table Now, I\u0026rsquo;d like you to try to figure out how to redefine the projects table so that we have the following columns:\nid title excerpt body url published_date created_at updated_at Details:\nThe url and published_date fields should be nullable. The excerpt and body fields should allow long text. Get cozy with the docs: https://laravel.com/docs/9.x/migrations#available-column-types https://laravel.com/docs/9.x/migrations#column-modifiers\nRoll back and migrate as needed.\nsail artisan migrate:rollback sail artisan migrate When you\u0026rsquo;re ready to confirm, the solution is in white text below:\npublic function up() { Schema::create(\u0026#39;projects\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;excerpt\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;string(\u0026#39;url\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;date(\u0026#39;published_date\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;timestamps(); }); } Next, we\u0026rsquo;ll set up our Model.\nEloquent Models and Tinker Eloquent is Laravel\u0026rsquo;s official ORM.\nEloquent uses the Active Record Pattern which essentially means that a database table or view is wrapped in a class and each row (record) is handled in code as an object instance and manipulated via getter and setter methods.\nModels are stored in the app/Models/ directory.\nOut of the box our Laravel app has a User model, so let\u0026rsquo;s explore that a bit before setting up our Project model.\nTinkering with Models Artisan provides a utility for working with models from the command line: tinker.\nSince we already have a User model, let\u0026rsquo;s tinker with it to create, update, and delete a user record in our database.\nTinker is a REPL for working with Laravel models.\nIn your Ubuntu shell, run:\nsail artisan tinker Checking either the table definition or looking at the User model, you\u0026rsquo;ll see we need to provide a name, email, and password in order to save a user to the database, so our process will be:\nCreate a new instance of User Set the name, email, and password Save The password is a little bit more involved because we NEVER want to store passwords in clear text. Fortunately, Laravel comes with a package that will handle the encryption for us: bcrypt.\n$user-\u0026gt;save();\r= true Factories Factories are essentially a definition of how to instantiate Models, often with fake data via the Faker PHP library.\nIf you open up the database folder (in the root of your application) you will see a factories folder with a UserFactory.php file inside.\nLet\u0026rsquo;s create 3 fake users:\nUser::factory()-\u0026gt;count(3)-\u0026gt;create();\nMore Tinkering: Select a User by id\n$user = User::find(2);\nSelect a User by name\n$user = User::where(\u0026rsquo;name\u0026rsquo;,\u0026lsquo;Josh\u0026rsquo;)-\u0026gt;first();\nSelect all Users\n$users = User::all();\nSelect all Users with J in their name\n$users = User::where(\u0026rsquo;name\u0026rsquo;, \u0026lsquo;LIKE\u0026rsquo;, \u0026lsquo;%J%\u0026rsquo;)-\u0026gt;get();\nCollections When the results may contain more than one record from the database, rather than returning a plain PHP array, we get an instance of the Collection class.\nThe Collection class provides a fluent interface which allows us to chain on additional methods, of which there are many available, to refine and manipulate our results.\nSelect all Users, sorted by name, and return just their names\n$users = User::all()-\u0026gt;sortBy('name')-\u0026gt;pluck('name');\nhttps://laravel.com/docs/9.x/collections#available-methods\nEnough tinkering, let\u0026rsquo;s build our Project model!\nCtrl-c to exit Tinker.\nCreating a Project Model We\u0026rsquo;re going to use Artisan again to make our Project model.\nsail artisan make:model Project Note: Model names should begin with an Uppercase letter and be singular.\nsail artisan tinker This time we need to be a bit more explicit in instructing tinker where to find our the model we want to work with:\n$project = new App\\Models\\Project; $project-\u0026gt;title = \u0026#39;Laravel Project Showcase\u0026#39;; $project-\u0026gt;excerpt = \u0026#39;PHP Laravel back-end for portfolio website\u0026#39;; $project-\u0026gt;body = \u0026#39;Homebrew inheritance distributed systems fullstack lazy load protected behavior-driven CSV DAG module. Scalable OOP cache commit elixir minimum viable product configuration test-driven command-line Safari. Gradle ship it senior-engineer branch JSX presenter one-size-fits-all approach compression yarn module. Mutation observer scale Slack i website blog DAG. Emoji circle back Linux dynamic types document object model minification streams.\u0026#39;; $project-\u0026gt;url = \u0026#39;http://localhost\u0026#39;; $project-\u0026gt;published_date = date(\u0026#39;Y-m-d\u0026#39;); Note: If you make a mistake and want to remove a property from your object, you can do so with unset(). For example, if you typo\u0026rsquo;d excerpt as excert:\nunset($project-\u0026gt;excert); When you\u0026rsquo;re ready, persist your object to the database.\n$project-\u0026gt;save(); Creating a Project Factory Rather than manually adding in our Project records, let\u0026rsquo;s use Artisan to whip up a ProjectFactory.\nsail artisan make:factory ProjectFactory\nLook in database/factories/ProjectFactory.php and compare with UserFactory.php\nAll we need to do is return an associative array of the data that we want generated.\nSince only the title, excerpt and body columns are not nullable in our table, that\u0026rsquo;s all we need to return from the definition.\nWe can use the FakerPHP library to generate the values for us:\npublic function definition() { $bodyArray = fake()-\u0026gt;paragraphs(3); $body = \u0026#39;\u0026lt;p\u0026gt;\u0026#39; . join(\u0026#39;\u0026lt;/p\u0026gt;\u0026lt;/p\u0026gt;\u0026#39;, $bodyArray ) . \u0026#39;\u0026lt;/p\u0026gt;\u0026#39;; return [ \u0026#39;title\u0026#39; =\u0026gt; fake()-\u0026gt;company() . \u0026#39; \u0026#39; . fake()-\u0026gt;companySuffix(), \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;catchPhrase(), \u0026#39;body\u0026#39; =\u0026gt; $body ]; } Info on available formatters for FakerPHP are here:\nhttps://fakerphp.github.io/formatters/\nUsing the ProjectFactory Jump back into tinker and generate some fake projects\nsail artisan tinker\ruse App\\Models\\Project;\r$projects = Project::factory()-\u0026gt;count(4)-\u0026gt;create(); Verify in the DB.\nUpdating Project Controller and Card Component Refactor ProjectController to use the Project Model Open up your ProjectController\napp/Http/Controllers/ProjectController.php\nSet it to use the Project model.\nuse App\\Models\\Project; Modify the index() function to now use the Project data from our DB via the Project Model instead of the hard-coded array.\npublic function index() { return view(\u0026#39;projects.index\u0026#39;) -\u0026gt;with(\u0026#39;projects\u0026#39;, Project::all()); } Modify the show() method too.\nBy specifying the argument being sent to show() as an instance of Project, we can leverage another Laravel feature called Route Model Binding. This will work automatically as long as we receive a valid id in the route parameter and are consistent with the naming.\npublic function show(Project $project) { return view(\u0026#39;projects.project\u0026#39;,[\u0026#39;project\u0026#39; =\u0026gt; $project]); } Refactoring the Project Card Component Modify the project-card component to use the properties of the Project instances (instead of the array values that it was receiving previously).\nresources/views/components/projects/project-card.blade.php\n\u0026lt;div class=\u0026#34;p-6 bg-white overflow-hidden shadow sm:rounded-lg\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;/projects/{{ $project-\u0026gt;id }}\u0026#34;\u0026gt;{{ $project-\u0026gt;title }}\u0026lt;/a\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;{{ $project-\u0026gt;excerpt }}\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;{{ $project-\u0026gt;body }}\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt; View the projects index at http://localhost/projects\nNext, click on any of the project titles (which we wrapped in anchor tags with the id interpolated above). That should take you to an individual project page.\nConditionally Outputting the Body It makes sense that on the index page we want to only show the title and excerpt of each Project.\nThe easiest way to facilitate that will be to add a prop in our project-card Blade component, default its value to false, and then only output the body when it is true.\nproject-card.blade.php\n@props([\u0026#39;project\u0026#39;, \u0026#39;showBody\u0026#39; =\u0026gt; false]) \u0026lt;div class=\u0026#34;p-6 bg-white overflow-hidden shadow sm:rounded-lg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-xl font-bold\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/projects/{{ $project-\u0026gt;id }}\u0026#34;\u0026gt;{{ $project-\u0026gt;title }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;{{ $project-\u0026gt;excerpt }}\u0026lt;/div\u0026gt; @if ($showBody) \u0026lt;div\u0026gt;{{ $project-\u0026gt;body }}\u0026lt;/div\u0026gt; @endif \u0026lt;/div\u0026gt; Setting the prop to true in /views/projects/project.blade.php\n\u0026lt;x-projects.project-card :project=\u0026#34;$project\u0026#34; :showBody=\u0026#34;true\u0026#34;/\u0026gt; Displaying Unescaped HTML When we\u0026rsquo;re using the double curly braces to echo out content in our application Laravel is automatically sending those strings through PHP\u0026rsquo;s htmlspecialchars function to prevent against script injection and XSS attacks.\nThat is why we see the HTML \u0026lt;p\u0026gt; tags in our output instead of having paragraph breaks.\nNormally that is very, very good thing - particularly when working with any sort of CMS which allows user input data to be displayed.\nIn our case, however, since we\u0026rsquo;ll be setting things up in such a way that ONLY trusted users (aka you) can enter data, it is relatively safe to circumvent this protection and display unescaped HTML.\nThe Workaround Instead of using double curly braces, use single brace double exclamation marks.\nLet\u0026rsquo;s allow that for both excerpt and body.\n{!! $project-\u0026gt;excerpt!!}\r{!! $project-\u0026gt;body !!} Eloquent Relationships Ultimately, for our portfolios it would be great if we could \u0026ldquo;tag\u0026rdquo; Projects with the various underlying technologies. For example, as a starting point we might tag this Project with:\nOOP PHP Laravel MySQL Docker TailwindCSS Since Projects can have multiple Tags and any given Tag may be applied to multiple Projects, that will require implmenting a many-to-many relationship between Projects and Tags.\nOf course, many-to-many relationships are (a bit) harder to manage than one-to-many, so let\u0026rsquo;s start out by adding project categories.\nCategorizing Projects For now, we\u0026rsquo;re going to set things up so that each Project can be assigned to one Category, though multiple Projects can be assigned to the any given Category.\nTo accomplish this we will need:\nA categories table Migration Seeder Rather than generating a set of random records with a Factory, we\u0026rsquo;ll populate our categories table with a pre-defined set of data A Category Model A CategoryController Methods to query for the Category that a Project belongs to as well as the projects that belong to a Category Lucky for us, we can use Artisan got get a head start on almost all of the above!\nAdding a Category Model In your Ubuntu terminal, run the following:\nsail artisan help make:model This lists out the syntax as well as the various options available when using Artisan to make a Model.\nWe want a model, migration, seeder and controller, so our Artisan command will be:\nsail artisan make:model Category -c -m -s Note: This might take a few moments - don\u0026rsquo;t panic.\nCategories Migration Let\u0026rsquo;s start by editing the Migration.\nFor our categories table, let\u0026rsquo;s say we want the following:\nid slug string unique name string unique Give it a try on your own, then compare with solution, en blanc, below:\nSchema::create(\u0026#39;categories\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;slug\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;string(\u0026#39;name\u0026#39;)-\u0026gt;unique(); }); Run the migration and compare your table with the following:\nsail artisan migrate Of course, our table is not populated (yet).\nSeeding our Categories Table Take a look in the database/seeders directory.\nLaravel\u0026rsquo;s Seeder class defines a method, run(), which is our opportunity to insert records into our DB.\nIf you take a look in DatabaseSeeder.php you\u0026rsquo;ll see some example usage inside the run() method.\nOpen CategorySeeder.php , and at the top import our Category model so we can use it.\nuse App\\Models\\Category; Then, within the run() method add:\nCategory::create([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Back End\u0026#39;, \u0026#39;slug\u0026#39; =\u0026gt; \u0026#39;back-end\u0026#39;, ]); Category::create([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Front End\u0026#39;, \u0026#39;slug\u0026#39; =\u0026gt; \u0026#39;front-end\u0026#39;, ]); Category::create([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Full Stack\u0026#39;, \u0026#39;slug\u0026#39; =\u0026gt; \u0026#39;full-stack\u0026#39;, ]); Run the Seeder In your Ubuntu terminal, run:\nsail artisan db:seed --class=CategorySeeder We have an error because we the seeder expects there to be created_at and updated_at columns in our categories table.\nEasy fix: We just need to set $timestamps to false in our Category model.\nclass Category extends Model { use HasFactory; public $timestamps = false; } Run the seeder again.\nAdding a Category to Projects To add a foreign key relationship between our Projects and Categories we\u0026rsquo;ll need to add a foreignId column pointing at category_id in our projects table.\nOpen up the *_create_projects_table migration and edit the up() method as follows:\npublic function up() { Schema::create(\u0026#39;projects\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;excerpt\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;string(\u0026#39;url\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;date(\u0026#39;published_date\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;foreignId(\u0026#39;category_id\u0026#39;); $table-\u0026gt;timestamps(); }); } Next, let\u0026rsquo;s refresh the database from the ground up:\nsail artisan migrate:fresh Note: You DEFINITELY would NOT want to run the above on production. It drops all of the tables and then runs each of migrations rebuilding things from scratch. We\u0026rsquo;re still early in dev mode though, so it makes more sense to wipe and rebuild.\nTake a look at revised description of our projects table.\nThis is close to what we want, but perhaps we should make that category_id column nullable so that we can still showcase projects even if they don\u0026rsquo;t fall into one of categories.\nEdit the schema as follows and then run another migrate:fresh\n$table-\u0026gt;foreignId(\u0026#39;category_id\u0026#39;)-\u0026gt;nullable(true); Progress, but\u0026hellip; we\u0026rsquo;ve lost all of our projects and categories data!\nAdding a ProjectSeeder Building a Project Seeder Rather than relying on our Project Factory to generate some random data for us, let\u0026rsquo;s make a Project Seeder.\nArtisan has a command for this.\nsail artisan list\rsail artisan help make:seeder\rsail artisan make:seeder ProjectSeeder Now, open ProjectSeeder.php and add:\nuse App\\Models\\Project Let\u0026rsquo;s also define a protected function to wrap our fake paragraphs in tags.\nprotected function fakeHTMLParagraphs($count = 3) { $bodyArray = fake()-\u0026gt;paragraphs($count); $body = \u0026#39;\u0026lt;p\u0026gt;\u0026#39; . join(\u0026#39;\u0026lt;/p\u0026gt;\u0026lt;/p\u0026gt;\u0026#39;, $bodyArray ) . \u0026#39;\u0026lt;/p\u0026gt;\u0026#39;; return $body; } Then, within the run() method, create some projects:\npublic function run() { Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Portfolio Showcase\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(4), \u0026#39;category_id\u0026#39; =\u0026gt; 3 ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;SSD Yearbook\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(), \u0026#39;category_id\u0026#39; =\u0026gt; 1 ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Movie Mania\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(5) ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;News Site Homepage\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(), \u0026#39;category_id\u0026#39; =\u0026gt; 2 ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;JavaScript Game\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(), \u0026#39;category_id\u0026#39; =\u0026gt; 2 ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;iOS App\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs() ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Android App\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs() ]); Project::create([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;Industry Project\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; fake()-\u0026gt;sentences(2, true), \u0026#39;body\u0026#39; =\u0026gt; $this-\u0026gt;fakeHTMLParagraphs(6), \u0026#39;category_id\u0026#39; =\u0026gt; 3 ]); } Now, run the CategorySeeder and then the ProjectSeeder:\nsail artisan db:seed --class=CategorySeeder\rsail artisan db:seed --class=ProjectSeeder Verify, both in the DB and browser.\nRunning Seeders when we Migrate Open up the DatabaseSeeder class then replace it\u0026rsquo;s run() method with the following:\npublic function run() { // populate categories and projects table with seed data $this-\u0026gt;call([ CategorySeeder::class, ProjectSeeder::class ]); } From here forward, any time we want to completely rebuild and repopulate our database tables we can do so in one easy artisan command:\nsail artisan migrate:fresh --seed Note: We don\u0026rsquo;t need to import CategorySeeder or ProjectSeeder, but the order does matter.\nEloquently Outputting Categories Displaying the Category Name We\u0026rsquo;ve got a category_id column in our projects table, but we still have some work to do if we want to show what category a project belongs to.\nTo handle this, let\u0026rsquo;s add a getter method in our Project model.\nOpen app/Models/Project.php and insert the following inside the Project class definition:\npublic function category() { return $this-\u0026gt;belongsTo(Category::class); } And, finally, let\u0026rsquo;s add some conditional output in our project-card component:\n\u0026lt;footer\u0026gt;\r@if ($project-\u0026gt;category)\r\u0026lt;span\u0026gt;Category: {{ $project-\u0026gt;category-\u0026gt;name }}\u0026lt;/span\u0026gt;\r@endif\r\u0026lt;/footer\u0026gt; Listing Projects by Category We can output which Category a Project belongs to, but we don\u0026rsquo;t yet have a way to list Projects by Category.\nLet\u0026rsquo;s start by adding a method in our Category model for finding any Projects that have this Category:\npublic function projects() { return $this-\u0026gt;hasMany(Project::class); } Then, in ProjectController let\u0026rsquo;s add method that receives a Category and returns the index view having passed in the results from above as the projects variable.\nImport the Category Model:\nuse App\\Models\\Category; Add a listByCategory Method:\npublic function listByCategory(Category $category) { return view(\u0026#39;projects.index\u0026#39;) -\u0026gt;with(\u0026#39;projects\u0026#39;, $category-\u0026gt;projects); } Finally, let\u0026rsquo;s add a Route with a category parameter that calls the appropriate method in our ProjectController\nRoute::get(\u0026#39;/categories/{category}\u0026#39;, [ProjectController::class, \u0026#39;listByCategory\u0026#39;]); Navigate to http://localhost/categories/2\nCategory Slugs Using Slugs Currently we are using Route Model Binding via category-\u0026gt;id to load our categories, but it would be better UX to use slugs and have links directly to the category list page. This is relatively straightforward:\nUpdate the Route parameter to use slug for the model binding\nRoute::get(\u0026#39;/categories/{category:slug}\u0026#39;, [ProjectController::class, \u0026#39;listByCategory\u0026#39;]); Note: This sort of Route-Model binding works with any unique field in the model.\nWrap the category name output slug-based links\n\u0026lt;a href=\u0026#34;/categories/{{ $project-\u0026gt;category-\u0026gt;slug }}\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt; "
},
{
	"uri": "http://localhost:1313/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "Framework REACT JSX, Event, State Components, Props, UseEffect Images, CSS Tabs Routes Pagination Global Statement Redux Slick Deploy Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.\n"
},
{
	"uri": "http://localhost:1313/python/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": "A sequence of characters. String is immutable.\nUsage Single line string : \u0026ldquo;~~\u0026rdquo; Multiple lines : \u0026lsquo;\u0026rsquo;\u0026rsquo;~~~\u0026rsquo;\u0026rsquo;' Escape special characters print(\u0026#34;this is \\\u0026#34;example\\\u0026#34;\u0026#34;) # this is \u0026#34;example\u0026#34; String Concatenate con = \u0026#34;a\u0026#34; + \u0026#34;Python\u0026#34; con2 = f\u0026#34;Wow {con}\u0026#34; Repeat print(\u0026#34;ba\u0026#34; + \u0026#34;na\u0026#34;*2) # banana String Formatting a = 12.1 b = 22.32 c = 3.021 output = \u0026#34;a: %s b: %d c: %f c: %.2f\u0026#34; %(a, b, c, c) # a: 12.1 b: 22 c: 3.021000 c: 3.02 Sign Meaning %s String (%5s : min 5chracters) %d Integers (%3d : min 3 digits, %03d : zeros to fill the spaces) %f Floating point numbers %.nf Floating point numbers with a fixed amount of digits to the right of the dot. %x/%X Integers in hex representation (lowercase/uppercase) %e/%E Floating points in Exponential format (lowercase/uppercase ex: 1.7e3) %% percentage sign (%) message = \u0026#34;{} and {}\u0026#34;.format(\u0026#34;value1\u0026#34;, \u0026#34;value2\u0026#34;) # value1 and value2 {} : you can put order number (index) or name of value\nString Methods String Slicing message = \u0026#34;string\u0026#34; print(message[2:4]) # ri print(message[:-1]) # strin : all but the last Length len(message) # 6 split() str.split('char')\nmessage = \u0026#34;test:aa\u0026#34; print(message.split(\u0026#34;:\u0026#34;)) # [\u0026#39;test\u0026#39;, \u0026#39;aa\u0026#39;] join() str.join(array)\nmessage = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] print(\u0026#34;+\u0026#34;.join(message)) # a+b replace() str.replace(old, new, count)\nreplace returns new value, count times. it there\u0026rsquo;s nothing to replace, it returns original string.\n# Single usage test = \u0026#34;banana\u0026#34; replaced_text = text.replace(\u0026#39;ba\u0026#39;, \u0026#39;ro\u0026#39;) # ronana # Multiple usage replaced = text.replace(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;).replace(\u0026#39;n\u0026#39;, \u0026#39;m\u0026#39;) Starswith str.startswith(prefix, start, end)\nReturns True if a string starts with prefix or False.\nprefix : String or tuple of strings. If the string starts with any item of the tuple, it returns true start (optional) : check from the start (index) of str end (optional) : check until end (index) of str string = \u0026#39;flower\u0026#39; print(string.startswith(\u0026#39;fl\u0026#39;)) # True More String methods find(x) find(x, start) : find from start point find(x, start, end) : fint range from start to end rfind(x) count(x) String methods return boolean isalnum() : lowercase or uppoercase or number from 0-9 isdigit() islower() isupper() isspace() startswith(x) endswith(x) String methods returns string capitalie() lower() upper() strip() title() "
},
{
	"uri": "http://localhost:1313/frontend/css/trasnform/",
	"title": "Transform",
	"tags": [],
	"description": "",
	"content": "Transforms Transforms work with box-model(display: block)\nTranslate Alters position horizontally or vertically\n.box { transform: translate(x(가로) px, y(세로) px); } Rotate Rotate in a clockwise (positive value) or counter-clockwise(negative value)\n{ transform: rotate(n deg); } Scale Size of an element\n{ transform: scale(n); } or { transform: scaleX(n) scaleY(n); } Skew { transform: skewX(n deg) skewY(n deg); } Transform-origin It specify the point on the x, y axis (default: centre, 0 0 : top left)\n{ transform-origin: n n; } Multiple Transforms when hover, you have to specify previous transform value as well\n{ transform: rotate(n deg) skewX(n deg); } Transitions Simple Transitions animation between two (like hover). opacity, width, height, scale, colour.. except display\nTransition-property all or specific property (opacity, width … )\nTransition-duration how long it takes\nTransition-timing-function how the transition progress (cubic-bezier( )), ease, ease-in\nhttps://cubic-bezier.com/ https://easings.net/\nTransition-delay how long to wait before starting\n{ transition : [property] [duration] [timing-function] [delay:생략가능] } Multiple Transitions Separate by comma, Can control one transition after using delay like below (width happens after height)\n{ transition: height 1s ease, width 1s ease 1s; } ANIMATIONS Overview Keyframe: What changes occur Animation : detail about how the animation will run (similar to transition) Animation Properties animation-name keyframe name (without quotes)\nanimation-duration how long it should take\nanimation-timing-function ease, linear and etc.\nanimation-iteration-count how many time it will run\nanimation-delay delay\nanimation-direction alternate on subsequent runs / reset to the start point / repeat itself\nanimation-play-state paused or running, it will resume from where it was\n{ animation: [name] [duration] [timing-f] [count] [delay] [direction]; } Animation Keyframes Syntax :\n@keyframes name { } It is defining animation, not applying until you use it animation property You can control any of css properties\n"
},
{
	"uri": "http://localhost:1313/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": "Cloud Amazon Web Services BCIT SSD AWS 2023\nEC2 Intances S3 Bucket JSON Web Token Serverless SST http://ssd-aws.s3-website.ca-central-1.amazonaws.com/week_2_db/database/105_dd/\nProduction create your dev route in your personal account separate account : dev/stage/production "
},
{
	"uri": "http://localhost:1313/aws/cognito/",
	"title": "Cognito",
	"tags": [],
	"description": "",
	"content": "Cognito in AWS Authentication with Server-less. Auth zero is the most populate one that takes care of UI\nAWS \u003e Cognito \u003e User pools \u003e Create User Pool\rStep 1 Cognito user pool sign-in options : Username, email (Phone number gets complicated) User name requirement : Allow users to sign in with a preferred user name \u0026gt; Next Step 2 Password policy mode : Cognito defaults or Custom \u0026gt; select the options Multi-factor Authentication \u0026gt; No MFA User account Recovery : Enable self-service account recovery, Delivery method : Email only \u0026gt; Next Step 3 Self registration : enable Attribute verification : Allow Cognito to send a message, send email, verify email \u0026gt; Next Active attribute values when an update is pending (like identity stuff.. something saved in token) \u0026gt; Next Step4 Email Provider : Send email with Cognito From email address \u0026gt; Next Step5 Uncheck Use the cogito hosted UI App type : Public client Don\u0026rsquo;t generate a client secret \u0026gt; Review and Create Save the User pool ID Click the pool \u0026gt; App Integration \u0026gt; Copy the Client Id (at bottom) React APP Setup npm i amazon-cognito-identity-js download cognito.js file, add your userPoolId and ClientId in this file in Vite, update [ vite.config.js ]\nexport default defineConfig({\rplugins: [react()],\rdefine: {\rglobal: {}, }, }) Signup import {signUp} from \u0026#39;./cognito\u0026#39;\r... handleSubmit = async (e) =\u0026gt; { ...\rawait signup({username, email, password}) } import { useNavigate } from \u0026#34;react-router-dom\u0026#34;;\r...\rconst navigate = useNavigate();\r..\rconst handleSubmit = async (e) =\u0026gt; {\re.preventDefault();\rif (password !== passwordConfirm) {\rsetError(\u0026#34;Password doesn\u0026#39;t match\u0026#34;);\r} else {\rtry {\rawait signUp({ username, email, password });\rsetError(\u0026#34;Check your email\u0026#34;);\rnavigate(`/confirm?username=${username}`);\r} catch (e) {\rsetError(e.message);\rconsole.log(e.message);\r}\r}\r}; Confirm Email try {\rawait confirmUser({username, code})\r} catch (e) {\rsetError(e.message) } Login await signIn({username, code}) Logout signOut() // clear localStorage Get user profile getCurrentUser() Reset Password Forgot password\nawait forgotPassword({username}) Reset password\nawait resetPassword({username, code, newPassword}) Authorize Requests const token = await userToken()\rconst imagesResult = await axios.get(\u0026#34;whatever your url is\u0026#34;, {\rheaders: {\rAuthorization: token\r}\r}) api with authorization \u0026gt; lambda \u0026gt; authorizaiton \u0026gt; create authorizer\u0026hellip;. so only login user can acces this endpoint https://aws.amazon.com/blogs/security/how-to-secure-api-gateway-http-endpoints-with-jwt-authorizer/\nIn the API gateway, add a JWT Authorizer and under Authorizer settings enter the following details:\nName: JWTAuth\nIdentity source: $request.header.Authorization\nIssuer URL: https://cognito-idp.us-east-1.amazonaws.com/\u0026lt;your_userpool_id\u0026gt;\nAudience: \u0026lt;app_client_id_of_userpool\u0026gt;\nhow to add env in React\nCognito.js import { CognitoUserPool, CognitoUser, AuthenticationDetails, CognitoUserAttribute } from \u0026#34;amazon-cognito-identity-js\u0026#34;; function promisify(func) { return function () { return new Promise((resolve, reject) =\u0026gt; { func.apply(this, [ ...Array.from(arguments), (err, result) =\u0026gt; { if (err) { reject(err); return; } resolve(result); }, ]); }); }; } // Add VITE_USER_POOL_ID, and VITE_USER_POOL_CLIENT_ID to a .env.local file in your project root const poolData = { UserPoolId: process.env.REACT_APP_USER_POOL_ID, ClientId: process.env.REACT_APP_USER_POOL_CLIENT_ID, }; const userPool = new CognitoUserPool(poolData); async function getUserSession() { const user = getCurrentUser(); if (!user) { throw \u0026#34;User not logged in\u0026#34;; return; } const getSession = promisify(user.getSession).bind(user); const session = await getSession(); return session; } /** * Get the JWT needed to authenticate with the API * @returns {Promise\u0026lt;string\u0026gt;} */ export async function getAccessToken() { const session = await getUserSession(); const jwt = session?.accessToken?.jwtToken; return jwt; } /** * Get the currently logged in user * @returns {CognitoUser} */ export function getCurrentUser() { return userPool.getCurrentUser(); } /** This function signs up a user with their email, username and password. It creates an array of CognitoUserAttributes for the user\u0026#39;s email and calls the signUp function from the userPool object. @param {Object} userData - An object containing the user\u0026#39;s email, username and password. @param {string} userData.username - The username to sign up with. @param {string} userData.email - The email to sign up with. @param {string} userData.password - The password to sign up with. @returns {Promise} - A Promise that resolves to the signUp result object. */ export async function signUp({ username, email, password }) { const attributeList = [new CognitoUserAttribute({ Name: \u0026#34;email\u0026#34;, Value: email })]; const cognitoSignUp = promisify(userPool.signUp).bind(userPool); const result = await cognitoSignUp(username, password, attributeList, null); return result; } /** This function confirms a user\u0026#39;s registration using their username, email and code. It creates a CognitoUser object and calls the confirmRegistration function on it. @param {Object} userData - An object containing the user\u0026#39;s username, email and confirmation code. @param {string} userData.username - The username of the user to confirm. @param {string} userData.email - The email of the user to confirm. @param {string} userData.code - The confirmation code to use for confirmation. @returns {Promise} - A Promise that resolves to the confirmRegistration result object. */ export async function confirmUser({ username, email, code }) { const userData = { Username: username, Pool: userPool, }; const cognitoUser = new CognitoUser(userData); const confirm = promisify(cognitoUser.confirmRegistration).bind(cognitoUser); const result = await confirm(code, false); return result; } /** This function signs in a user using their username and password. It creates a CognitoUser object and calls the authenticateUser function on it. @param {Object} userData - An object containing the user\u0026#39;s username and password. @param {string} userData.username - The username of the user to sign in. @param {string} userData.password - The password of the user to sign in. @returns {Promise} - A Promise that resolves to the authenticateUser result object. */ export async function signIn({ username, password }) { return new Promise((resolve, reject) =\u0026gt; { const authData = { Username: username, Password: password, }; const authDetails = new AuthenticationDetails(authData); const userData = { Username: username, Pool: userPool, }; const cognitoUser = new CognitoUser(userData); cognitoUser.authenticateUser(authDetails, { onSuccess: (result) =\u0026gt; { resolve(result); }, onFailure: (error) =\u0026gt; reject(error), }); }); } /** This function signs out the currently signed in user. It retrieves the current user using the getCurrentUser function and calls the signOut function on it. It also removes the access_token and id_token from localStorage. @returns {void} */ export function signOut() { const user = getCurrentUser(); user?.signOut(); localStorage.removeItem(\u0026#34;access_token\u0026#34;); localStorage.removeItem(\u0026#34;id_token\u0026#34;); } /** This function sends a forgot password email to the user\u0026#39;s email address associated with their username. It creates a CognitoUser object and calls the forgotPassword function on it. @param {Object} userData - An object containing the user\u0026#39;s username. @param {string} userData.username - The username of the user to send the forgot password email to. @returns {Promise} - A Promise that resolves to the forgotPassword result object. */ export async function forgotPassword({ username }) { const cognitoUser = new CognitoUser({ Username: username, Pool: userPool, }); return new Promise((resolve, reject) =\u0026gt; { cognitoUser.forgotPassword({ onSuccess: (data) =\u0026gt; { resolve(data); }, onFailure: (err) =\u0026gt; { reject(err); }, }); }); } /** This function resets a user\u0026#39;s password using their username, code and new password. It creates a CognitoUser object and calls the confirmPassword function on it. @param {Object} userData - An object containing the user\u0026#39;s username, confirmation code and new password. @param {string} userData.username - The username of the user to reset the password for. @param {string} userData.code - The confirmation code to use for resetting the password. @param {string} userData.newPassword - The new password to set for the user. @returns {Promise} - A Promise that resolves to the confirmPassword result object. */ export async function resetPassword({ username, code, newPassword }) { const cognitoUser = new CognitoUser({ Username: username, Pool: userPool, }); return new Promise((resolve, reject) =\u0026gt; { cognitoUser.confirmPassword(code, newPassword, { onSuccess: (data) =\u0026gt; { resolve(data); }, onFailure: (err) =\u0026gt; { reject(err); }, }); }); } /** This function attempts to refresh the access token for the currently signed in user. It retrieves the user session using the getUserSession function and calls the refreshSession function on the current user object. If no session is found, it throws an error. @returns {Promise} - A Promise that resolves to the refreshed user session. */ export async function attemptTokenRefresh() { let session = await getUserSession(); if (!session) { throw \u0026#34;No session\u0026#34;; } const user = getCurrentUser(); var refreshToken = session.getRefreshToken(); const refreshSession = promisify(user.refreshSession).bind(user); session = await refreshSession(refreshToken); return session; } "
},
{
	"uri": "http://localhost:1313/asp.net/linq/",
	"title": "Linq",
	"tags": [],
	"description": "",
	"content": "LINQ (Language-Integrated Query). Syntax to query the database in Entity Framework (belong to the System.Linq namespace)\nQuery Based Syntax Select Explicit\nIQueryable\u0026lt;Invoice\u0026gt; query = from p in db.Invoices select p; Implicit (Using an anonymous type)\nvar query = from p in db.Products select new { p.name, p.vendor }; Filter from p in context.Products where p.price \u0026gt; 0.99m \u0026amp;\u0026amp; p.price \u0026lt; 2.00m select p; Filter with Contains, StartWith var query = from p in context.Products where p.name.StartsWith(\u0026#34;Ca\u0026#34;) || p.name.Contains(\u0026#34;Juice\u0026#34;) select p; Sort var query = from p in context.Products where p.price \u0026gt; 0.99m \u0026amp;\u0026amp; p.price \u0026lt; 2.00m orderby p.price descending select p; Handling Database (Query) Grouping var vendorCounts = from p in context.Products group p by p.vendor into aggregateTable // Store the key. (Temp table) select new { // The key is the grouping column. Vendor = aggregateTable.Key, ProductCount = aggregateTable.Count() }; Filtered Group By from p in context.Products group p by p.mfg into aggregateTable where aggregateTable.Count() \u0026gt; 1 select new { Manufacturer = aggregateTable.Key, ProductCount = aggregateTable.Count() }; Bridge Table Query : bridge Table does not have model if they have only foreign keys in the table. from p in db.Products from i in p.Invoices // Products Navigation property select new { ProductID = p.productID, InvoiceNum = i.invoiceNum, Branch = i.branch, ProductName = p.name }; Inserting Objects context.Products.Add(product); context.SaveChanges(); // Commit the data. Inserting Bridge Table Objects Product product = (from p in context.Products where p.productID == 4 select p).FirstOrDefault(); Invoice invoice = (from i in context.Invoices where i.invoiceNum == 1004 select i).FirstOrDefault(); invoice.Products.Add(product); context.SaveChanges(); // Commit the data. Updating objects product.price = 4.88m; context.SaveChanges(); Deleting context.Products.Remove(product); context.SaveChanges(); Deleting Bridge Table invoice.Products.Remove(product); context.SaveChanges(); Combining Queries Due to Lazy loading, you can use two separate queries.\nvar gfsItems = from p in db.Products where p.Vendor == \u0026#34;GFS\u0026#34; select p; // Second query using first query. var inexpesiveGFSItems = from p in gfsItems where p.Price \u0026lt; 2.50M select p; return View(inexpesiveGFSItems); Lambda (Method Based) Syntax Select context.Products.Select(p =\u0026gt; p); context.Products.Select(p =\u0026gt; new { Name = p.Name, Vendor = p.Vendor }); Select, Filter db.Products.Where(p =\u0026gt; p.ProductId == id); First of Default db.Products.Where(p =\u0026gt; p.ProductId == id).FirstOrDefault(); Contains string[] array = {\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;}; var aa = db.Table.Where(x=\u0026gt;array.Contains(x.Name)) Join : Query multiple tables TableA.Join(TableB, a=\u0026gt;a.Name, b=\u0026gt;b.Name, (a,b)=\u0026gt; {new { a.Name, b.Number, b.Capacity }}) Sort context.Products.OrderBy(p =\u0026gt; p.Vendor).ThenByDescending(p =\u0026gt; p.Name); OrderBy\nOrderByDescending\nThenBy\nThenByDescending\nExtension Methods StartsWith()\nIndexOf()\nIsMatch()\nContains()\nToUpper()\nToLower()\nDistinct .Select(p=\u0026gt;p).Distinct();\nCombination tableA.Union(tableB) : merge the results of two queries where the column names, type, and sequence are the same.\nvar table = from p in db.Products select p.column; table.Average()\ntable.Count()\ntable.Min()\ntable.Max()\ntable.Sum()\n"
},
{
	"uri": "http://localhost:1313/c/method/",
	"title": "Method",
	"tags": [],
	"description": "",
	"content": "Methods public static void Name(string[] args){ } Method Overloading Same method name, different function/parameter\nParameter By Value : Copy of the variable. Doesn\u0026rsquo;t affect the variable By Reference : address of the variable value. Affect the varaible "
},
{
	"uri": "http://localhost:1313/frontend/tailwind/",
	"title": "Tailwind",
	"tags": [],
	"description": "",
	"content": "Setup in React Install Tailwind CSS npm install -D tailwindcss\rnpx tailwindcss init Configure your template paths tailwind.config.js\ncontent: [\u0026#34;./src/**/*.{html,js,jsx,tsx}\u0026#34;], Add the Tailwind directives to the index.css @tailwind base;\r@tailwind components;\r@tailwind utilities; JSX (vite) npm install -D tailwindcss postcss autoprefixer\rnpx tailwindcss init -p content: [\r\u0026#34;./index.html\u0026#34;,\r\u0026#34;./src/**/*.{js,ts,jsx,tsx}\u0026#34;,\r], @tailwind base;\r@tailwind components;\r@tailwind utilities; "
},
{
	"uri": "http://localhost:1313/xtc/work/aspnet/",
	"title": "ASP .NET",
	"tags": [],
	"description": "",
	"content": " Interface :\nIActionResult : An interface that represents the result of an action method in an MVC. Actually return type for action methods\naction method is a public method within a controller class that is responsible for handling a specific HTTP request and producing a response.\nIQueryable ?\nIQueryable is an interface in the .NET framework that represents a queryable data source. It is primarily used in LINQ (Language-Integrated Query) to perform query operations on data.\nIQueryable extends the IEnumerable interface and provides additional functionality for querying and manipulating data before executing the query.\nThe key advantage of using IQueryable is that it provides deferred execution. This means that the query is not executed immediately when it is defined. Instead, the query is translated into an appropriate query language (such as SQL for a database) and executed when the data is needed, such as when iterating over the query results or explicitly calling a terminal operation like ToList() or FirstOrDefault().\nvar is used for type inference when declaring variables, allowing the compiler to determine the type based on the assigned value. IQueryable, on the other hand, is an interface used for building and executing queries against queryable data sources, primarily in conjunction with LINQ.\nIEnumerable? @Model ? Work You need to import right model to use asp-for and htmlhiddenfor.\nasp-for should be inside the form\nsearch this in the project and figure out what it\u0026rsquo;s doing\n@HtmlhiddenFor Project Sturcture Data Folder : Entities (Table Classes) Services Folder : DB Logics (Like repositories?) Code First DB Add Column Go to class (inside data \u0026gt; fine the right table) and add\npublic Type Name { get; set;} Type? : Nullable Type : Not Nullable\nCreate Enum Type Enum files inside data folder\npublic enum ExternalOrderType { Food = 1, Retail = 2 } Debugging Step Into: Shortcut: F11 (in Visual Studio) Action: When you encounter a method call, \u0026ldquo;Step Into\u0026rdquo; will take you inside the method being called, allowing you to debug through the code inside that method. It enables you to delve into the details of the called method and understand how it works. Step Over: Shortcut: F10 (in Visual Studio) Action: \u0026ldquo;Step Over\u0026rdquo; allows you to execute the current line of code without entering any methods that may be called from that line. It lets you bypass the method calls and simply move to the next line of code in the current method. Step Out: Shortcut: Shift + F11 (in Visual Studio) Action: When you are inside a method being debugged, \u0026ldquo;Step Out\u0026rdquo; allows you to quickly execute the remaining lines of the current method without stepping through each line individually. It helps you to quickly return to the calling method. Add-migration / update database Add-migration / update-database : only with creating or updating table not seeding data\nex) when you change the default value, you don\u0026rsquo;t need to do a migration (do not migrate often)\nMake sure everything is correct before migrating and updating database!\nSetting default value in DB first approach public ExternalOrderType ExternalOrderType { get; set; } = ExternalOrderType.Food; Input Type = time https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#time_value_format\nCOMPONENT Build as component as possible\u0026hellip; when you call multiple component is faster than calling multiple controllers (if there are multiple controllers in one page, controllers will be called one by one..(lazy loading). When you use component, you can use async/await and call multiple components at the same time. (reduing the loading time)\nNOTE all database records are assumed stored in UTC format.\nStringBuilder string : static value StringBuilder : variable value (when value changes often) StringBuilder sb = new StringBuilder(\u0026#34;ABC\u0026#34;, 50); // Append three characters (D, E, and F) to the end of the StringBuilder. sb.Append(new char[] { \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39; }); // Append a format string to the end of the StringBuilder. sb.AppendFormat(\u0026#34;GHI{0}{1}\u0026#34;, \u0026#39;J\u0026#39;, \u0026#39;k\u0026#39;); // Display the number of characters in the StringBuilder and its string. Console.WriteLine(\u0026#34;{0} chars: {1}\u0026#34;, sb.Length, sb.ToString()); // Insert a string at the beginning of the StringBuilder. sb.Insert(0, \u0026#34;Alphabet: \u0026#34;); // Replace all lowercase k\u0026#39;s with uppercase K\u0026#39;s. sb.Replace(\u0026#39;k\u0026#39;, \u0026#39;K\u0026#39;); // Display the number of characters in the StringBuilder and its string. Console.WriteLine(\u0026#34;{0} chars: {1}\u0026#34;, sb.Length, sb.ToString()); Status EntityStatus inside BaseEntity\nDB Comments The purpose of [Column(“CartTypeID”)] is so that the column will be named CartTypeID (it gets saved as an INT) in the database instead of CartType.\n= OrderType.Restaurant; just sets the default property as Restaurant type. This is the easiest “catch-all” way to handle enums. The underlying type of an enum is INT, and INT defaults with value of 0, which is not a valid enum value (you’ve defined 1 and 2 only)\nUpdate DB Custom Class: ServiceResult Use this class when you update DB or create DB or delete DB, it returns the result of the DB.\nSave multiple columns in the DB this.Context.Table.AddRange(List) update db query example public ServiceResult\u0026lt;List\u0026lt;CartItem\u0026gt;\u0026gt; UpdateCartItems(List\u0026lt;CartItem\u0026gt; cartItems) { var res = new ServiceResult\u0026lt;List\u0026lt;CartItem\u0026gt;\u0026gt;(); this.Context.CartItems.AddRange(cartItems); try { this.Context.SaveChanges(); } catch (DbUpdateException e) { Console.WriteLine(\u0026#34;Exception Message:\u0026#34; + e.Message); res.AddError(\u0026#34;Error\u0026#34;, e.InnerException.ToString()); res.Success = false; return res; } res.Object = cartItems; res.Success = true; return res; } [AllowAnonymous] // Can access outside of the main browser(web?) [HttpGet] // Add this annotation, like Put, Delete, Post DB sysError : usually system error 80% related DB\nround number Math.Round(originalNumber, 2); DB private IQueryable\u0026lt;CartItem\u0026gt; GetAllCartItems(params Func\u0026lt;IQueryable\u0026lt;CartItem\u0026gt;, IIncludableQueryable\u0026lt;CartItem, object\u0026gt;\u0026gt;[] includes) { var res = this.Context.CartItems.Includes(includes); if (ClientModel.ClientID.HasValue) { res = res.Where(x =\u0026gt; x.ClientID == ClientModel.ClientID.Value); } return res; } Params : Query ex) GetByMultipleIds(cartItems.Select(x =\u0026gt; x.ID, cartItems.Where(x=\u0026gt;x=1)).ToArray()).ToList();\nNever! use tag. use span and its background in css what is includes T_T\nWhen create db fucntions create getAll : this filters records that is already deleted or should be filtered what you have to filter ? : if clientId exists DB call : make it less (as least as you can) How to create service add it to startupd create iservice interface create class import the iservice in controller Controller Structure [HttpPut] [Route(\u0026#34;fullfilled-status\u0026#34;)] public dynamic ([FromBody] SalesOrderFullfilledApiModel model) // if you have one property, don\u0026#39;t need to use FromBody. usually Frombody used with Post request (get request is used with params in url) { string errorMessage; if (!ModelState.IsValid) { errorMessage = \u0026#34;Model is invalid\u0026#34;; goto Error; } var res = SalesOrderService.UpdateFullfilledStatus(model.SalesOrderId); if (!res.Success) { errorMessage = res.Errors.ToString(); goto Error; } return CustomJson(res.Object.Status, null, null, AlertType.Success); Error: return CustomJson(null, null, new List\u0026lt;string\u0026gt; { errorMessage }, AlertType.Error); } only return necessary data. if you return entire object which includes uncessary data, it is exposing too much data to the browser DB (Service) Structure public ServiceResult\u0026lt;SalesOrder\u0026gt; UpdateFullfilledStatus(int id) { var res = new ServiceResult\u0026lt;SalesOrder\u0026gt;(); var dbSalesOrder = Get(id); if (dbSalesOrder == null) { goto Error; } dbSalesOrder.Status = SalesOrderStatusType.FoodFullfilled; try { Context.SaveChanges(); } catch (DbUpdateException e) { res.AddError(\u0026#34;Error\u0026#34;, e.InnerException.ToString()); goto Error; } res.Success = true; res.Object = dbSalesOrder; return res; Error: res.Success = false; return res; } Javascript Debouncer? Prevent multi submit (even though user clicks the button multiple times, only a few request will be submited.)\nAuto Mapper do not assign the value to entity. for example inside detailpage. Use Auto Mapper\nthis.Mapper. Form \u0026lt;form asp-action=\u0026#34;test\u0026#34;\u0026gt;\r\u0026lt;input asp-for=\u0026#34;name\u0026#34;/\u0026gt;\r\u0026lt;/form\u0026gt; asp-for=\u0026ldquo;name\u0026rdquo; goes to the form\nError An unhandled exception occurred while processing the request. InvalidOperationException: A circular dependency was detected for the service of type \u0026lsquo;Services.ISalesOrderService\u0026rsquo;. Services.IReportService(Services.ReportService) -\u0026gt; Services.ISalesOrderService(Services.SalesOrderService) -\u0026gt; Services.ICartService(Services.CartService) -\u0026gt; Services.ISalesOrderService\nSo when compiling your first project, the compiler will run into CustomClass1 definition, it knows it lays into Project2.dll and therefore will compile Project2 before, in order to be able to add that reference in your first project.\nThat\u0026rsquo;s what a dependency is, it\u0026rsquo;s hierarchical, there must be a starting point.\nCode order (refactor) Db structure Service layer Controller View JS TDD : Test Driven Development Tdd file refers test file Test Service layer and Api at the same time! Unit Test xUnit (Test Libraray) is already included in the heymate project\nCreate tests for Data, Test, and Controller (at each folder)\nTest for Files in Servies Create a method inside test class One test method for one method in services/data class\nStructure\nArrange : Setup data for executing, use memory database whids is temporary Act : Calling the method Assert : Check the result Execute test : Test \u0026gt; Test Explorer \u0026gt; Find your test file \u0026gt; Right click \u0026gt; Run\n[Fact] public void CreateUpdate_ValidNewEntity_ShouldCreateNewCart() // Name should be unique { // Arrange var databaseName = \u0026#34;CartServiceTestCreateUpdateValidNewEntityShouldCreateNewCart\u0026#34;; var context = DbUtility.GetContext(databaseName); // memory database var client = new Client { Name = \u0026#34;Owner\u0026#34;, TimeZone = \u0026#34;Pacific Standard Time\u0026#34; }; context.Add(client); var store = new Store { Name = \u0026#34;Bubble Waffle\u0026#34; }; context.Add(store); var table = new RestaurantTable { MaximumQuantity = 1, Store = store, Client = client, Status = SynicTools.EntityStatus.Active }; context.Add(table); context.SaveChanges(); var voucherService = new VoucherService(DbUtility.GetContext(databaseName), new Mock\u0026lt;IStoreModel\u0026gt;().Object); var service = new RestaurantCartService(DbUtility.GetContext(databaseName), new Mock\u0026lt;ISalesOrderService\u0026gt;().Object, new Mock\u0026lt;IUserService\u0026gt;().Object, new Mock\u0026lt;IStoreModel\u0026gt;().Object, new Mock\u0026lt;IStoreService\u0026gt;().Object, new Mock\u0026lt;IProductComboService\u0026gt;().Object, new Mock\u0026lt;IOptionItemService\u0026gt;().Object, voucherService); // Act var result = service.CreateUpdate(new RestaurantCart { CustomerPhoneNumber = \u0026#34;123\u0026#34;, Status = SynicTools.EntityStatus.Active, StoreID = store.ID, // no foriegn key in the test, so you have to write down eveyrthing Guid = Guid.NewGuid(), RestaurantTableID = table.ID, InternalType = SalesOrderTypeInternal.TableOrder }); // Assert result.Should().NotBeNull(); result.Success.Should().BeTrue(); result.Object.CustomerPhoneNumber.Should().Be(\u0026#34;123\u0026#34;); result.Object.Status.Should().Be(SynicTools.EntityStatus.Active); result.Object.StoreID.Should().Be(store.ID); result.Object.RestaurantTableID.Should().Be(table.ID); result.Object.InternalType.Should().Be(SalesOrderTypeInternal.TableOrder); } ? // 2. product with option (reuse code.....) public ServiceResult\u0026lt;List\u0026lt;RestaurantProductOption\u0026gt;\u0026gt; CreateUpdateProductOption(RestaurantProduct entity) { if (entity.IsCreate) return this._CreateProductOptions(entity.ProductOptions); return this._UpdateProductOption(entity.ProductOptions); } private ServiceResult\u0026lt;List\u0026lt;RestaurantProductOption\u0026gt;\u0026gt; _CreateProductOptions(List\u0026lt;RestaurantProductOption\u0026gt; entity) { var res = new ServiceResult\u0026lt;List\u0026lt;RestaurantProductOption\u0026gt;\u0026gt;(); // 1) create product option this.Context.RestaurantProductOptions.AddRange(entity); // 2) create product option items foreach (var option in entity) { this.Context.RestaurantOptionItems.AddRange(option.OptionItems); } // 3) save db try { Context.SaveChanges(); res.Success = true; res.Object = entity; } catch (DbUpdateException e) { res.AddError(\u0026#34;Error\u0026#34;, e.InnerException.ToString()); res.Success = false; } return res; } private ServiceResult\u0026lt;List\u0026lt;RestaurantProductOption\u0026gt;\u0026gt; _UpdateProductOption(List\u0026lt;RestaurantProductOption\u0026gt; entity) { var res = new ServiceResult\u0026lt;List\u0026lt;RestaurantProductOption\u0026gt;\u0026gt;(); return res; } Create a subPage (side menu) to create subpage, you have to update MenuSubItemMappingHelper class file first (and create new enum too!)\n[2:10 PM] Create new value on SubPageType enum Update MenuSubItemMappingHelper class file (not MenuItemMapping) Add new row in SubPages table in db (mapping menu - submenu) Sign-out and Sign-in account again Sorting Table HTML \u0026lt;th class=\u0026#34;sort-column\u0026#34; onclick=\u0026#34;setSort(\u0026#39;Customer\u0026#39;, \u0026#39;@((Int16)Model.SortDirection)\u0026#39;, @((Int16)OrderByDirection.Asc), this)\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;d-flex fw-bold\u0026#34;\u0026gt; Customer \u0026lt;div class=\u0026#34;sort-icon-wrapper @(SortIconHelper.GetSortIconStatusClass(Model.SortColumn, \u0026#34;Customer\u0026#34;, Model.SortDirection))\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;hm-sort-icon sort-icon\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/th\u0026gt; The sort column will go to SortColumn and SortDirection due to setSort function in javascript\nController model.Items = ...Get()....OrderByProperty(model.SortColumn, model.SortDirection) Model set a default value\npublic class SalesTableFilterViewModel { ... public SalesTableFilterViewModel() { base.SortColumn = nameof(RestaurantSalesOrder.Placed); //base.SortDirection = Helpers.OrderByDirection.Decending; // find helpers!! } } Problem Solving Try to see the details when debuging ! What function, What arguments, Api calls,\u0026hellip;.. Observe what is happening in both server side and client side (browser) and then debug\nAuto mapper auto mapper =\u0026gt; define in web profile and then use\nCreateMap\u0026lt;EditGroupOptionProductViewModel, RestaurantGroupOptionProduct\u0026gt;();CreateMap\u0026lt;RestaurantGroupOptionProduct, EditGroupOptionProductViewModel\u0026gt;(); Service BaseCoreService is where basic CRUD services are\nAbstract vs Virtual In ASP.NET and C#, the terms \u0026ldquo;abstract\u0026rdquo; and \u0026ldquo;virtual\u0026rdquo; are related to object-oriented programming concepts, specifically in the context of classes and methods.\nAbstract (Keyword):\nIn C#, the abstract keyword is used to define abstract classes or abstract methods. An abstract class cannot be instantiated on its own; it serves as a blueprint for other classes. An abstract method is a method declared in an abstract class that has no implementation in the abstract class. The derived classes must provide an implementation for abstract methods. Example of an abstract class with an abstract method:\ncsharp Copy code public abstract class Shape { public abstract void Draw(); } Virtual (Keyword):\nThe virtual keyword is used to declare methods, properties, or indexers that can be overridden by derived classes. When a method is marked as virtual, it means that the method can be overridden in a derived class using the override keyword. Example of a virtual method:\ncsharp Copy code public class BaseClass { public virtual void SomeMethod() { Console.WriteLine(\u0026ldquo;BaseClass.SomeMethod\u0026rdquo;); } }\npublic class DerivedClass : BaseClass { public override void SomeMethod() { Console.WriteLine(\u0026ldquo;DerivedClass.SomeMethod\u0026rdquo;); } } In this example, the SomeMethod in BaseClass is marked as virtual, and the DerivedClass provides its implementation using the override keyword.\nIn the context of ASP.NET, these concepts are often used when creating and extending classes, especially in scenarios like creating custom controllers, models, or other components. Abstract classes and virtual methods provide a way to define a common structure and allow for customization in derived classes.\nIn summary, while both abstract and virtual methods provide ways to allow derived classes to provide their own implementations, the key difference is that abstract methods have no implementation in the base class, and derived classes must provide their own, while virtual methods have a default implementation in the base class that can be optionally overridden in derived classes. Abstract classes can have both abstract and virtual members.\n"
},
{
	"uri": "http://localhost:1313/xtc/php/auth/",
	"title": "Auth",
	"tags": [],
	"description": "",
	"content": "User Registration Form Let\u0026rsquo;s start by taking a look at the User Model and Table to get a sense of what our form will need to handle.\nFrom the database we can see that name, email, and password columns are not nullable.\nFrom the model we can see that these fields are also mass assignable aka fillable.\nForm Setup To build out our registration functionality we\u0026rsquo;re going to need:\nA Controller with a create method RegisterUserController create method A view to display the create form resources/views/register_user/create.blade.php A route to the view via the controller Set up the Controller In WSL terminal, run:\nsail artisan make:controller RegisterUserController Add the create action to the controller.\nclass RegisterUserController extends Controller { public function create() { return view(\u0026#39;register_user.create\u0026#39;); } } Set up the Form in a View Create resources/views/register_user/create.blade.php\n\u0026lt;x-layout\u0026gt;\r\u0026lt;x-slot name=\u0026#34;content\u0026#34;\u0026gt;\r\u0026lt;main class=\u0026#34;max-w-lg mx-auto\u0026#34;\u0026gt;\r\u0026lt;h1 class=\u0026#34;text-center font-bold text-xl mb-3\u0026#34;\u0026gt;Register User\u0026lt;/h1\u0026gt;\r\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/register\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;name\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Name\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; required class=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;email\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; required class=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;password\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; required\rclass=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;confirm-password\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Confirm\rPassword\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;confirm-password\u0026#34; id=\u0026#34;confirm-password\u0026#34; required\rclass=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;bg-green-700 text-white rounded py-2 px-4 hover:bg-green-600\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/main\u0026gt;\r\u0026lt;/x-slot\u0026gt;\r\u0026lt;/x-layout\u0026gt; Set up a Route to the Registration Form via the Controller. In routes/web.php\nRoute::get(\u0026#39;/register\u0026#39;, [RegisterUserController::class, \u0026#39;create\u0026#39;]); And import RegisterUserController:\nuse App\\Http\\Controllers\\RegisterUserController; http://localhost/register\nRegistration Form Post Handling Add a Method to the Controller with some Request Validation\npublic function store() { request()-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;email\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;min:8\u0026#39;], ]); } Add a Route\nRoute::post(\u0026#39;/register\u0026#39;, [RegisterUserController::class, \u0026#39;store\u0026#39;]); error..\nLaravel has built in Cross-Site-Request-Forgery protection.\nEven though Docker is set up to map port 80 on the host machine to port 80 in the container, we are technically working cross domain here.\nLet\u0026rsquo;s configure things so we can post back to Laravel from the browser.\nCSRF Handling Before Laravel will actually accept data posted from our form we need to add a directive to our form to protect against CSRF attacks.\nThankfully, Laravel makes this ridiculously easy.\nInside the form in create.blade.php add the following:\n@csrf When Laravel renders the form it will replace that directive with a hidden input containing a token.\nWhen the form is posted, Laravel will validate the token to ensure that it is valid before any processing takes place.\nWhen Request Validation Fails Any time our request validation fails Laravel automatically redirects back to the same page that the request came from.\nIt also populates an error variable containing the name of the validation rule that failed as well as a message variable which we can use to output the details of that error.\nLaravel provides an @error directive with we can use to check for errors against a specified rule.\nLet\u0026rsquo;s update our registration create form template to give useful information back to the user if their password is invalid (we specified a minimum length of 8 characters).\nJust beneath the password input, add:\n@error(\u0026#39;password\u0026#39;)\r\u0026lt;p class=\u0026#34;text-red-500 text-xs mt-1\u0026#34;\u0026gt;{{ $message }}\u0026lt;/p\u0026gt;\r@enderror Test it out with a password less than 8 characters long.\nWe get a useful message back, but all of the fields have been emptied out. That\u0026rsquo;s a UX foul, to be sure.\nHold off on adding in @error directives for the other inputs. We have much left to cover and @error handling will be part of today\u0026rsquo;s assignment.\nRetrieving and Displaying Old Values Once again, Laravel makes this quite easy to handle.\nThere is a helper method, old(), that we can use to retrieve old values by name.\nSince these will be empty unless we were redirected back to the form due to a validation error we can use them as the value attributes for our form inputs.\nThat looks like:\n\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; value=\u0026#34;{{ old(\u0026#39;name\u0026#39;) }}\u0026#34; ... Go ahead and add these in for both the name and email inputs.\nNote: It\u0026rsquo;s best practice NOT to repopulate password fields, so leave those without a value attribute to ensure they are empty each time the form is displayed.\nWhen Database Constraints Fail If we try submitting the registration form with an email address that already exists in the database we are in for an ugly surprise\u0026hellip; in the form of an unhandled MySQL integrity constraint violation.\nIn our Controller we\u0026rsquo;re validating that the email is required, but we also need to handle the uniqueness constraint BEFORE it hits the database and barfs at the user.\nLaravel FTW.\nAll we need to do is add another validation rule in the form\nunique:\u0026lt;table_name\u0026gt;,\u0026lt;column_name\u0026gt;\npublic function store() { $attributes = request()-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;email\u0026#39;, \u0026#39;unique:users,email\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;min:8\u0026#39;], ]); ... } Since our users table is currently empty, let\u0026rsquo;s tinker in a record and then test the validation rule.\nDo you remember how to tinker?\nDetails below, in white\u0026hellip;\nsail artisan tinker $user = new User; $user-\u0026gt;name = \u0026#34;Josh Solomon\u0026#34;; $user-\u0026gt;email = \u0026#34;jsolomon11@bcit.ca\u0026#34;; $user-\u0026gt;password = bcrypt(\u0026#34;CantGuessThis!DoDoDoDo\u0026#34;); $user-\u0026gt;save(); Password Confirmation Checking Before we create our new user we should validate that the user entered the same password in both password fields in the registration form.\nThankfully, Laravel offers a validation rule to accomplish just that.\nThe only requirement is that the field we want to match against has the same name as the original, but with _confirmation appended.\nPreviously (and intentionally), I set the name of the second password field to \u0026ldquo;confirm-password\u0026rdquo;.\nReplace that (and the id and label for=\u0026rsquo;\u0026rsquo; ) with \u0026ldquo;password_confirmation\u0026rdquo;.\nWhile we\u0026rsquo;re in here, let\u0026rsquo;s also change the input type of both fields to password.\nregister_user/create.blade.php\n\u0026lt;label for=\u0026#34;password_confirmation\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Confirm\rPassword\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password_confirmation\u0026#34; id=\u0026#34;password_confirmation\u0026#34; required\rclass=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt; RegisterUserController.php\n$attributes = request()-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;email\u0026#39;, \u0026#39;unique:users,email\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;min:8\u0026#39;,\u0026#39;confirmed\u0026#39;], ]); Creating the User Now that we\u0026rsquo;re past both the client side and request validation - all we need to do is create a new User, from our User model, passing in the posted form attributes.\nIn RegisterUserController.php\nImport the Model\nuse App\\Models\\User; Then, within the store() method:\nCapture the attributes in a variable Pass them to the create method of the User model Redirect to the home page (or where desired) public function store() { $attributes = request()-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;email\u0026#39;,\u0026#39;unique:users,email\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;min:8\u0026#39;,\u0026#39;confirmed\u0026#39;], ]); User::create($attributes); return redirect(\u0026#39;/\u0026#39;); } Success, but\u0026hellip; the password is in clear text (not to mention a bad password)!\nEloquent Mutators We need a way to encrypt the password before saving it to the database.\nIf you recall waaaaay back on Monday when we tinkered with Users, we can use the bcrypt library to accomplish this.\nWe could handle this after validation but before creating our User, but there\u0026rsquo;s a more eloquent way to handle this: Eloquent Mutators.\nIn Models/User.php let\u0026rsquo;s add a mutator such that any time we are going to set the Password attribute of our User it will be run through bcrypt first.\nprotected function setPasswordAttribute($password) { $this-\u0026gt;attributes[\u0026#39;password\u0026#39;] = bcrypt($password); } Though we could use a more verbose/explicit syntax, I\u0026rsquo;m using a shorthand by naming my mutator function using the pattern set\u0026lt;AttributeName\u0026gt;Attribute.\nThe same pattern works accessor functions: get\u0026lt;AttributeName\u0026gt;Attribute. Login When we were validating the registration form data via the request we were indirectly working with Laravel Facades via Inversion-of-Control helpers.\nFacades are classes that act as static proxies to underlying classes.\nFor example, when we ran request()-\u0026gt;validate(), we were working with:\nIlluminate\\Http\\Request;\nWithout going on too much of a tangent, I encourage you to get familiar with the Facades that Laravel ships with because, in many ways, they are part of what makes Laravel so easy to work with.\nhttps://laravel.com/api/9.x/Illuminate/Http/Request.html\nhttps://laravel.com/docs/9.x/facades#facade-class-reference\nAuth In order to log users in and out as well as control what resources they can access, we\u0026rsquo;re going to work with the Auth facade via the auth() helper.\nhttps://laravel.com/api/9.x/Illuminate/Auth.html\nTo automatically log in a new user after registration:\n$user = User::create($attributes); auth()-\u0026gt;login($user); Login Form To set up our login form we\u0026rsquo;re going to:\nCreate and use a SessionController Add get and post routes to /login Build a login form view Authenticate the request data against the database Make the SessionController sail artisan make:controller SessionController Create the login form view /resources/views/sessions/create.blade.php\nPillage create.blade.php from register_user, but now we just need email and password.\nRemember to change the form action to \u0026ldquo;/login\u0026rdquo; too.\nHandle Login Form get requests SessionController.php\npublic function create() { return view(\u0026#39;sessions.create\u0026#39;); } Handle the Login Request public function store() { // validate the form data $attributes = request()-\u0026gt;validate([ \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;exists:users,email\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], ]); // attempt login via the auth helper if( auth()-\u0026gt;attempt($attributes) ) { return redirect(\u0026#39;/\u0026#39;); } // handle auth attempt failure return back() // send the user back to the form -\u0026gt;withInput() // send the data back to the form too -\u0026gt;withErrors([\u0026#39;email\u0026#39; =\u0026gt; \u0026#39;Email or Password is invalid.\u0026#39;]); // send error and message } Add Routes Import the SessionController\nuse App\\Http\\Controllers\\SessionController; Get requests will show the form, post will store the user auth in session.\nRoute::get(\u0026#39;/login\u0026#39;, [SessionController::class, \u0026#39;create\u0026#39;]); Route::post(\u0026#39;/login\u0026#39;, [SessionController::class, \u0026#39;store\u0026#39;]); Flash Messages We\u0026rsquo;ve got our registration and login handling working now, but we aren\u0026rsquo;t yet giving the user any feedback unless there is an error.\nIn order to improve the UX, let\u0026rsquo;s add in a mechanism that will provide a temporary message to the user.\nLaravel supports this through the session() helper with a flash() method that will persist a key/value pair for a single page load.\nLet\u0026rsquo;s start by adding a flash message when a login attempt is successful.\nSessionController.php\n// attempt login via the auth helper if( auth()-\u0026gt;attempt($attributes) ) { // Set a flash message $message = \u0026#39;Welcome back, \u0026#39; . auth()-\u0026gt;user()-\u0026gt;name . \u0026#39;!\u0026#39;; session()-\u0026gt;flash(\u0026#39;success\u0026#39;,$message); // Redirect to home page return redirect(\u0026#39;/\u0026#39;); } Now, lets add an area to our layout template that will conditionally display our flash messages.\nlayout.blade.php\nJust below the nav element in our header, add:\n@if (session()-\u0026gt;has(\u0026#39;success\u0026#39;)) \u0026lt;div class=\u0026#34;md:flex md:justify-center md:items-center\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;text-xs font-bold uppercase border border-green-700 rounded px-4 py-2\u0026#34;\u0026gt; {{ session()-\u0026gt;get(\u0026#39;success\u0026#39;)}} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; @endif Conditional Output by @auth Rather than just showing a flash message when a user is logged in, let\u0026rsquo;s conditionally change the links in the header.\nI\u0026rsquo;ve moved the Projects and About links over to the left next to HOME.\nTo accomplish the conditional output we can use the @auth directive.\nIf the user is logged we\u0026rsquo;ll output their name and a Logout link, otherwise we\u0026rsquo;ll output a Login link.\nOutputting the name can be accomplished via the auth() and user() helpers.\nlayout.blade.php\n\u0026lt;div class=\u0026#34;mt-4 md:mt-0\u0026#34;\u0026gt;\r@auth\r\u0026lt;span class=\u0026#34;text-xs font-bold uppercase\u0026#34;\u0026gt; {{ auth()-\u0026gt;user()-\u0026gt;name }} \u0026lt;/span\u0026gt;\r\u0026lt;a href=\u0026#34;/logout\u0026#34; class=\u0026#34;ml-3 text-xs font-bold uppercase\u0026#34;\u0026gt;Logout\u0026lt;/a\u0026gt;\r@else\r\u0026lt;a href=\u0026#34;/login\u0026#34; class=\u0026#34;ml-3 text-xs font-bold uppercase\u0026#34;\u0026gt;Log In\u0026lt;/a\u0026gt;\r@endauth\r\u0026lt;/div\u0026gt; Logout To log the user out, all we need to do is:\nSet up a get route to /logout Add a destroy method to our SessionController Call auth()-\u0026gt;logout() Redirect routes/web.php\nRoute::get(\u0026#39;/logout\u0026#39;, [SessionController::class, \u0026#39;destroy\u0026#39;]); app/Http/Controllers/SessionController.php\npublic function destroy() { // Log them out auth()-\u0026gt;logout(); // Redirect to Home return redirect(\u0026#39;/\u0026#39;); } Guest and Auth Middleware Although we\u0026rsquo;re conditionally showing/hiding links depending on whether a user is authenticated or not, this is not implementing any control over who can access which routes. To actually protect routes we\u0026rsquo;ll need to use middleware.\nRecall from our lesson on Express.js, middleware are just sets of things that happen between a request being received and a response being sent.\nIn Laravel we get a set of middleware out-of-the-box.\nYou\u0026rsquo;ll find them defined in the files under app/Http/Middleware as well as in app/Kernel.php\nTowards the bottom of app/Kernel.php you will see a protected property called $routeMiddleware.\nLet\u0026rsquo;s use a couple of those to control access to specific routes.\nGuest Only Routes Login really only make sense to be used by unauthenticated users - aka guests.\nIn web.php, let\u0026rsquo;s enforce that via the \u0026lsquo;guest\u0026rsquo; middleware with:\nRoute::get(\u0026#39;/login\u0026#39;, [SessionController::class, \u0026#39;create\u0026#39;])-\u0026gt;middleware(\u0026#39;guest\u0026#39;); Route::post(\u0026#39;/login\u0026#39;, [SessionController::class, \u0026#39;store\u0026#39;])-\u0026gt;middleware(\u0026#39;guest\u0026#39;); Authenticated Users Only Route Let\u0026rsquo;s make the logout route only accessible to authenticated users.\nRoute::get(\u0026#39;/logout\u0026#39;, [SessionController::class, \u0026#39;destroy\u0026#39;])-\u0026gt;middleware(\u0026#39;auth\u0026#39;); If you test these out, either as a guest trying to log out, or as an already authenticated user trying to log in you will either get an error or a 404 page respectively.\nLet\u0026rsquo;s deal with former first.\nA Guest Trying to Access Auth Only Routes When a guest tries to access a route that is protected with middleware(\u0026lsquo;auth\u0026rsquo;), such as the logout page, you\u0026rsquo;ll see the following error:\nThis is because the auth middleware is attempting to redirect the user to a route named \u0026ldquo;login\u0026rdquo;. This is defined in app/Http/Middleware/Authenticate.php\nAlthough we do have a route defined for the path /login, we need to map that to the name login in order for this redirect to work.\nNote: An alternative would be edit the Authenticate middleware itself, but best not to meddle with pre-existing middleware unless you have a thorough sense of where else it may be in use or what else might be relying on it.\nNaming a Route Open up routes/web.php and edit as follows:\nRoute::get(\u0026#39;/login\u0026#39;, [SessionController::class, \u0026#39;create\u0026#39;])-\u0026gt;name(\u0026#39;login\u0026#39;)-\u0026gt;middleware(\u0026#39;guest\u0026#39;); Note: We need to name() our route before middleware(\u0026lsquo;guest\u0026rsquo;).\nMake sure that you are not logged in and then try to access http://localhost/logout\nAn Authenticated User Trying to Access a Guest Only Route When an authenticated user attempts to access a guest route we don\u0026rsquo;t get an error, but instead they are automatically redirected to the URL /home, which results in a 404 unless we have a get route defined at that URL.\nWe could handle this by adding a /home route, but instead let\u0026rsquo;s add a generic fallback route that redirects any invalid requests to / and adds a flash message.\nFallback Routes Beneath all other routes in web.php, add:\nRoute::fallback(function() { // Set a flash message session()-\u0026gt;flash(\u0026#39;error\u0026#39;,\u0026#39;Requested page not found. Home you go.\u0026#39;); // Redirect to / return redirect(\u0026#39;/\u0026#39;); }); Displaying Session Error Messages We already outputting session success messages between the header and content in our layout, so that\u0026rsquo;s the obvious place to add in an @elseif\n@if (session()-\u0026gt;has(\u0026#39;success\u0026#39;))\r\u0026lt;div class=\u0026#34;flex justify-center items-center bg-gray-100 w-full py-3\u0026#34;\u0026gt;\r\u0026lt;p class=\u0026#34;text-xs font-bold bg-white uppercase border border-green-700 rounded px-4 py-2\u0026#34;\u0026gt;\r{{ session()-\u0026gt;get(\u0026#39;success\u0026#39;) }}\r\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r@elseif (session()-\u0026gt;has(\u0026#39;error\u0026#39;))\r\u0026lt;div class=\u0026#34;flex justify-center items-center bg-gray-100 w-full py-3\u0026#34;\u0026gt;\r\u0026lt;p class=\u0026#34;text-xs color-red-500 font-bold bg-white uppercase border border-red-700 rounded px-4 py-2\u0026#34;\u0026gt;\r{{ session()-\u0026gt;get(\u0026#39;error\u0026#39;) }}\r\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r@endif Admin Only via Custom Middleware There are numerous ways that we could handle role-based authorization, but given the nature of what we\u0026rsquo;re building let\u0026rsquo;s start with the very simplest: Custom middleware that only allows specific users to proceed, based solely on their email address.\nMaking Middleware In your Ubuntu terminal, run:\nsail artisan make:middleware AdminOnly Restricting Access to Admins by Email Address Open app/Http/Middleware/AdminOnly.php\nAt the top, import the Response class with:\nuse Illuminate\\Http\\Response; Next, replace the body of the handle method with:\nif(auth()-\u0026gt;user()?-\u0026gt;email !== \u0026#39;jsolomon11@bcit.ca\u0026#39;) { abort(Response::HTTP_FORBIDDEN); } return $next($request); Registering our Middleware Open app/Kernel.php (one level up from the Middleware directory).\nTowards the bottom you will find where $routeMiddleware is defined as an associative array. These, of course, are the middleware that can be applied to specific routes.\nLet\u0026rsquo;s add our to the top (keeping things alphabetical):\n\u0026#39;admin\u0026#39; =\u0026gt; \\App\\Http\\Middleware\\AdminOnly::class, Applying our middleware to a Route For now, let\u0026rsquo;s just create an admin route and apply our middleware to it.\nIn routes/web.php, add:\nRoute::get(\u0026#39;/admin/projects\u0026#39;, [ProjectController::class, \u0026#39;index\u0026#39;])-\u0026gt;middleware(\u0026#39;admin\u0026#39;); If the authenticated user is an admin, they\u0026rsquo;ll be able to see the project index at http://localhost/admin/projects\nAnyone else, including guests, should get a 403 \u0026ldquo;forbidden\u0026rdquo; response.\nSimple Roles We\u0026rsquo;ve locked down certain routes via middleware, but it would also be useful to have a method in our user model that we can call in order to conditionally output elements in a page.\nAdd the following in app/Models/User.php\npublic function isAdmin() { if ($this-\u0026gt;email === \u0026#39;jsolomon11@bcit.ca\u0026#39;) { return true; } else { return false; } } Add an admin only link between the user name and logout resources/views/components/layout.blade.php\n@if (auth()-\u0026gt;user()-\u0026gt;isAdmin()) \u0026lt;a href=\u0026#34;/admin/projects\u0026#34; class=\u0026#34;ml-4 text-s font-bold uppercase\u0026#34;\u0026gt;Admin\u0026lt;/a\u0026gt; @endif Update the AdminOnly middleware\nuse App\\Models\\User; ... public function handle(Request $request, Closure $next) { $user = $request-\u0026gt;user(); if(!$user?-\u0026gt;isAdmin()) { abort(Response::HTTP_FORBIDDEN); } return $next($request); } Middleware Groups If we have a set of routes that we want to apply the same middleware to, we can do so more cleanly through the use of middleware groups.\nApplying Middleware to Route Groups In web.php remove the route that we set up in the last step and replace it with:\nRoute::middleware([\u0026#39;auth\u0026#39;, \u0026#39;admin\u0026#39;])-\u0026gt;group(function () { Route::get(\u0026#39;/admin/projects\u0026#39;, [ProjectController::class, \u0026#39;index\u0026#39;]); Route::get(\u0026#39;/admin/projects/{project}\u0026#39;, [ProjectController::class, \u0026#39;show\u0026#39;]); }); Try navigating to :\nhttp://localhost/admin/projects\nAssuming you have a project with the slug \u0026lsquo;portfolio-showcase\u0026rsquo;, also try:\nhttp://localhost/admin/projects/portfolio-showcase\nNote: clicking the link from the admin version of the index take you out of the admin area\u0026hellip; That\u0026rsquo;s expected. We won\u0026rsquo;t be setting up an admin index shortly.\nPublic Storage Next week we\u0026rsquo;ll be adding in the ability to upload a thumbnail and image for each project.\nIn preparation for that, let\u0026rsquo;s make an images directory available and drop in some placeholders so that we can start redesigning our project card.\nCreating a Symlink to Public Storage Directory sail artisan storage:link Within that folder, create an images folder and add in some placeholder and thumbnail images.\nAccessing Files in Public Storage In order to access the files in public you will need to use the url() helper.\nThe path should begin with storage, but not include \u0026ldquo;app/public\u0026rdquo;. That part is handled by the symlink we created above.\nsrc=\u0026#34;{{url(\u0026#39;storage/images/placeholder_thumb.svg\u0026#39;)}}\u0026#34; "
},
{
	"uri": "http://localhost:1313/python/list/",
	"title": "Data Structure",
	"tags": [],
	"description": "",
	"content": "Lists Related data can be grouped together into a single variable Python list can have different type of values : array, string, number, etc.. List is mutable list_sample = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;] Mutate means change. You can modify something mutuable.\nList Comprehensions A shorter way to create a new list, from another list, based upon conditions that you set.\nfruits = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;mango\u0026#34;] newlist = [] for x in fruits: if \u0026#34;a\u0026#34; in x: newlist.append(x) newlist = [x for x in fruits if \u0026#39;a\u0026#39; in x] # x at the front is the item added to the list provinces = [\u0026#39;bc\u0026#39;, \u0026#39;ab\u0026#39;] new_prov = [province for province in provinces if \u0026#39;a\u0026#39; in province] Range range(start, stop, step)\nx = range(3, 6) # 3, 4, 5, 6 Python destructing When you know the length of array\nlist_ex = [1,2,3]\ra, b, c = list_ex\r# a == 1, b == 2 Loop with List Loop list with index\nfor i in range(len(my_array)): pass Loop list with index and its item.\nfor index, item in enumerate(my_array): pass Methods Mapping list map(function, array)\nConvert to list before using mapped list : list(words)\ndef myfunc(a, b): return a + b x = map(myfunc, (\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;cherry\u0026#39;), (\u0026#39;orange\u0026#39;, \u0026#39;lemon\u0026#39;, \u0026#39;pineapple\u0026#39;)) Convert string items to integers\nint_nums = map(int, [\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;]) words = map(len, [\u0026#39;haha\u0026#39;, \u0026#39;hoho\u0026#39;]) Use lambda (lambda is function itself.) lambda parameter: return\nsquared = map(lambda num: num**2, [1,2,3,4,5]) Get sum of array sum(list or tuple or dict, start:optional)\nstart is starting number (10+list items)\na = sum(map(int, [\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;])) Remove item from array list.remove(value)\nRemove the first instance of a value in a list.\np_list = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;] p_list.remove(\u0026#39;b\u0026#39;) # p_list = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;d\u0026#39;, e] list.pop(index)\nRemove an an element at a given index\na = p_list.pop(0) # \u0026#39;a\u0026#39; print(p_list) # [\u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;] # Negative index postion from end list.pop(-1) # Empty index remove the last item list.pop() list.clear()\nEmpty the list\np_list.clear() # p_list = [] List to String: Join string.join(iterable)\nReturns a string by joining all the elements of an iterable.\n\u0026#39; \u0026#39;.join(p_list) # a b b d Index : Index of in the list list.index(element, start, end)\nReturns only the first instance that matches.\nelement : the element(value) to be searched start (optional) : start search from this index end (optional) : search the element up to this index If the element is not in the list, it will throw a ValueError.\np_list.index(\u0026#39;a\u0026#39;) # 0 Add item in the list list.append(item) count() p_list.count(\u0026#39;c\u0026#39;) reverse() p_list.reverse() append(value) p_list min() min(p_list) max() max(p_list) sort() p_list Tuples An ordered sequence of elements. Duplicate elements are allowed.\ntuple_sample = (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;) Tuple elements are immutable. Cannot be added, removed or updated once declared.\nMultiple Return with Tuple ... return (a, b) Set Set is an object that stores a colletion of data All elements are unique, no duplicates Elements in a set can be of different data types Elements in a set are not stored in any particular order Cannot access items by referring to an index Can loop through the set Once a set is created, you cannot change its items, but you can add/remove items. Add one item using add() method # Convert List to Set p_list = ([\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;b\u0026#39;]) print(set(p_list)) # {\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;} # Define Set p_set = {\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;} # Add a single item p_set.add(\u0026#39;aa\u0026#39;) # Add multiple items p_set.update([\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;]) # Remove item p_set.remove(\u0026#39;a\u0026#39;) # error if item does not exists p_set.discard(\u0026#39;a\u0026#39;) # if the item does not exists, it won\u0026#39;t raise an error union() Return a new set with all itmes from both sets :\nset_a = {1, 2, 3} set_b = {\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;} new_set = set_a.union(set_b) Can also be done using update()\nList Tuple Set [] () {} Mutable Immutable No change, Yes add/remove Duplicate Duplicate No Duplicate Dictionary Dictionary is an object that stores an unordered collection of data Each element has key-value pair # Definition p_dict = { \u0026#39;name\u0026#39;: \u0026#39;aa\u0026#39;, \u0026#39;age\u0026#39;: 1 } # Dict() to define p_dict = dict(name=\u0026#39;aa\u0026#39;, age=1) # Dict() + List, Tuple p_dict = dict([(\u0026#39;name\u0026#39;, \u0026#39;aa\u0026#39;), (\u0026#39;age\u0026#39;, 1)]) Access values p_dict[\u0026#39;name\u0026#39;] # or p_dict.get(\u0026#39;name\u0026#39;) Add data p_dict[\u0026#39;newKey\u0026#39;] = \u0026#39;haha\u0026#39; Delete # Using del keyword del p_dict[\u0026#39;newKey\u0026#39;] # Remove all item p_dict.clear() Merge dictionaries Overwritten if the same key exists\np_dict.update(new_dict) Iterating list_dic = {\u0026#39;key\u0026#39;:\u0026#39;value\u0026#39;} # key for key in p_dict: print(key) # name print(p_dict[key]) # aa # value for val in p_dict.values(): print(val) # aa # both for key, val in p_dict.items(): print(name, val) # name aa "
},
{
	"uri": "http://localhost:1313/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": "Database ERD An Entity Relationship Diagram (ERD) illustrates how “entities” (tables) and entity properties (columns) relate to each other within a relational database system.\nConvention Table(entity) name: noun, singular, PascalCase Column : camelCase Minimal Form do not contain the value with , (comma). divide by multiple columns.. ex) address-Vancouver, BC -\u0026gt; city-vancouver, province-BC Relationships zero or one\nexactly one\nzero or many\none or many\none to one\none to many\nmany to many (use bridge table)\nMake sure you have derived attribue A derived attribute is an attribute whose value is calculated from other attributes. For example, age can be calculated by subtracting the birth date from the current date. "
},
{
	"uri": "http://localhost:1313/aws/5-lambda/",
	"title": "Lambda Function",
	"tags": [],
	"description": "",
	"content": "Lambda Serverless, event-driven compute service\nServerless Cloud-native development model. Applications without having to manage severs. (Pay what you use) Lambda Setup AWS \u003e Lambda \u003e Function \u003e Create function\rFunction name : get/post/put etc Runtime : Lambda function language (Node.js 18.x) Architecture : x86_64 (arm64 is for mobile) Lambda Function mjs : Moduled Javascript (ES6, same as javascript file with type:module in package.json) Hit Deploy \u0026gt; Test Every lambda is triggered by something. Here, test btn is the trigger API Gateway is one of trigger (it is kind of nginx, accept http request) Check console.log : Monitor \u0026gt; CloudWatch API Gateway API Gateway Setup AWS \u003e API Gateway \u003e HTTP API \u003e Build (or Create API) \u003e API name \u003e Review and Create\rAPI Gateway \u0026gt; Develop \u0026gt; Routes : Create endpoints (get, post, etc) Dynamic ID ex) get, /book/{id} Click Route \u0026gt; Route details \u0026gt; Attach integration Integration target \u0026gt; Lambda function \u0026gt; Select lambda function you created it for URL : API \u0026gt; invoke URL API Routes example GET /todos GET /todos/{id} POST /todos PUT /todos/{id} DELETE /todos/{id} CORS API Gateway \u0026gt; Develop \u0026gt; CORS access-control-allow-origin : * (only for the get request) access-control-allow-headers : * =\u0026gt; not safe way but just use it for now credentials : no Add Authorizer in API Gateway (after Cognito) API Gateway \u0026gt; Routes \u0026gt; Route details \u0026gt; Attach authorization Create and attach an authorizer \u0026gt; JWT (IAM is more advanced) Issuer URL : https://cognito-idp.\u0026lt;region\u0026gt;.amazonaws.com/\u0026lt;userpoolid\u0026gt; Audience : Client ID from Cognito Check : Gateway \u0026gt; Develop \u0026gt; Authorization if you have no authorization with this endpoint, you have 401 error\nIn your lambda function, you can get the user id like this\nconst handler = async (event) =\u0026gt; {\r// Get the currently logged in user\rconst userId = event.requestContext.authorizer.jwt.claims.sub\rlocation.userId = userId;\r```\rWhen making a request to one of the authoried endpoints, you have to send the JWT in the header like this: (from react)\r```\rconst token = await userToken()\rconst imagesResult = await axios.get(\u0026#34;whatever your url is\u0026#34;, {\rheaders: {\rAuthorization: token\r}\r})\r```\r# Cockroach DB\r### Cockroach DB\rServerless Database\r### Connection String in Terminal\r```\rcockroach sql --url \u0026#34;postgresql://byul@absurd-beast-2237.g95.cockroachlabs.cloud:26257/[DB_name]?sslmode=verify-full\u0026#34;\r```\r### Schema Example\r```\rCREATE TABLE locations (\rid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\ruser_uuid UUID,\rname STRING,\rtimezone STRING );\rCREATE TABLE weather (\rid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\rlocation_id UUID REFERENCES locations (id),\ruser_uuid UUID,\rtimestamp TIMESTAMP,\rtemperature FLOAT,\rdescription STRING\r);\r```\r``` "
},
{
	"uri": "http://localhost:1313/c/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": "String Manipulation Escape string Double Quote \\\u0026quot; New Line \\n Back Slash \\\\ Tab \\t Verbatim Verbatim \u0026ldquo;@\u0026rdquo; allows you to write a string with backslash and newline without using escape characters\nvar message = @\u0026#34;Hi, Hello\u0026#34; Format var name = \u0026#34;aaa\u0026#34;; var message = String.Format(\u0026#34;{0} {1}\u0026#34;, name, \u0026#34;hello\u0026#34;) F Floating-Point, D Decimal, G General, N Number, E Exponential, C Currency\n$\u0026#34;{val:F}\u0026#34; Interpolation var a = $\u0026#34;I have {var}\u0026#34;; String Methods Get substring of string text.Substring(start, characters)\nvar text = \u0026#34;Hello World\u0026#34;; var sub_text = text.Substring(6,5); // World ToUpper() text.ToUpper()\nToLower() text.ToLower()\nTrim() text.Trim()\nSplit() text.Split(',')\nvar csv = \u0026#34;a,b,c\u0026#34;; string[] names = csv.Split(\u0026#39;,\u0026#39;); // array of 3 items Join() string.Join(\u0026quot;,\u0026quot;, arrayName)\nstring aa = string.Join(\u0026#34;,\u0026#34;, names); Contains() text.Contains(\u0026quot;~~\u0026quot;)\ntext.Contains(\u0026#34;Hello\u0026#34;) // true or false Replace() text.Replace(\u0026#34;World\u0026#34;, \u0026#34;Hi\u0026#34;); Get Index of the first occurrence text.IndexOf(\u0026quot;string or char\u0026quot;)\ntext.IndexOf(\u0026#34;a\u0026#34;) // index number Remove last item from string string.Remove(string.Length-1, 1)\nLast item from list list.LastOrDefault(); DateTime DateTime now = DateTime.Now; now.DayOfWeek; now.DayOfYear; now.AddYears(1000); now.AddMonths(12); now.AddDays(5); now.AddHours(48); now.AddSeconds(11); File Reading C# Day 3\nRegular Expression C# Day 3\n"
},
{
	"uri": "http://localhost:1313/xtc/php/admin/",
	"title": "Admin",
	"tags": [],
	"description": "",
	"content": "Create Project Form Now that we have a secured admin area, let\u0026rsquo;s build our project creation UI.\nAdd Routes routes/web.php\nRoute::get(\u0026#39;/admin/projects/create\u0026#39;, [ProjectController::class, \u0026#39;create\u0026#39;]); Route::post(\u0026#39;/admin/projects/create\u0026#39;, [ProjectController::class, \u0026#39;store\u0026#39;]); Add A Create Method to ProjectController Since we will need a category dropdown in our form, make sure to import the Category model and send all categories to the view.\npublic function create() { return view(\u0026#39;admin.projects.create\u0026#39;) -\u0026gt;with(\u0026#39;categories\u0026#39;, Category::all()); } Build the Projects Create View resources/views/admin/projects/create.blade.php\nUse the same x-layout and x-slot that we\u0026rsquo;ve used for our other views.\nConstruct the Form Remember to add the @csrf directive\nAdd the Inputs Refer to the create_projects_table migration for a reference to the needed inputs.\n$table-\u0026gt;string(\u0026#39;title\u0026#39;); $table-\u0026gt;text(\u0026#39;excerpt\u0026#39;); $table-\u0026gt;text(\u0026#39;body\u0026#39;); $table-\u0026gt;string(\u0026#39;url\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;date(\u0026#39;published_date\u0026#39;)-\u0026gt;nullable(true); $table-\u0026gt;foreignId(\u0026#39;category_id\u0026#39;)-\u0026gt;nullable(true); Add inputs and labels accordingly, including conditional display of errors and display of old values, i.e.:\n\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt;\r\u0026lt;label for=\u0026#34;title\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Title\u0026lt;/label\u0026gt;\r\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34; id=\u0026#34;title\u0026#34; value=\u0026#34;{{ old(\u0026#39;title\u0026#39;) }}\u0026#34; required\rclass=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt;\r@error(\u0026#39;title\u0026#39;)\r\u0026lt;p class=\u0026#34;text-red-500 text-xs mt-1\u0026#34;\u0026gt;{{ $message }}\u0026lt;/p\u0026gt;\r@enderror\r\u0026lt;/div\u0026gt; Adding the Category Dropdown For the category_id field we\u0026rsquo;ll want to iterate through the available categories and create options for each as well as offer an option for None\n\u0026lt;select name=\u0026#34;category_id\u0026#34; id=\u0026#34;category_id\u0026#34;\u0026gt;\r\u0026lt;option value=\u0026#34;\u0026#34; selected disabled\u0026gt;Select a Category\u0026lt;/option\u0026gt;\r\u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;None\u0026lt;/option\u0026gt;\r@foreach ($categories as $category)\r\u0026lt;option value=\u0026#34;{{ $category-\u0026gt;id }}\u0026#34; @if ($category-\u0026gt;id == old(\u0026#39;category_id\u0026#39;)) selected @endif\u0026gt;\r{{ $category-\u0026gt;name }}\u0026lt;/option\u0026gt;\r@endforeach\r\u0026lt;/select\u0026gt; Store the Project Handle Form Request Data Create the store method in ProjectController\nLet\u0026rsquo;s start by dumping out the submitted data with:\npublic function store() { ddd(request()-\u0026gt;all()); } Note: ddd is Die, Dump, Debug.\nValidate the Request $attributes = request()-\u0026gt;validate([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;excerpt\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;url\u0026#39;], \u0026#39;published_date\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;date\u0026#39;], \u0026#39;category_id\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;exists:categories,id\u0026#39;], ]); If We Pass Validation, Generate the Slug Import the Str class at the top of the file so we can use its slug method.\nuse Illuminate\\Support\\Str; Then after the validation:\n// Generate the slug from the title $attributes[\u0026#39;slug\u0026#39;] = Str::slug($attributes[\u0026#39;title\u0026#39;]); Create the Project Project::create($attributes); Mass Assignment Laravel Models have a set of properties which control which fields should, or should not, be eligible for mass assignment. In our case, we want title, excerpt, body, url, pubished_date, and category_id to be fillable, so, in our Project model we need to add:\n/** * The attributes that are mass assignable. * * @var array\u0026lt;int, string\u0026gt; */ protected $fillable = [ \u0026#39;title\u0026#39;, \u0026#39;slug\u0026#39;, \u0026#39;excerpt\u0026#39;, \u0026#39;body\u0026#39;, \u0026#39;url\u0026#39;, \u0026#39;published_date\u0026#39;, \u0026#39;category_id\u0026#39; ]; Redirect to the Dashboard // Set a flash message session()-\u0026gt;flash(\u0026#39;success\u0026#39;,\u0026#39;Project Created Successfully\u0026#39;); // Redirect to the Admin Dashboard return redirect(\u0026#39;/admin\u0026#39;); Editing Projects There are very few differences between creation and editing of records, particularly when it comes to the form, so let\u0026rsquo;s see if we can reuse as much as possible.\nThe first difference is that we\u0026rsquo;ll need to send the original project data to the form view from our controller.\nProjectController.php\npublic function edit(Project $project) { return view(\u0026#39;admin.projects.create\u0026#39;) -\u0026gt;with(\u0026#39;project\u0026#39;, $project) -\u0026gt;with(\u0026#39;categories\u0026#39;, Category::all()); } Updating the Form create.blade.php\nNext, in our form we\u0026rsquo;ll need to branch the form action.\nLet\u0026rsquo;s also change the request type to \u0026ldquo;PATCH\u0026rdquo; and clearly display on screen whether this is a create or edit.\nNote: HTML form elements only allow GET or POST, but we can use Laravel @method directives to override this. When updating part or all of a resource the appropriate method is PATCH.\n@if ($project)\r\u0026lt;h1 class=\u0026#34;text-center font-bold text-xl mb-3\u0026#34;\u0026gt;Edit Project: {{ $project-\u0026gt;title }}\u0026lt;/h1\u0026gt;\r\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/admin/projects/{{ $project-\u0026gt;id }}/edit\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt;\r@method(\u0026#39;PATCH\u0026#39;)\r@else\r\u0026lt;h1 class=\u0026#34;text-center font-bold text-xl mb-3\u0026#34;\u0026gt;Create Project\u0026lt;/h1\u0026gt;\r\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/admin/projects/create\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt;\r@endif Handling Both Old and Original Values If validation fails we still want to re-display the last user-entered value, but when initially editing a project we want to display the original value.\nWe can accomplish that with the nullish coalescing operator (??) to show either the old value or the original value, but also have to remember that if we are creating a new project there is no original project from which to echo out a value.\nAll together, that will look like:\n\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;title\u0026quot; id=\u0026quot;title\u0026quot; value=\u0026quot;{{ old('title') ?? $project?-\u0026gt;title }}\u0026quot; /\u0026gt;\nYou\u0026rsquo;ll need to do that for each of the inputs, including determining which option in the category dropdown is selected.\nEdit Routes Route::get(\u0026#39;/admin/projects/{project}/edit\u0026#39;, [ProjectController::class, \u0026#39;edit\u0026#39;]); Route::patch(\u0026#39;/admin/projects/{project}/edit\u0026#39;, [ProjectController::class, \u0026#39;update\u0026#39;]); Validation Most of our validation can remain the same, with one key exception - the uniqueness of the title (and indirectly, the slug).\nLucky for us, the unique validator takes a this argument which is the id to ignore.\npublic function update(Project $project, Request $request) {\r$attributes = request()-\u0026gt;validate([ \u0026#39;title\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;,\u0026#39;unique:projects,title,\u0026#39;.$project-\u0026gt;id], \u0026#39;excerpt\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; \u0026#39;required\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;url\u0026#39;], \u0026#39;published_date\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;date\u0026#39;], \u0026#39;category_id\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;exists:categories,id\u0026#39;], ]); After passing validation we call the update() method on the project instance.\n// Save updates to the DB $project-\u0026gt;update($attributes); Deleting Projects Last stop on our CRUD tour is deletion.\nBoth the routing and controller method are quite straightforward.\nroutes/Web.php\nRoute::delete(\u0026#39;/admin/projects/{project}/delete\u0026#39;, [ProjectController::class, \u0026#39;destroy\u0026#39;]); ProjectController.php\npublic function destroy(Project $project) { $project-\u0026gt;delete(); // Set a flash message session()-\u0026gt;flash(\u0026#39;success\u0026#39;,\u0026#39;Project Deleted Successfully\u0026#39;); // Redirect to the Admin Dashboard return redirect(\u0026#39;/admin\u0026#39;); } The only thing that may be slightly different than expected is that we want to use a form around the delete button in the in the dashboard so that we can set the HTTP method to delete.\nviews/admin/index.blade.php\n\u0026lt;form method=\u0026#34;POST\u0026#34; action=\u0026#34;/admin/projects/{{$project-\u0026gt;id}}/delete\u0026#34; class=\u0026#34;inline\u0026#34;\u0026gt;\r@csrf\r@method(\u0026#39;delete\u0026#39;)\r\u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;text-red-600\u0026#34;\u0026gt;Delete\r\u0026lt;/button\u0026gt;\r\u0026lt;/form\u0026gt; Adding Project Thumbnails Let\u0026rsquo;s add support for each project to, optionally, have a featured image and a thumbnail.\nMigration First we\u0026rsquo;ll need a add a couple of columns our projects table.\nRather than redefining the create_projects_table migration, let write a migration that just alters the table definition.\nsail artisan make:migration add_image_and_thumb_to_projects_table --table=projects Then define the up and down methods in the migration\npublic function up() { Schema::table(\u0026#39;projects\u0026#39;, function (Blueprint $table) { $table-\u0026gt;string(\u0026#39;image\u0026#39;)-\u0026gt;nullable()-\u0026gt;default(null)-\u0026gt;after(\u0026#39;published_date\u0026#39;); $table-\u0026gt;string(\u0026#39;thumb\u0026#39;)-\u0026gt;nullable()-\u0026gt;default(null)-\u0026gt;after(\u0026#39;image\u0026#39;); }); } public function down() { Schema::table(\u0026#39;projects\u0026#39;, function (Blueprint $table) { $table-\u0026gt;dropColumn(\u0026#39;image\u0026#39;); $table-\u0026gt;dropColumn(\u0026#39;thumb\u0026#39;); }); } Run the migration\nsail artisan migrate Update the Model Add the new columns as fillable fields in the Project model\nprotected $fillable = [ \u0026#39;title\u0026#39;, \u0026#39;excerpt\u0026#39;, \u0026#39;body\u0026#39;, \u0026#39;url\u0026#39;, \u0026#39;published_date\u0026#39;, \u0026#39;image\u0026#39;, \u0026#39;thumb\u0026#39;, \u0026#39;category_id\u0026#39; ]; Update the Form In order to send files along with the form data we need to set the enctype for the create/edit form to \u0026ldquo;multipart/form-data\u0026rdquo;.\nAdd File Inputs\n\u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;thumb\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Thumbnail\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;thumb\u0026#34; id=\u0026#34;thumb\u0026#34; value=\u0026#39;{{ old(\u0026#39;thumb\u0026#39;) ?? $project?-\u0026gt;thumb }}\u0026#39; class=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34; / \u0026gt; @error(\u0026#39;thumb\u0026#39;) \u0026lt;p class=\u0026#34;text-red-500 text-xs mt-1\u0026#34;\u0026gt;{{ $message }}\u0026lt;/p\u0026gt; @enderror \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mb-6\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;image\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Image\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34; id=\u0026#34;image\u0026#34; value=\u0026#34;{{ old(\u0026#39;image\u0026#39;) ?? $project?-\u0026gt;image }}\u0026#34; class=\u0026#34;border border-gray-400 rounded p2 w-full\u0026#34;\u0026gt; @error(\u0026#39;image\u0026#39;) \u0026lt;p class=\u0026#34;text-red-500 text-xs mt-1\u0026#34;\u0026gt;{{ $message }}\u0026lt;/p\u0026gt; @enderror \u0026lt;/div\u0026gt; Handle file uploads in ProjectController Add validation rules to both the store and update methods :\n\u0026#39;image\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;image\u0026#39;,\u0026#39;mimes:jpg,png,jpeg,gif,svg\u0026#39;,\u0026#39;max:2048\u0026#39;,\u0026#39;dimensions:max_width=1200\u0026#39;], \u0026#39;thumb\u0026#39; =\u0026gt; [\u0026#39;nullable\u0026#39;,\u0026#39;sometimes\u0026#39;,\u0026#39;image\u0026#39;,\u0026#39;mimes:jpg,png,jpeg,gif,svg\u0026#39;,\u0026#39;max:1024\u0026#39;,\u0026#39;dimensions:max_width=600\u0026#39;], Save the Upload Files into Public Storage\n// Save upload in public storage and set path attributes $image_path = $request-\u0026gt;file(\u0026#39;image\u0026#39;)-\u0026gt;storeAs(\u0026#39;images\u0026#39;,$request-\u0026gt;image-\u0026gt;getClientOriginalName(), \u0026#39;public\u0026#39;); $attributes[\u0026#39;image\u0026#39;] = $image_path; $thumb_path = $request-\u0026gt;file(\u0026#39;thumb\u0026#39;)-\u0026gt;storeAs(\u0026#39;images\u0026#39;, $request-\u0026gt;thumb-\u0026gt;getClientOriginalName(), \u0026#39;public\u0026#39;); $attributes[\u0026#39;thumb\u0026#39;] = $thumb_path; Pagination Paginating records can be the stuff of nightmares, but with Laravel we can implement it for our index page by editing just 2 lines of code.\nInstead of\nProjectController.php\npublic function index() { return view(\u0026#39;projects.index\u0026#39;) -\u0026gt;with(\u0026#39;projects\u0026#39;, Project::latest(\u0026#39;published_date\u0026#39;)-\u0026gt;paginate(6)-\u0026gt;withQueryString()) -\u0026gt;with(\u0026#39;categoryName\u0026#39;, null); } @if (count($projects)) \u0026lt;div class=\u0026#34;text-xs mt-4 w-full text-right\u0026#34;\u0026gt;{{ $projects-\u0026gt;links() }}\u0026lt;/div\u0026gt; @else \u0026lt;div\u0026gt;Nothing to showcase, yet.\u0026lt;/div\u0026gt; @endif Additional Pagination Notes As most of you encountered when adding pagination to the /projects/index.blade.php, Laravel throws an error when rendering the category specific list of projects because $projects-\u0026gt;links() is undefined.\nThe \u0026ldquo;easy\u0026rdquo; solution that I presented in class was to create a duplicate that index.blade.php and have a non-paginated version. While that does work and is easy, it means we\u0026rsquo;ve added a significant amount of repetition in our codebase.\nA did a little further digging this evening and found a better solution:\n@if (count($projects)) \u0026lt;div class=\u0026#34;text-xs mt-4 w-full text-right\u0026#34;\u0026gt; @if($projects instanceof \\Illuminate\\Pagination\\AbstractPaginator) {{ $projects-\u0026gt;links() }} @else Found {{ count($projects) }} Projects in {{ $categoryName }} @endif \u0026lt;/div\u0026gt; @else \u0026lt;div\u0026gt;Nothing to showcase, yet.\u0026lt;/div\u0026gt; @endif Long story moderately short - a solid strategy when something is throwing errors is to find and implement a (reasonable) quick fix first, jot down a \u0026ldquo;there must be a better solution to this\u0026hellip;\u0026rdquo; note somewhere, and then focus on the other things that still need to be completed. Our minds are remarkably good at divergent thinking when fed puzzles to work on in the background - especially when there\u0026rsquo;s no \u0026ldquo;it\u0026rsquo;s broken\u0026rdquo; anxiety attached to the task.\nMany to Many Relationships To implement our one-to-many relationship between categories and projects we:\nCreated a categories table Added a category_id column to our projects table with a foreign key constraint In our Project model we added a category() method that used Eloquent\u0026rsquo;s belongsTo(Category::class) to retrieve the category for a project In our Category model we added a projects() method that called hasMany(Project::class) Many-to-many relationships are a tiny bit more complicated, but Eloquent still makes them relatively easy to work with.\nWhat we\u0026rsquo;ll need to set up in order to support many-to-many relationships between our projects and tags are:\nA tags table A projects_tags pivot table this will have projects_id and tags_id columns and there will be one record for each association between project and tag In each model (Project and Tag) we will then add a belongsToMany() method Project Tags Create the Tags Model and Migration sail artisan make:model Tag -m In the migration:\nAdd unique string columns for name and slug.\nAlso, to follow convention make sure the table name is pluralized: tags.\nIf removing the timestamps() from the migration, make sure to set the following in the model too:\npublic $timestamps = false; Create the Pivot Table Migration To create our pivot table we still use artisan\u0026rsquo;s make:migration with the create_*_table syntax, but it\u0026rsquo;s important that we list out the connected tables in alphabetical order.\nsail artisan make:migration create_projects_tags_table For this table we\u0026rsquo;ll need an id() as well as the foreign key columns pointing at the id column in both the projects and tags tables and we\u0026rsquo;ll also want the FK constraints to the cascade on delete.\npublic function up() { Schema::create(\u0026#39;projects_tags\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;unsignedBiginteger(\u0026#39;projects_id\u0026#39;)-\u0026gt;unsigned(); $table-\u0026gt;unsignedBiginteger(\u0026#39;tags_id\u0026#39;)-\u0026gt;unsigned(); $table-\u0026gt;foreign(\u0026#39;projects_id\u0026#39;)-\u0026gt;references(\u0026#39;id\u0026#39;) -\u0026gt;on(\u0026#39;projects\u0026#39;)-\u0026gt;onDelete(\u0026#39;cascade\u0026#39;); $table-\u0026gt;foreign(\u0026#39;tags_id\u0026#39;)-\u0026gt;references(\u0026#39;id\u0026#39;) -\u0026gt;on(\u0026#39;tags\u0026#39;)-\u0026gt;onDelete(\u0026#39;cascade\u0026#39;); }); } Update the Models Project.php\n// Load the Tags for this Project public function tags() { return $this-\u0026gt;belongsToMany(Tag::class, \u0026#39;projects_tags\u0026#39;, \u0026#39;projects_id\u0026#39;, \u0026#39;tags_id\u0026#39;); } Tag.php\npublic function projects() { return $this-\u0026gt;belongsToMany(Project::class, \u0026#39;projects_tags\u0026#39;, \u0026#39;tags_id\u0026#39;,\u0026#39;projects_id\u0026#39;); } Be aware that the order of the \u0026rsquo;tags_id\u0026rsquo; and \u0026lsquo;projects_id\u0026rsquo; argument is important here and reverses depending on whether we want the tags related to a project or the projects related to a tag.\nMost of the time you won\u0026rsquo;t need to dig into the API documentation directly, but when there are multiple arguments involved and you\u0026rsquo;re not getting expected results at first\u0026hellip; dive into the details:\nhttps://laravel.com/api/9.x/Illuminate/Database/Eloquent/Concerns/HasRelationships.html#method_belongsToMany\nRun the Migrations and Verify sail artisan migrate Add a Tag Seeder sail artisan make:seeder TagSeeder Import the Tag model Follow the same structure as the Category seeder, and prepopulate the DB with some tags (PHP, Laravel, Node.js\u0026hellip; no need to be exhaustive, but give yourself a few to start working with). Add the TagSeeder to the DatabaseSeeder Run a fresh migration that includes the seeders sail artisan migrate:fresh \u0026ndash;seed Prepopulate Project Tags via a ProjectsTagsSeeder Import the Project Model Assuming that you have added some projects and tags via the preceding seeders, you can now explicitly attach some tags to one or more projects. public function run() { // Explicitly attach tags to projects $portfolioProject = Project::find(1); $portfolioProject-\u0026gt;tags()-\u0026gt;attach([1,2,3]); } Managing Many-To-Many Relationships There are three helper functions that we can use to manage our many-to-many relationship.\nLet\u0026rsquo;s walk through them briefly, from the Project perspective, assuming that we have our Project instance in $project and tags with ids 1 through 5 in our DB.\nattach() We can pass in an array of tag ids and one row will be created in projects_tags for each.\n$project-\u0026gt;tags()-\u0026gt;attach([1,2,5]); This would most often be used in ProjectController store() method.\nsync() We can pass in an array of tag ids and projects_tags will be updated to reflect only these pairings.\n$project-\u0026gt;tags()-\u0026gt;sync([2,4]); This would most often be used in ProjectController update() method.\ndetach() This will remove all rows for this project from the projects_tags table.\n$project-\u0026gt;tags()-\u0026gt;detach(); This would most often be used in ProjectController destroy() method, although the cascading delete would remove the rows from the pivot table anyway.\nAdding Tags via Project Create/Edit Form Both the attach() and sync() helpers take arrays of ids.\nThere are several ways that we could approach sending this from our form, the two most common being:\nA select with the multiple attribute A set of checkboxes, all with the same name attribute In either case, you\u0026rsquo;ll want make sure that the name attribute has square brackets as a suffix or else you\u0026rsquo;ll have to construct the array yourself from the posted data.\nHere\u0026rsquo;s how I\u0026rsquo;ve set this up, as a multi-select, pre-selecting the current set of tags attached to a project when the form first loads and then persisting the old() options if there were any validation errors on submit.\n\u0026lt;label for=\u0026#34;tags\u0026#34; class=\u0026#34;block mb-2 uppercase font-bold text-xs text-gray-700\u0026#34;\u0026gt;Tags\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026#34;tags[]\u0026#34; id=\u0026#34;tags\u0026#34; multiple=\u0026#34;multiple\u0026#34;\u0026gt; @foreach ($tags as $tag) \u0026lt;option value=\u0026#34;{{ $tag-\u0026gt;id }}\u0026#34; @if (old(\u0026#39;tags\u0026#39;) \u0026amp;\u0026amp; in_array($tag-\u0026gt;id, old(\u0026#39;tags\u0026#39;))) selected @elseif ($project \u0026amp;\u0026amp; $project-\u0026gt;tags) @foreach ($project-\u0026gt;tags as $projectTag) @if ($tag-\u0026gt;id == $projectTag-\u0026gt;id) selected @endif @endforeach @endif \u0026gt; {{ $tag-\u0026gt;name }}\u0026lt;/option\u0026gt; @endforeach \u0026lt;/select\u0026gt; @error(\u0026#39;tags\u0026#39;) \u0026lt;p class=\u0026#34;text-red-500 text-xs mt-1\u0026#34;\u0026gt;{{ $message }}\u0026lt;/p\u0026gt; @enderror I\u0026rsquo;ll leave it to you to implement the attach and synch in appropriate ProjectController methods, with just the hint that you should do it after creating or updating the project record itself.\nRead-only JSON API This is a quick and dirty approach to setting up read-only endpoints to return Project, Category, and Tags data as JSON, but it works.\nRather than rendering views, we\u0026rsquo;ll use the json() method of the Response class to return what we need.\nProjectController.php\npublic function getProjectsJSON() { $projects = Project::with([\u0026#39;category\u0026#39;,\u0026#39;tags\u0026#39;])-\u0026gt;get(); return response()-\u0026gt;json($projects); } CategoryController.php\nuse App\\Models\\Category; class CategoryController extends Controller { public function getCategoriesJSON() { $categories = Category::all(); return response()-\u0026gt;json($categories); } } TagController.php\nuse App\\Models\\Tag; class TagController extends Controller { public function getTagsJSON() { $tags = Tag::all(); return response()-\u0026gt;json($tags); } } Add Routes\nRoute::get(\u0026#39;/api/projects\u0026#39;, [ProjectController::class, \u0026#39;getProjectsJSON\u0026#39;]); Route::get(\u0026#39;/api/categories\u0026#39;, [CategoryController::class, \u0026#39;getCategoriesJSON\u0026#39;]); Route::get(\u0026#39;/api/tags\u0026#39;, [TagController::class, \u0026#39;getTagsJSON\u0026#39;]); https://xqsit.github.io/laravel-coding-guidelines/docs/naming-conventions/\n"
},
{
	"uri": "http://localhost:1313/python/file/",
	"title": "Files",
	"tags": [],
	"description": "",
	"content": "Secondary Memory Secondary memory is file. It is not erased when the power is turned off.\nOpen file file = open(\u0026#39;file_name.txt\u0026#39;, \u0026#39;r\u0026#39;) string = file.read() file.close() with open(\u0026#39;file.txt\u0026#39;, \u0026#39;r\u0026#39;) string = file.read() file.close() Always close a file you open. If you don\u0026rsquo;t close, you might have\na permanently-locked state(inaccessible for operations now) a corrupted file any writing may have gone uncommitted Reading and Writing f = open(\u0026#39;file.txt\u0026#39;, \u0026#39;w\u0026#39;) f.write(\u0026#39;text\u0026#39;) f.close() Appending f = open(\u0026#39;file.text\u0026#39;, \u0026#39;a\u0026#39;) Reading f = open(\u0026#39;file.text\u0026#39;, \u0026#39;r\u0026#39;) aa = f.readlines() # as array by lines ab = f.read() # as string f.close() Mode w : overwrite an existing file, create file if it doesn\u0026rsquo;t exist x : create a file, error if the file already exists a : write to the end of an existing file, create file if it doesn\u0026rsquo;t exist \\+ : open a file for reading or writing Directory Listing import os with os.scandir(\u0026#39;my_directory/\u0026#39;) as entries: for entry in entries: print(entry.name) from pathlib import Path entries = Path(\u0026#39;my_directory/\u0026#39;) for entry in entries.iterdir(): print(entry.name) Open File Dialog from tkinter import Tk from tkinte.filedialog import askopenfilename Tk().withdraw() filename = askopenfilename() print(filename) "
},
{
	"uri": "http://localhost:1313/c/class/",
	"title": "Class",
	"tags": [],
	"description": "",
	"content": "Class c#1 Day4\n"
},
{
	"uri": "http://localhost:1313/javascript/",
	"title": "Javascript",
	"tags": [],
	"description": "",
	"content": "Language Javascript "
},
{
	"uri": "http://localhost:1313/c/",
	"title": "C#",
	"tags": [],
	"description": "",
	"content": "Object Oriented Programming Language C# intro code Basic Array Method String Linq "
},
{
	"uri": "http://localhost:1313/python/regex/",
	"title": "Regular Expression",
	"tags": [],
	"description": "",
	"content": "Regular expressions are strings. Used for patter matching in other strings.\nre Object import re string = \u0026#34;sample\u0026#34; matches = re.findall(\u0026#34;s\u0026#34;, string) re.match() re.search() re.split() re.sub() [] : A set of characters \\ : https://regex101.com/\n"
},
{
	"uri": "http://localhost:1313/asp.net/",
	"title": "ASP.NET",
	"tags": [],
	"description": "",
	"content": "Framework ASP.NET Day 1, 2 MVC Entity Framework Day 3 Identity Framework Code First Day 4 Lambda Syntax Day 5 ~ Cookies Sessions Search, Sort, Pagination DbContext, Dependency Injection "
},
{
	"uri": "http://localhost:1313/python/bs/",
	"title": "Beautiful Soup",
	"tags": [],
	"description": "",
	"content": "Beautiful Soup is a Python library for pulling data out of HTML and XML files.\nhttps://www.crummy.com/software/BeautifulSoup/bs4/doc/\n* When the website is blocked a bot, you need to use Selenium.\n* scrap for commercial purpose \u0026gt; follow the policy\nInstall pip install beautifulsoup4 Initializing from requests import get from bs4 import BeautifulSoup response = get(\u0026#34;url\u0026#34;) if response.status_code != 200: print(\u0026#34;Cant\u0026#39;request\u0026#34;) else: soup = BeautifulSoup(response.text, \u0026#34;html.parser\u0026#34;) # response.text : \u0026lt;tag\u0026gt;...\u0026lt;/tag\u0026gt; Methods Find all Scan the entire document looking for results as list\nfind_all(tag, attrs, recursive, string, limit)\nsoup.find_all(\u0026#39;section\u0026#39;, class_=\u0026#34;jobs\u0026#34;) attrs : id, href. or {\u0026quot;aria-label\u0026quot;: \u0026quot;pagination\u0026quot;} recursive : recursive=False, only direct child string : where string inside the tag matches limit : number of items find() Find one, returns the result\nfind(name, attrs, recursive, string)\nstring() Get string from HTML\n.string\nsoup.find(\u0026#39;tag\u0026#39;).string "
},
{
	"uri": "http://localhost:1313/react/deploy/",
	"title": "Deploy",
	"tags": [],
	"description": "",
	"content": "Netlify Build command CI= npm run build or CI=false npm run build\nRedirect Create file _redirects and put inside public folder.\n_redirects\n/* /index.html 200 Github Deploying to SiteGround - Domain Root The following command (run from the root folder of your project) will bundle up your app, into the build folder, ready to upload to your host.\nnpm run build In order to see the production code locally, you\u0026rsquo;ll need to do the following:\nInstall the node \u0026ldquo;serve\u0026rdquo; package globally (for use anywhere on your machine) npm install -g serve Depending on your permissions you may need to run this as Administrator (Windows) or prefix it with sudo (Mac/Linux) Start the node server and tell it to run from your build folder serve -s build Uploading to your server The next step is to upload the contents of your build folder to the public_html folder on your host server.\nIf you are not using client-side routing (i.e. you didn\u0026rsquo;t use React Router), you should be good to go.\nNote: the above steps work ONLY if you are serving your app from the domain root.\nNext, we\u0026rsquo;ll look at the additional configuration needed if you want to serve your app in a subdirectory on your website\u0026hellip;\nDeploying a Routed App By default an app that utilizes client-side routing won\u0026rsquo;t work because the server is set to deliver static pages based on the URL.\nTo fix that, we need to instruct the server to direct all http requests back to index.html\nCreate a file named .htaccess in the public folder in src, then paste the following rewrite rules into it:\n\u0026lt;IfModule mod_rewrite.c\u0026gt;\rRewriteEngine On\rRewriteBase /\rRewriteRule ^index\\.html$ - [L]\rRewriteCond %{REQUEST_FILENAME} !-f\rRewriteCond %{REQUEST_FILENAME} !-d\rRewriteCond %{REQUEST_FILENAME} !-l\rRewriteRule . /index.html [L]\r\u0026lt;/IfModule\u0026gt; CAUTION! If you have a code formatter running in your editor, make sure that it does not reformat the .htaccess file. In the case of Prettier, you will need to create a .prettierignore file in the root of your project, add **/.htaccess to it, save, and then restart VSCode.\nWith that in place, you need to re-build your app with npm run build\nThe build process will copy .htaccess to the build folder and then you can go ahead and upload the entire contents of the build folder to the public_html folder on SiteGround (or the host of your choice).\nDeploying to a Subdirectory In the previous slide we uploaded our app to the root folder (public_html) of our domain.\nIf we want our app to live in a subdirectory, we have a couple more steps to take in order for our routes and paths to work properly:\nSet the app homepage Open package.json and add the following property:\n\u0026ldquo;homepage\u0026rdquo;: \u0026ldquo;https://example.com/directory-name\u0026quot;,\nAdd a basename prop to your BrowserRouter basename={\u0026rsquo;/directory-name'}\nDeploying to GitHub Pages If you don\u0026rsquo;t already have one set up, create an empty repository for your project on github, then add it as a remote for your local repo.\ngit remote add origin https://github.com/{your-git-name}/{repo-name}.git\nThen, open your package.json and add homepage property:\n\u0026#34;homepage\u0026#34;: \u0026#34;https://{your-git-name}.github.io/{repo-name}\u0026#34;, We\u0026rsquo;ll also need the gh-pages node module as a dev dependency in order for this to work, so run the following (in your project root directory, as always):\nnpm install --save gh-pages Next, we need to add a pair of scripts in package.json (siblings to the start: and build: scripts)\n\u0026#34;scripts\u0026#34;: {\r\u0026#34;predeploy\u0026#34;: \u0026#34;npm run build\u0026#34;,\r\u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d build\u0026#34;,\r\u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;,\r\u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, The predeploy script will run automatically when we tell npm to run the deploy script.\nnpm run deploy Bundle the production version of our app into the build folder. Push the build folder to the gh-pages branch of your repo. Publish the gh-pages branch to the homepage defines in package.json You can (and should) continue to work, commit, and push on your main branch.\n"
},
{
	"uri": "http://localhost:1313/aws/iac/",
	"title": "Infrastructure as Code",
	"tags": [],
	"description": "",
	"content": "Infrastructure Infrastructure refers to the underlying components and resources required for the operation of systems, applications, or services.\nIt is all the behind-the-scenes stuff that allows us to use computers, access websites, and use apps on our phones.\nComponents and resources are below\nPhysical Components Servers, computers, network devicdes (routers, switches), storage devices (hard drives, solid-state drives), and cables.\nNetworking IP addresses, subnets, routing, firewalls, and load balancers. Networking infrastructure enables communication between devices and facilitates the transfer of data.\nOperating Systems Software that manages computer hardware. Windows, Linux, or macOS.\nVirtualization and Clouding Computing Virtual instances of servers, storage, and etc. Platforms such as AWS, Azure or Google Cloud.\nData Storage and Databases File systems, storage area networks (SAN), object storage, and different database types.\nSecurity and Monitoring Authentication, authorization, encryption, and network security measures.\nIaC IaC is an approach where infrastructure is defined and managed through code. like AWS CloudFormation, Terraform\nTerraform : for ec2, not serverless Cloud Formation SAM : Serverlss Application Model\nIaC Infrastructure as Code (IaC) is the managing and provisioning of infrastructure through code instead of through manual processes. AWS CloudFormation is one of example of IaC.\nAWS CloudFormation In stack, create Cognito, S3, DB, IAM..\nAWS CDK AWS CDK (Cloud Development Kit) allows you to use TypeScript, JavaScript, Java, .NET, and Python to create AWS infrasturcture.\nSST comes with a list of higher-level CDK constructs.\nIt is a framework that makes it easy to build full-stack applications on AWS It will automatically connect to the AWS with your $ aws configure information (created on AWS CLI day)\nAWS CLI AWS CLI is a command line tool that allows you to interact with AWS services from the command line.\nInstall https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nIt is a framework that makes it easy to build full-stack applications on AWS It will automatically connect to the AWS with your aws configure information (created on AWS CLI day) Node.js AWS CLI https://www.sammeechward.com/node-lambda-cli\nDotnet AWS CLI https://www.sammeechward.com/csharp-dotnet-aws-lambda\nusing Amazon.Lambda.Core; using System.Net; using Amazon.Lambda.APIGatewayEvents; // Assembly attribute to enable the Lambda function\u0026#39;s JSON input to be converted into a .NET class. [assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))] namespace MyFunctionName; public class Function { public APIGatewayHttpApiV2ProxyResponse FunctionHandler(APIGatewayHttpApiV2ProxyRequest request, ILambdaContext context) { var response = new APIGatewayHttpApiV2ProxyResponse { StatusCode = (int)HttpStatusCode.OK, // json body Body = System.Text.Json.JsonSerializer.Serialize(new { Message = \u0026#34;Hello World\u0026#34; }), Headers = new Dictionary\u0026lt;string, string\u0026gt; { { \u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34; } } }; return response; } } Add the Amazon.Lambda.APIGatewayEvents package to your C# project:\ndotnet add package Amazon.Lambda.APIGatewayEvents And add the function to an API gateway endpoint.\nYou can query details about a function using this command:\naws lambda get-function --function-name my-lambda-function All Cloud Terraform CloudFormation (AWS) Serverless SAM (AWS) Serverless Framework "
},
{
	"uri": "http://localhost:1313/c/linq/",
	"title": "Linq",
	"tags": [],
	"description": "",
	"content": " Day 6, 7, MVC Day1\nEntity Framework, Linq\nIQueryable\u0026lt;Class\u0026gt; query = from p in db.TableName select p; "
},
{
	"uri": "http://localhost:1313/xtc/php/",
	"title": "PHP",
	"tags": [],
	"description": "",
	"content": "Full-stack PHP Laravel BCIT SSD OO PHP \u0026amp; Laravel\nProgram setup Laraval intro Data Forms, Auth Admin "
},
{
	"uri": "http://localhost:1313/python/flask/",
	"title": "Flask",
	"tags": [],
	"description": "",
	"content": "Install pip install Flask\nUse from flask import Flask app = Flask(\u0026#34;Name\u0026#34;) @app.route(\u0026#34;/\u0026#34;) def home(): return \u0026#34;Home\u0026#34; app.run(\u0026#34;127.0.0.1\u0026#34;) HTML from flask import Flask, render_template app = Flask(\u0026#34;JobScrapper\u0026#34;) @app.route(\u0026#34;/\u0026#34;) def home(): return render_template(\u0026#34;home.html\u0026#34;, name=\u0026#34;hey\u0026#34;) You should create home.html file inside templates folder. Flask looks for the templates folder to get html files.\nUse the variable from rendering\n\u0026lt;h1\u0026gt;{{name}}\u0026lt;/h1\u0026gt; 1 + tap : bolierplate in html\nPico https://picocss.com/\nFull code from flask import Flask, render_template, request, redirect, send_file from extractors.wwr import extract_wwr_jobs from file import save_to_file app = Flask(\u0026#34;JobScrapper\u0026#34;) # Syntax sugar : looks simple, but actually complex behind the scene. No space between function and decorative db = {} @app.route(\u0026#34;/\u0026#34;) def home(): return render_template(\u0026#34;home.html\u0026#34;, name=\u0026#34;hey\u0026#34;) @app.route(\u0026#34;/search\u0026#34;) def search(): keyword = request.args.get(\u0026#34;keyword\u0026#34;) if keyword == None: return redirect(\u0026#34;/\u0026#34;) if keyword in db: jobs = db[keyword] else: jobs = extract_wwr_jobs(keyword) db[keyword] = jobs return render_template(\u0026#34;search.html\u0026#34;, search=keyword, jobs=jobs) @app.route(\u0026#34;/export\u0026#34;) def export(): keyword = request.args.get(\u0026#34;keyword\u0026#34;) if keyword == None: return redirect(\u0026#34;/\u0026#34;) if keyword not in db: return redirect(f\u0026#34;/serach?keyword={keyword}\u0026#34;) save_to_file(keyword, db[keyword]) return send_file(f\u0026#34;{keyword}.csv\u0026#34;, as_attchment=True) app.run(\u0026#34;127.0.0.1\u0026#34;) "
},
{
	"uri": "http://localhost:1313/aws/sst/",
	"title": "SST",
	"tags": [],
	"description": "",
	"content": "SST(Serverless Stack Toolkit) is an open-source framework for building serverless apps. SST converts your infrastructure code into a CloudFormation template.\nhttps://sst.dev/\nInitial Configuration Install npx create-sst@latest [name] Change ts file to js (config, stack, function)\nConfig File sst.config.ts By default, the app will be deployed to the us-east-1 AWS region.\nsst.config.ts \u0026gt; sst.config.js and remove all red lines\nimport { API } from \u0026#34;./stacks/API\u0026#34;;\rexport default {\rconfig(_input) {\r//...\r},\rstacks(app) {\rapp.stack(API);\r}\r} You can change the profile like - add .env\n- .env : AWS_PRPFILE=profilename\n- in sst.config.js, add profile:process.env.AWS_PROFILE\nStack folder App Infrastructure, where you work with APIs, frontend set up file\nRename stacks/MyStack.ts to stacks/ApiStack.js\nimport { Api } from \u0026#34;sst/constructs\u0026#34;; export function API({ stack }) { const api = new Api(stack, \u0026#34;api\u0026#34;, { routes: { \u0026#34;GET /\u0026#34;: \u0026#34;packages/functions/src/lambda.handler\u0026#34;, }, }); stack.addOutputs({ ApiEndpoint: api.url, }); return { api, }; } Lambda Rename lambda.ts to lambda.js in packages/functions/src\nexport async function handler(event, context) {\rreturn {\rstatusCode: 200,\rbody: JSON.stringify({\rtime: \u0026#34;Hey world\u0026#34;\r}),\r};\r} Frontend Install React Do this in the root of your SST app\nVite React yarn create vite frontend --template react\rcd frontend\ryarn add -D sst npx create-react-app frontend\rcd frontend\rnpm add -D sst Update the dev script\nVite React \u0026#34;scripts\u0026#34;: {\r\u0026#34;dev\u0026#34;: \u0026#34;sst env vite\u0026#34;, \u0026#34;scripts\u0026#34;: {\r\u0026#34;dev\u0026#34;: \u0026#34;sst env react-scripts start\u0026#34;, Add the React app to SST Create a new file in stacks/FrontendStack.js\nimport { StaticSite, use } from \u0026#34;sst/constructs\u0026#34;; import { API } from \u0026#34;./ApiStack\u0026#34;; export function FrontendStack({ stack, app }) { const { api } = use(API); const site = new StaticSite(stack, \u0026#34;ReactSite\u0026#34;, { path: \u0026#34;frontend\u0026#34;, buildOutput: \u0026#34;dist\u0026#34;, buildCommand: \u0026#34;yarn build\u0026#34;, environment: { VITE_API_URL: api.customDomainUrl || api.url, }, }); stack.addOutputs({ SiteUrl: site.url || \u0026#34;\u0026#34;, }); } sst.config.js\nimport { API } from \u0026#34;./stacks/ApiStack\u0026#34;; import { FrontendStack } from \u0026#34;./stacks/FrontendStack\u0026#34;; export default { config(_input) { //... }, stacks(app) { app.stack(API).stack(FrontendStack); }, }; Environment Variable from Backend Vite React const apiUrl = import.meta.env.VITE_API_URL; const apiUrl = process.env.REACT_APP_API_URL; Run the app Backend npx sst dev The first time you run this command it’ll ask you for the name of a stage. A stage or an environment is just a string that SST uses to namespace your deployments.\nThis can take a few min for the first time.\nFrontend Vite React cd frontend\nyarn dev cd frontend\nnpm run dev PostgreSQL Connection String .env file\nDATABASE_URL=connection_string Database File Create a new file in packages/core/src/database.js\nimport pg from \u0026#34;pg\u0026#34;; const { Pool } = pg; let pool; function getPool() { if (!pool) { const connectionString = process.env.DATABASE_URL; pool = new Pool({ connectionString, application_name: \u0026#34;\u0026#34;, max: 1, }); } return pool; } export async function getChats() { const res = await getPool().query(` SELECT * FROM chats ORDER BY timestamp DESC `); return res.rows; } export async function createChat(name) { const res = await getPool().query( ` INSERT INTO chats (name) VALUES ($1) RETURNING * `, [name] ); return res.rows[0]; } export async function deleteChat(id) { const res = await getPool().query( ` DELETE FROM chats WHERE id = $1 RETURNING * `, [id] ); return res.rows[0]; } Lambda Create a new Lambda function in packages/functions/src/name.js\nGet\nimport { getChats } from \u0026#34;@your-app-name/core/database\u0026#34;; export async function main(event) { const chats = await getChats(); return { statusCode: 200, body: JSON.stringify({ chats: chats }), }; } Post\nimport { createChat } from \u0026#34;@my-sst-app/core/database\u0026#34;; export async function main(event) { const { name } = JSON.parse(event.body); // Get the chat name from the POST body const chat = await createChat(name); return { statusCode: 200, body: JSON.stringify({ chat: chat }), }; } Delete\nimport { deleteChat } from \u0026#34;@my-sst-app/core/database\u0026#34;; export async function main(event) { const { chatId } = event.pathParameters; // get the chatId from the path parameters await deleteChat(chatId); return { statusCode: 200, body: JSON.stringify({}), }; } You can access the path parameter with event.pathParameters.name\nRoutes Set your routes in ApiStack\nimport { Api, use } from \u0026#34;sst/constructs\u0026#34;; export function ApiStack({ stack, app }) { const api = new Api(stack, \u0026#34;Api\u0026#34;, { defaults: { function: { environment: { DATABASE_URL: process.env.DATABASE_URL, }, }, }, routes: { \u0026#34;POST /chats\u0026#34;: \u0026#34;packages/functions/src/chats/post.main\u0026#34;, \u0026#34;GET /chats\u0026#34;: \u0026#34;packages/functions/src/chats/get.main\u0026#34;, \u0026#34;DELETE /chats/{chatId}\u0026#34;: \u0026#34;packages/functions/src/chats/delete.main\u0026#34;, }, }); stack.addOutputs({ ApiEndpointNotes: api.url, }); return { api, }; } MongoDB Mongoose is not mandatory to use it.\nAddding the API const api = new Api(stack, \u0026#34;Api\u0026#34;, { defaults: { function: { environment: { MONGODB_URI: process.env.MONGODB_URI, }, }, }, routes: { \u0026#34;GET /\u0026#34;: \u0026#34;packages/functions/src/lambda.handler\u0026#34;, }, }); Add MongoDB URI MongoDB Website \u0026gt; Database \u0026gt; Connect \u0026gt; Connect your application\nCopy and paste the connetion string into .env file\nMONGODB_URI=mongodb+srv:// Query Database npm install mongodb mongoose Configure MongoDB Connection (Right above the handler function)\nimport { MongoClient } from \u0026#34;mongodb\u0026#34;; let cachedDb = null; async function connectToDatabase() { if (cachedDb) { return cachedDb; } const client = await MongoClient.connect(process.env.MONGODB_URI); cachedDb = await client.db(\u0026#34;db-name\u0026#34;); return cachedDb; } Query\nexport const handler = async (event, context) =\u0026gt; { context.callbackWaitsForEmptyEventLoop = false; const db = await connectToDatabase(); const result = await db.collection(\u0026#34;collection-name\u0026#34;).insertOne({ data }); return result; }; Mongoose Configure Mongoose. In case of using mongoose, mongoDB is not necessary.\nimport mongoose from \u0026#34;mongoose\u0026#34;; import Word from \u0026#34;@wordbook-m/core/models/Word\u0026#34;; // Schema let cachedDb = null; async function connectToDatabase() { if (cachedDb) { return cachedDb; } cachedDb = await mongoose.connect(process.env.MONGODB_URI); return cachedDb; } Lambda\nawait connectToDatabase(); const doc = await Word.create({ eng, kor }); Schema core/src/model/Name.js\nimport mongoose from \u0026#34;mongoose\u0026#34;; const nameSchema = new mongoose.Schema({ name: { type: String, required: true }, created: { type: Date, required: true, default: Date.now }, obj: { type: mongoose.Schema.Types.ObjectId, ref: \u0026#34;ModelName\u0026#34; }, }); export default mongoose.model(\u0026#34;ModelName\u0026#34;, nameSchema); Deploy Stop local development environment and run the following.\nnpx sst deploy --stage prod Separate environments : Development and Production.\nWhile developing, it doesn\u0026rsquo;t break the production.\n"
},
{
	"uri": "http://localhost:1313/python/selenium/",
	"title": "Selenium",
	"tags": [],
	"description": "",
	"content": "https://www.selenium.dev/ https://selenium-python.readthedocs.io/\nIt is automates browsers. It will actually start the browser. so indeed think we are not a bot.\nInstall pip install selenium\rpip install webdriver_manager https://pypi.org/project/webdriver-manager/\nInitializing from selenium import webdriver from webdriver_manager.chrome import ChromeDriverManager browser = webdriver.Chrome(ChromeDriverManager().install()) browser.get(\u0026#39;http://google.com\u0026#39;) This works too\nfrom selenium import webdriver driver = webdriver.Chrome() driver.get(\u0026#39;url\u0026#39;) # If only you want to prevent closing the browser automatically while (True): pass Detail\nfrom selenium import webdriver from selenium.webdriver.chrome.service import Service from selenium.webdriver.chrome.options import Options from webdriver_manager.chrome import ChromeDriverManager chrome_options = Options() chrome_options.add_experimental_option(\u0026#34;detach\u0026#34;, True) #브라우저 꺼짐 방지 코드 browser = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options = chrome_options) #크롬드라이버를 최신으로 유지해줍니다. https://goddino.tistory.com/353\nwrite code without thinking refactor and clean "
},
{
	"uri": "http://localhost:1313/aws/sst-auth/",
	"title": "SST &amp; Auth",
	"tags": [],
	"description": "",
	"content": "Backend Add Auth to both ApiStack and FrontendStack\nApiStack.js Add Cognito, auth, authorizers, default authorizer\nOnce it\u0026rsquo;s all set, you are not allowed to change any configs. (need to delete every stacks to re-do it)\nimport { Api, Cognito } from \u0026#34;sst/constructs\u0026#34;; export function ApiStack({ stack }) { // Create auth provider const auth = new Cognito(stack, \u0026#34;Auth\u0026#34;, { login: [\u0026#34;email\u0026#34;], // login: [\u0026#34;email\u0026#34;, \u0026#34;username\u0026#34;], }); // Adjust the API const api = new Api(stack, \u0026#34;Api\u0026#34;, { authorizers: { jwt: { type: \u0026#34;user_pool\u0026#34;, userPool: { id: auth.userPoolId, clientIds: [auth.userPoolClientId], }, }, }, defaults: { authorizer: \u0026#34;jwt\u0026#34;, }, routes: { \u0026#34;POST /private\u0026#34;: \u0026#34;packages/functions/src/lambda.handler\u0026#34;, \u0026#34;GET /public\u0026#34;: { function: \u0026#34;packages/functions/src/lambda.handler\u0026#34;, authorizer: \u0026#34;none\u0026#34;, }, }, }); // Allow authenticated users invoke API auth.attachPermissionsForAuthUsers(stack, [api]); stack.addOutputs({ ApiEndpoint: api.url, UserPoolId: auth.userPoolId, IdentityPoolId: auth.cognitoIdentityPoolId ?? \u0026#34;\u0026#34;, UserPoolClientId: auth.userPoolClientId, }); return { api, auth, }; } FrontendStack.js Add auth, Environment variables\nimport { StaticSite, Api, Auth, use } from \u0026#34;sst/constructs\u0026#34;; import { API } from \u0026#34;./MyStack\u0026#34;; export function FrontendStack({ stack, app }) { const { api, auth } = use(API); const site = new StaticSite(stack, \u0026#34;ReactSite\u0026#34;, { path: \u0026#34;frontend\u0026#34;, buildOutput: \u0026#34;dist\u0026#34;, buildCommand: \u0026#34;yarn build\u0026#34;, // Pass in our environment variables environment: { VITE_APP_API_URL: api.url, VITE_APP_REGION: app.region, VITE_APP_USER_POOL_ID: auth.userPoolId, VITE_APP_USER_POOL_CLIENT_ID: auth.userPoolClientId, VITE_APP_IDENTITY_POOL_ID: auth.cognitoIdentityPoolId ?? \u0026#34;\u0026#34;, }, }); // Show the url in the output stack.addOutputs({ SiteUrl: site.url || \u0026#34;\u0026#34;, }); } Lambda You can access the logged in user’s username and sub (id) from the event object.\nexport async function handler(event: any, context: any) { const sub = event.requestContext.authorizer?.jwt.claims.sub; const username = event.requestContext.authorizer?.jwt.claims.username; return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Hello world!\u0026#34;, sub, username, }), }; } Use this to store the user’s id in the database when they create a new item.\nFrontend cd into frontend\nyarn add aws-amplify Configure Amplify import { Amplify } from \u0026#34;aws-amplify\u0026#34;; const amplifyConfig = { Auth: { mandatorySignIn: false, region: import.meta.env.VITE_APP_REGION, userPoolId: import.meta.env.VITE_APP_USER_POOL_ID, userPoolWebClientId: import.meta.env.VITE_APP_USER_POOL_CLIENT_ID, }, API: { endpoints: [ { name: \u0026#34;api\u0026#34;, endpoint: import.meta.env.VITE_APP_API_URL, region: import.meta.env.VITE_APP_REGION, }, ], }, }; Amplify.configure(amplifyConfig); Register import { Auth } from \u0026#34;aws-amplify\u0026#34;; Auth.signUp({ username: email, password, }) .then(() =\u0026gt; {}) .then((err) =\u0026gt; err.message); Verification Auth.confirmSignUp(email, code) .then((res) =\u0026gt; { console.log(res); }) .catch((err) =\u0026gt; setError(err.message)); Login Auth.signIn(email, password) .then(() =\u0026gt; {}) .catch((err) =\u0026gt; setError(err.message)); Header Authorization headers: { Authorization: `Bearer ${(await Auth.currentSession()).getAccessToken().getJwtToken()}`, }, Auth Class https://aws-amplify.github.io/amplify-js/api/classes/authclass.html\nAuth with UI yarn add aws-amplify @aws-amplify/ui-react aws-amplify : for aws ui-react : auto ui style vite.config.js export default defineConfig({ plugins: [react()], define: { global: {}, }, }); or global:\u0026quot;window\u0026quot;\nConfigure auth Ususally configure where the routers are. (App.jsx)\nimport { BrowserRouter, Link, Route, Routes } from \u0026#34;react-router-dom\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import RouteGuard from \u0026#34;./RouteGuard\u0026#34;; import Login from \u0026#34;./Login\u0026#34;; import Home from \u0026#34;./Home\u0026#34;; const amplifyConfig = { Auth: { mandatorySignIn: false, region: import.meta.env.VITE_APP_REGION, userPoolId: import.meta.env.VITE_APP_USER_POOL_ID, userPoolWebClientId: import.meta.env.VITE_APP_USER_POOL_CLIENT_ID, // identityPoolId: import.meta.env.VITE_APP_IDENTITY_POOL_ID, }, API: { endpoints: [ { name: \u0026#34;api\u0026#34;, endpoint: import.meta.env.VITE_APP_API_URL, region: import.meta.env.VITE_APP_REGION, }, ], }, }; Amplify.configure(amplifyConfig); export default function App() { return ( \u0026lt;Authenticator.Provider\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;main\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={ \u0026lt;RouteGuard\u0026gt; \u0026lt;Home /\u0026gt; \u0026lt;/RouteGuard\u0026gt; } /\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;Login /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/Authenticator.Provider\u0026gt; ); } How to use import import { Auth, API } from \u0026#34;aws-amplify\u0026#34;; import { useAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34; export default function Home() { const { user, signOut } = useAuthenticator((context) =\u0026gt; [context.user]); Route guard import { Navigate } from \u0026#34;react-router-dom\u0026#34;; import { useAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; function RouteGuard({ children }) { const { route } = useAuthenticator((context) =\u0026gt; [context.route]); if (route == \u0026#34;idle\u0026#34;) { return \u0026lt;\u0026gt;\u0026lt;/\u0026gt;; } if (route !== \u0026#34;authenticated\u0026#34;) { return \u0026lt;Navigate to=\u0026#34;/login\u0026#34; /\u0026gt;; } return children; } export default RouteGuard; Login with ui import { useAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import { Navigate } from \u0026#34;react-router-dom\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; export default function Login() { const { route } = useAuthenticator((context) =\u0026gt; [context.route]); if (route == \u0026#34;idle\u0026#34;) { return \u0026lt;\u0026gt;\u0026lt;/\u0026gt;; } if (route == \u0026#34;authenticated\u0026#34;) { return \u0026lt;Navigate to=\u0026#34;/\u0026#34; /\u0026gt;; } return \u0026lt;Authenticator signUpAttributes={[\u0026#34;email\u0026#34;]} /\u0026gt;; } "
},
{
	"uri": "http://localhost:1313/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "Frontend Introduction : Install, Basic, Operators, Errors HTML, CSS Sass Bootstrap Tailwind "
},
{
	"uri": "http://localhost:1313/xtc/work/",
	"title": "Work",
	"tags": [],
	"description": "",
	"content": "Less file CSS file Both Less and Sass are popular CSS preprocessor languages that extend the capabilities of CSS. While they share similar goals and functionalities, there are some differences between the two:\nSyntax: Less uses a syntax that is similar to traditional CSS with the addition of some extra features. It uses curly braces ({}) and semicolons (;) for defining blocks and statements. On the other hand, Sass has two syntax options: Sass (indented syntax) and SCSS (Sassy CSS). The Sass syntax omits curly braces and semicolons, relying on indentation for block and statement separation, while SCSS uses curly braces and semicolons like traditional CSS.\nCompiler compatibility: Less has a JavaScript-based compiler that runs in the browser or on the server-side using Node.js. Sass, on the other hand, has a Ruby-based compiler called Ruby Sass, as well as a newer implementation called LibSass, which is written in C and has bindings for various programming languages.\nCommunity and ecosystem: Both Less and Sass have large and active communities, with plenty of resources, tutorials, and frameworks available. However, Sass has historically enjoyed broader adoption and has a more extensive ecosystem. Many popular CSS frameworks, such as Bootstrap, Foundation, and Bulma, offer Sass versions or Sass-based tooling.\nFeature differences: While both Less and Sass provide similar core features like variables, mixins, nesting, and functions, they may differ in syntax and specific implementations. For example, Sass has more advanced features like control directives (if/else, loops), which can be useful for complex style generation.\nChoosing between Less and Sass often comes down to personal preference or project requirements. If you\u0026rsquo;re already familiar with one of them, it may make sense to stick with that choice. However, if you\u0026rsquo;re starting a new project, you might consider factors such as community support, integration with existing tools, and the ecosystem around each preprocessor to make an informed decision.\nTrust the IIS Express SSL certificate ?? What the heck\n"
},
{
	"uri": "http://localhost:1313/xtc/angular/",
	"title": "Angular.js",
	"tags": [],
	"description": "",
	"content": "Framework Angular "
},
{
	"uri": "http://localhost:1313/xtc/vue/",
	"title": "Vue.js",
	"tags": [],
	"description": "",
	"content": "Framework VUE "
},
{
	"uri": "http://localhost:1313/xtc/",
	"title": "ETC",
	"tags": [],
	"description": "",
	"content": "Theme Link https://learn.netlify.app/en/shortcodes/\nInstall Hugo Windows Download Prebuilt Binary https://gohugo.io/installation/windows/\nDownload windows-amd-64.zip\nAdd PATH environment Variable System \u0026gt; Advanced system settings \u0026gt; Advanced \u0026gt; Environment Variables\r\u0026#39;Path\u0026#39; under the both User variables and System variables Install Hugo Learn Theme Download the zip and paste into the theme folder\nhttps://learn.netlify.app/en/basics/installation/\nMAC Create new project hugo new site \u0026lt;new_project\u0026gt; Start the app hugo server Apply the learn them https://learn.netlify.app/en/basics/installation/\nDownload the zip file and paste to the theme folder\nModify the configuration file config.toml\n# Change the default theme to be use when building the site with Hugo\rtheme = \u0026#34;hugo-theme-learn\u0026#34;\r# For search functionality\r[outputs]\rhome = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Start the project hugo server Heading H1 H2 h3 Lines Text Style bold italic cross\nquote I want a quote!\nsad.. sago\nList exam pleple tab tab! (twice) what tab hoho what code \u0026lt;tag\u0026gt;this is code\u0026lt;/tag\u0026gt;\n\u0026lt;html\u0026gt;\rline 1 of code\rline 2 of code\rline 3 of code\r\u0026lt;/html\u0026gt; const aa = \u0026#34;string\u0026#34;; .class { background-color: \u0026#34;pink\u0026#34;; } for a in b instead of js, you can use json, c#, go, html, css, sql, typescript, kotlin, javascript php, scss, swift, python,,,,, Tables header header aa bb cc dd Link Assemble\nImage Tab View python R Bash print(\u0026#34;Hello World!\u0026#34;) This is R\n\u0026gt; print(\u0026#34;Hello World!\u0026#34;) echo \u0026#34;Hello World!\u0026#34; Accordian Is this learn theme rocks ? Yes !. Note A notice disclaimer\nAn information disclaimer\nA tip disclaimer\nA warning disclaimer\nblue, pink, cyan, green, orange, indigo\rblue, pink, cyan, green, orange, indigo\rYou can add tags inside vbox, hbox\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Hello! "
},
{
	"uri": "http://localhost:1313/frontend/css/etc/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Background Image background-image: url(\u0026#34;https://res.cloudinary.com/synicsoftware/image/upload/v1686090524/Group_237597_elwuut.svg\u0026#34;); background-position: center; background-size: contain; background-repeat: no-repeat; position: center, top, left, center, bottom size: contain, cover, or specific size\u0026hellip; "
},
{
	"uri": "http://localhost:1313/javascript/scrap/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "https://velog.io/@mowinckel/%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%EA%B3%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\nhttps://modulabs.co.kr/blog/crawling-tips/\nhttps://toyou101.tistory.com/4\nCheck the website policy url/robots.txt\n"
},
{
	"uri": "http://localhost:1313/xtc/josh/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "React ✅ Course Overview SSD28-React-Course-Overview.dox Dev Setup Emmet for React\nES7+ React/Redux Snippets Extension\nReact Dev Tools for Chrome\nLesson Demos - Node Modules\nDay 01 Day 01 Agenda\nIntro to React\nWhat is React Why Use React The React World View Create React App\nCreate React App Using Create React App Create React App Folder Structure Exercise 1a: Create \u0026ldquo;To Do List\u0026rdquo; App JSX\nWhat is JSX JSX Syntax Rules and Best Practices Commenthing in JSX JSX Expressions Conditional Rendering in JSX Iteration in JSX - Working with Arrays Exercise 1b: Intro to JSX Events in React\nReact Event Handling React Event Listeners Exercise 1c: Listen for Refreshment Clicks Data Binding and State\nData Binding and State Overview Using State in a React Component Exercise 1d: Tracking our User in State Day 02 What Are Components\nClass vs Functional Components\nCreating a Functional Component\nFunctional Component Shorthand\nAdding Components to Your App\nImporting and Exporting - React Components\nImporting and Exporting - JS Modules\nPassing Data via React Props\nReceiving Data from Props\nDefault Props\nNesting Components\nNesting Unknown Child Components\nReact useEffect Hook\nFetching Data - Simple Example\nProfiles API Example\nDay 03 Passing Data to Parent Components\nPassing Data Up Via Functions\nReceiving Function\nCalling the Receiving Function\nThe Relative Path Problem with Images\nImporting or Requiring Image Data\nUsing NodeJS to Construct Image Paths\nCSS Background Images in React\nAdding CSS to a React App\nImporting CSS files\nInline Styles in a React App\nCSS Modules\nImporting CSS Modules\nReact CSS Frameworks\nDay 04 Lab\nDay 05 3rd Party Components Overview\nReact Tabs\nReact Router Intro\nReact Routing Syntax\nReact Router NavLink\nReact Router Link Component\nSetting Document Title\nReact URL Parameters\nReact Mobile Nav\nDay 06 Issues with Props\nOptions for Global State Mgmt\nReact Context API Context API Hooks\nUpdating State with Reducers\nuseReducer Example\ncreateContext and useContext\nRedux Redux \u0026amp; Redux Toolkit Intro\nRedux Slices\nRedux Store\nReading \u0026amp; Setting State - The Redux Way\nAdding More Slices\nGlobal State Wrap Up\nLocal Storage Overview\nObjects and Arrays in localStorage\nLocal Storage with React-Redux\nReact Overflow Deploying to SiteGround - Domain Root\nDeploying a Routed App\nDeploying to a Subdirectory\nDeploying to GitHub Pages\nNode.js ✅ Dev Setup Installing Node\nNode VSCode Extensions\nGit\nPostman\nDay 01 Git, Node Basics Node - Day 01 - Agenda\nDay 01 - Git Repository\nVersion Control\nManual Version Control\nVersion Control Software\nInstalling Git\nGit Setup\nInitializing a Project for Git\nHow Git Tracks Changes\nChecking Status\nAdding Files to a Repo\nExcluding Files and Folders\nCommitting Changes\nGitHub\nCreate a GitHub Repo\nClone a Github Repo\nTrack a Remote Repo\nGit Push\nGit Pull\nGit Branches\nCreating Branches\nMerging Branches\nGithub for Collaboration\nOrganizing Tasks with Issues\nGit Learning Resources\nRolling Back and Comparing Versions\nHello Node What is Node.js\nNode.js vs JavaScript in the browser\nThe Node Global Object\nNode Package Manager\nBuild: Hello Node\nRunning Hello Node\nNodemon for Hot Reloading\nDebugging Node Programs\nCore Node Modules\nWorking with HTTP\nLoading Modules the Common JS way\nWorking with the File System (fs)\nDay 02 Express \u0026amp; EJS Express Intro\nBasic Express Server Setup\nExpress Route Handling\nNamed Route Parameters\nQuery Strings\nMatching by HTTP Method\nUnhandled Routes\nModularizing our Routes\nSending Files as Responses\nWorking with Paths\nSending Responses as JSON\nThe Middleware Stack\nLogging with Morgan\nServing Static Files\nBody Parser\nEJS Template Engines - Intro\nSetting the View Engine\nRendering Views\nEJS - Creating Dynamic Views\nVSCode EJS Formatting\nPassing Data into Views\nPartial Views\nEJS Layouts\nDay 03 Lab Day 04 What is MongoDB\nMongoDB Setup/Installation\nMongoDB Atlas Setup\nConnect to Atlas Cluster\nMongoDB Shell - Basic Commands\nConnecting to MongoDB with Node.js\nODM with Mongoose\nMongoose with Express and EJS\nIsolating our Database Logic\nUpdating our Router to use the Controller\nUpdating App.js\nFinding a Document by Id\nCreating a New Profile\nDeleting a Profile\nUpdating a Document\nDay 05 Auth Overview\nAuthentication with Passport.js\nBoilerplate Setup\nBasic Server and DB setup\nUser Model\nUserOps\nRequestService Helper Class\nMain Layout and Home Page Setup\nRegistration Form and Handling\nLogin Form and Handling\nLogout Handling\nCookies Cookies Overview\nCookie CRUD\nCookie Demo\nSessions Sessions Overview\nStoring and Reading Session Data\nStoring Sessions in MongoDB\nUser Roles Role Based Authorization\nAdding Roles to our User Schema\nRedirecting to User Profile on Login\nUpdating UserOps\nUpdate our Request Helper\nUser Profile View\nUpdate Navigation in Main Layout\nRestricting Access to the Admin Area\nRestricting Access to Manager Area\nControlling Access Within a Page\nDay 06 Handling Related Data in MongoDB\nEmbedding Documents\nOO PHP \u0026amp; Laravel Angular / Vue jQuery ✅ What is jQuery\nHow to include jQuery\n$ is a function (jQuery)\n$(document).ready()\nDOM selection, the jQuery way\njQuery DOM traversal\nChaining jQuery methods\njQuery DOM Manipulation\njQuery CSS manipulation\njQuery (CSS) Class Manipulation\njQuery Practice Exercise\njQuery Event Handling\nthis, target, and currentTarget\njQuery Core Effects\njQuery .animate()\nBootstrap ✅ What is Bootstrap\nIncluding Bootstrap\nBootstrap Navbar\nBootstrap Buttons\nBootstrap Tabs\nBootstrap Accordions\nBootstrap Modals\nDocker ✅ What is Docker\nContainerization vs Virtualization\nDocker Getting Started Tutorial\nDocker Images\nDocker Containers\nDockerfile\nExpress In A Box\n.dockerignore\nRunning our Container from the new Image\nDocker Images, Layers \u0026amp; Caching\nDocker Volumes\nDocker Compose\nPractice Exercise - Containerize your CC Project\nGulp ✅ About Gulp\nWhy Use A Task Runner\nAlternatives to Gulp\nGulp Setup\nInstalling Node\nInstalling the Gulp CLI\nSet up a Project Folder\nInitialize Your Project with NPM\nInstall Gulp Locally\nThe gulpfile\nHello Gulp World\nRunning Our Gulp Task in the Command Line\nHow Gulp Works\nAnatomy of a Gulp Task\nExporting Your Tasks\nExample Exported Gulp Tasks\nFinding Gulp Plugins\nGulp for FWD example - setup and package installs\nReady, Set, Gulp!\nAdditional Resources fix-npm-permission-errors-and-gulp-install-on-mac\nbcit-computers-npm-fix\nFixing NPM permissions errors\nExplaining Globs\nGulp v4 Sass and Browser Sync Setup\nGulp 4 Sass and JS walkthrough\nAndroid Dev with Kotlin ✅ Software Install Installing Android Studio\nDay 1 What is Kotlin\nKotlin Basics\nKotlin Functions\nJetpack Compose\nNew Project - Empty Compose Activity\nExploring MainActivity.kt\nStyling our Greeting\nRunning in the Android Emulator\nRunning on a Physical Device\nBirthday Card App\nInitialize a new Birthday Card Project\nAdd a Composable\nSetting Font Size\nAdd another Text Composable\nSetting UI Layout\nAdding Images\nScaling the Image\nAlign and Arrange the Text\nExtras\nCreating a Virtual Device\nRun Your App in the Emulator\nRunning Apps on a Physical Device\nDay 2 Conditional Statements\nWhen Statements\nIf/Else and When Expressions\nNullability\nCreate a Die Roller Project\nUsing Git with Android Studio\nEnable Auto Imports\nPrepare the App Skeleton\nAdd a Roll Button\nAdd Dice Images as Drawable Resources\nAdding Interactivity\nComplete Die Roller Code\nRunning the Debugger\nAndroid the Old(er) Way Hello Android\nExploring the Initial Project\nThe Basic Activity Template\nThe Layout Editor\nThe Component Tree\nWorking with Colour Resources\nString Resources\nLayout Properties\nLayout Constraints\nUpdating Components\nPractice - Add a Third Button\nCleaning up the Appearance\nShowing a Toast (Popup)\nMake the Count Button Interactive\nLogging Data\nNavigating Between Fragments\nPassing Arguments\nDay 3 Project Setup - Tip Calculator\nUI Setup\nAdd a TextField\nStore the ServiceCost in State\nCleanup the UI and Use Number Keyboard\nTip Calculation Logic\nDisplaying the Tip Amount\nTip Calculator Complete\nDay 4 Kotlin Arrays\nLists and Mutable Lists\nSets\nMaps\nScrollable List Setup\nCreate a Data Class\nDefine a CharacterCard Composable\nCreate the Character List Composable\nLoad and Display the Characters\nReact Native ✅ Software Installs for React Native\nIntro to React Native\nHello React Native\nReact Native Loops\nReact Native State\nTextInput with State\nHandling Pixel Density\nScrollable Lists with FlatList\nSelectable FlatList Items\nReact Native Radio Buttons\nStack Navigation Intro\nReact Navigation Setup\nNavigating Between Screens\nScreen Options and Title\nRouting with Params\nNested Navigators\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/react/fetch/",
	"title": "Data Fetching",
	"tags": [],
	"description": "",
	"content": "Fetch Get await fetch(api, { method: \u0026#34;GET\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Authorization: token, }, body: JSON.stringify(dataObject), }).then((res) =\u0026gt; res.json()); Post/Put await fetch(api, { method: \u0026#34;POST\u0026#34;, //or PUT headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Authorization: token, }, body: JSON.stringify(dataObject), }).then((res) =\u0026gt; res.json()); Delete await fetch(api, { method: \u0026#34;DELETE\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Authorization: token, }, body: JSON.stringify(dataObject), }).then((res) =\u0026gt; res.json()); Axios Get await axios .get(api, { headers: { Authorization: token, }, params: { param1, }, }) .then((res) =\u0026gt; { setData(res.data); }) .catch((err) =\u0026gt; setError(err)); Post/Put await axios .put(api, dataObject, { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Authorization: token, }, }) .then((res) =\u0026gt; res.data) .catch((err) =\u0026gt; setError(err)); Delete Axios can\u0026rsquo;t accept body. Use params to send the data with delete request\nawait axios .delete(api, { headers: { Authorization: token, }, }) .then((res) =\u0026gt; res.data) .catch((err) =\u0026gt; setError(err)); axios return : return.data "
},
{
	"uri": "http://localhost:1313/react/pagination/",
	"title": "Pagination",
	"tags": [],
	"description": "",
	"content": "Terms Total : Total length of data Limit (pageSize) : number of items per page Page : current page number Offset : index of first item of the page (offset = (page - 1) * limit) Pagination interacting with Backend states : page, pageSize(or limit), total\nadd offset only when you not with database side pagination\nData Fetching axios.get(api, { headers: { Authorization: token, }, params: { page: page, pageSize: pageSize, searchTerm: searchTerm, }, }); Backend const getData = async (event) =\u0026gt; { const { page, pageSize, searchTerm } = event.queryStringParameters; const offset = (page - 1) * pageSize; const limit = parseInt(pageSize, 10); const result = await db.getData(userId, searchTerm, offset, limit); return result; }; Database export const getAll = async (search, offset, limit) =\u0026gt; { const query = { text: ` SELECT * FROM table_name WHERE column_name ILIKE $1 OFFSET $2 LIMIT $3 `, values: [`%${search}%`, offset, limit], }; const result = await pool.query(query); return result; }; Pagination component export default const Pagination = ({ total, limit, page, setPage }) =\u0026gt; { const totalPages = Math.ceil(total / limit); return ( \u0026lt;div className=\u0026#34;pagination\u0026#34;\u0026gt; \u0026lt;button className=\u0026#34;arrow\u0026#34; onClick={() =\u0026gt; setPage(1)} disabled={page === 1}\u0026gt; \u0026lt;\u0026lt; \u0026lt;/button\u0026gt; \u0026lt;button className=\u0026#34;arrow\u0026#34; onClick={() =\u0026gt; setPage(page - 1)} disabled={page === 1}\u0026gt; \u0026lt; \u0026lt;/button\u0026gt; \u0026lt;div className=\u0026#34;pages\u0026#34;\u0026gt; {Array(totalPages) .fill() .map((_, i) =\u0026gt; ( \u0026lt;button className=\u0026#34;page\u0026#34; key={i + 1} onClick={() =\u0026gt; setPage(i + 1)} aria-current={page === i + 1 ? \u0026#34;page\u0026#34; : null} \u0026gt; {i + 1} \u0026lt;/button\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;button className=\u0026#34;arrow\u0026#34; onClick={() =\u0026gt; setPage(page + 1)} disabled={page === totalPages}\u0026gt; \u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button className=\u0026#34;arrow\u0026#34; onClick={() =\u0026gt; setPage(totalPages)} disabled={page === totalPages}\u0026gt; \u0026gt;\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; Pagination.defaultProps = { total: 0, limit: 100, page: 1, setPage: 1, }; Static Data data.slice(offset, offset + pageSize).map()... Slice the map (offset, offset + limit) https://www.daleseo.com/react-pagination/ https://codesandbox.io/s/react-pagination-qqrdf?from-embed=\u0026amp;file=/src/Pagination.jsx\n"
},
{
	"uri": "http://localhost:1313/react/react/",
	"title": "react",
	"tags": [],
	"description": "",
	"content": "why dev mode render twice in react In React, the development mode by default renders components twice. This is done intentionally to detect any unintended side-effects or changes that might occur during the render process.\nDuring the first render cycle, React builds a virtual representation of the component tree and compares it with the previous render cycle. If there are any differences, it updates the real DOM accordingly.\nThen, during the second render cycle, React compares the new and old virtual trees again to check if there were any changes made during the update process. This helps ensure that the updates are applied correctly, and it also helps identify any potential issues with the components or the rendering process.\nIt\u0026rsquo;s worth noting that this behavior only occurs in development mode, and not in production mode, where the rendering process is optimized for performance.\n"
},
{
	"uri": "http://localhost:1313/react/3-state/",
	"title": "Statement Management",
	"tags": [],
	"description": "",
	"content": "Passing data from child to parent component Context API Create Context import { createContext } from \u0026#34;react-router-dom\u0026#34;; const CounterContext = createContext(initialState); function CounterProvider({ children }) { return \u0026lt;CounterContext.Provider\u0026gt;{children}\u0026lt;/CounterContext.Provider\u0026gt;; } Index.js or App.js \u0026lt;CounterProvider value={(a, b)}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/CounterProvider\u0026gt; Reading import { useContext } from ‘react’; import { CounterContext } from ‘..path’; const { a, b } = useContext(CounterContext); "
},
{
	"uri": "http://localhost:1313/react/table/",
	"title": "Table",
	"tags": [],
	"description": "",
	"content": "import React from \u0026#34;react\u0026#34;; import { useTable, usePagination } from \u0026#34;react-table\u0026#34;; export default function Table({ rawColumns, rawData }) { // Memoize the props const columns = React.useMemo(() =\u0026gt; rawColumns, []); const data = React.useMemo(() =\u0026gt; rawData, [rawData]); // States const { getTableProps, getTableBodyProps, headerGroups, prepareRow, page, // Instead of using \u0026#39;rows\u0026#39;, we\u0026#39;ll use page, canPreviousPage, canNextPage, pageOptions, pageCount, gotoPage, nextPage, previousPage, setPageSize, state: { pageIndex, pageSize }, } = useTable( { columns, data, initialState: { pageIndex: 1, pageSize: 10 }, }, usePagination ); // Table + styles return ( \u0026lt;\u0026gt; {/* Table */} \u0026lt;table {...getTableProps()}\u0026gt; \u0026lt;thead\u0026gt; {headerGroups.map((headerGroup) =\u0026gt; ( \u0026lt;tr {...headerGroup.getHeaderGroupProps()} className=\u0026#34;bg-blue-300\u0026#34;\u0026gt; {headerGroup.headers.map((column) =\u0026gt; ( \u0026lt;th {...column.getHeaderProps()} className=\u0026#34;p-2\u0026#34;\u0026gt; {column.render(\u0026#34;Header\u0026#34;)} \u0026lt;/th\u0026gt; ))} \u0026lt;/tr\u0026gt; ))} \u0026lt;/thead\u0026gt; \u0026lt;tbody {...getTableBodyProps()}\u0026gt; {page.map((row, i) =\u0026gt; { prepareRow(row); return ( \u0026lt;tr {...row.getRowProps()}\u0026gt; {row.cells.map((cell) =\u0026gt; { return ( \u0026lt;td {...cell.getCellProps()} className=\u0026#34;p-2\u0026#34;\u0026gt; {cell.render(\u0026#34;Cell\u0026#34;)} \u0026lt;/td\u0026gt; ); })} \u0026lt;/tr\u0026gt; ); })} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; {/* Pagination */} \u0026lt;div className=\u0026#34;pagination borders w-full\u0026#34;\u0026gt; \u0026lt;button onClick={() =\u0026gt; gotoPage(0)} disabled={!canPreviousPage} className=\u0026#34;border\u0026#34;\u0026gt; {\u0026#34;\u0026lt;\u0026lt;\u0026#34;} \u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; previousPage()} disabled={!canPreviousPage}\u0026gt; {\u0026#34;\u0026lt;\u0026#34;} \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt; Page{\u0026#34; \u0026#34;} \u0026lt;strong\u0026gt; {pageIndex + 1} of {pageOptions.length} \u0026lt;/strong\u0026gt;{\u0026#34; \u0026#34;} {pageOptions.map((i) =\u0026gt; ( \u0026lt;button className=\u0026#34;borders\u0026#34; onClick={() =\u0026gt; gotoPage(i)}\u0026gt; {i + 1} \u0026lt;/button\u0026gt; ))} \u0026lt;/span\u0026gt; \u0026lt;button onClick={() =\u0026gt; nextPage()} disabled={!canNextPage}\u0026gt; {\u0026#34;\u0026gt;\u0026#34;} \u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; gotoPage(pageCount - 1)} disabled={!canNextPage} className=\u0026#34;border\u0026#34;\u0026gt; {\u0026#34;\u0026gt;\u0026gt;\u0026#34;} \u0026lt;/button\u0026gt; \u0026lt;span\u0026gt; Page{\u0026#34; \u0026#34;} \u0026lt;strong\u0026gt; {pageIndex + 1} of {pageOptions.length} \u0026lt;/strong\u0026gt;{\u0026#34; \u0026#34;} \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; | Go to page:{\u0026#34; \u0026#34;} \u0026lt;input type=\u0026#34;number\u0026#34; defaultValue={pageIndex + 1} onChange={(e) =\u0026gt; { const page = e.target.value ? Number(e.target.value) - 1 : 0; gotoPage(page); }} style={{ width: \u0026#34;100px\u0026#34; }} /\u0026gt; \u0026lt;/span\u0026gt;{\u0026#34; \u0026#34;} {/* Select Page */} \u0026lt;select value={pageSize} onChange={(e) =\u0026gt; { setPageSize(Number(e.target.value)); }} \u0026gt; {[10, 20, 30, 40, 50].map((pageSize) =\u0026gt; ( \u0026lt;option key={pageSize} value={pageSize}\u0026gt; Show {pageSize} \u0026lt;/option\u0026gt; ))} \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); } "
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/react/useeffect/",
	"title": "Use Effect",
	"tags": [],
	"description": "",
	"content": "React useEffect Hook 컴포넌트가 렌더링 될 때 특정 작업을 실행할 수 있도록 하는 react hook. useEffect handles side effect code to keep track of outside react code (Put side-effect code inside useEffect) Side-effect : Code outside React such as browser APIs, localStorage, native DOM Syntax : useEffect( call back function, dependency array ) Call back function It contains side-effect code (whatever you want to execute) Dependency array If the array is empty, useEffect will run once after initial render If props or state are passed as an array, it will run any time they changes Setting Document Title useEffect(() =\u0026gt; { document.title = `About`; }, []); without going to detail, let user see the graph?\nuseTable columns\nrequired must be memoized the core columns configuration object for the entire table nested colmun available data\nrequired must be memoized What is Memoization? In programming, memoization is an optimization technique that makes applications more efficient and hence faster.\nIt does this by storing computation results in cache, and retrieving that same information from the cache the next time it\u0026rsquo;s needed instead of computing it again.\nIn simpler words, it consists of storing in cache the output of a function, and making the function check if each required computation is in the cache before computing it.\nA cache is simply a temporary data store that holds data so that future requests for that data can be served faster.\nIn React, we can optimize our application by avoiding unnecessary component re-render using memoization.\ncomponents re-render because of two things: a change in state or a change in props. This is precisely the information we can \u0026ldquo;cache\u0026rdquo; to avoid unnecessary re-renders.\nReact.memo(Component or array) various application -\u0026gt;\nI\u0026rsquo;ve built : 디테일하게 적기, 유명한거 적기\n이름 발음 보단 프로젝트를 올리기\n프로젝트 : 3개\n"
}]