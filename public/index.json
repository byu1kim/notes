[
{
	"uri": "http://example.org/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": "Cloud Amazon Web Services BCIT SSD AWS 2023\nEC2 Intances S3 Bucket JSON Web Token Serverless SST "
},
{
	"uri": "http://example.org/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Heading hah hoho hoho Lines What hahahaha bold italic what happen\nquote I want a quote!\nsad.. sago\nList exam pleple tab tab! (twice) what tab hoho what code \u0026lt;tag\u0026gt;this is code\u0026lt;/tag\u0026gt;\n\u0026lt;html\u0026gt; // hoho line 1 of code line 2 of code line 3 of code \u0026lt;/html\u0026gt; const aa = \u0026#34;string\u0026#34;; .class { background-color: \u0026#34;pink\u0026#34;; } for a in b instead of js, you can use json, c#, go, html, css, sql, typescript, kotlin, javascript php, scss, swift, python,,,,, Tables link Assemble\nImag Tab View python R Bash print(\u0026#34;Hello World!\u0026#34;) \u0026gt; print(\u0026#34;Hello World!\u0026#34;) echo \u0026#34;Hello World!\u0026#34; Accordian Is this learn theme rocks ? Yes !. Note A notice disclaimer\nInfo An information disclaimer\nTip A tip disclaimer\nWarning A warning disclaimer\n"
},
{
	"uri": "http://example.org/basics/ch1.md/",
	"title": "Chap.1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/aws/1_ec2.md/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/aws/1_ec2.md/2-ejs-node/",
	"title": "EJS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/frontend/html-css/",
	"title": "HTML/CSS",
	"tags": [],
	"description": "",
	"content": "Haha "
},
{
	"uri": "http://example.org/aws/4_serverless.md/1-lambda/",
	"title": "Lambda Function",
	"tags": [],
	"description": "",
	"content": "Lambda Serverless, event-driven compute service\nServerless Cloud-native development model. Applications without having to manage severs. (Pay what you use) Lambda Function Setup AWS \u0026gt; Lambda \u0026gt; Function \u0026gt; Create function Function name : get/post/put etc Runtime : Lambda function language (Node.js 18.x) Architecture : x86_64 (arm64 is for mobile) Lambda Function mjs : Moduled Javascript (ES6, same as javascript file with type:module in package.json) Hit Deploy \u0026gt; Test Every lambda is triggered by something \u0026hellip; here, test btn is the trigger API Gateway is one of trigger (it is kind of nginx , accept http request) Check console.log : Monitor \u0026gt; CloudWatch Lambda in VSC Configure\nnpm i mysql2 npm init -y : to right our type is module Module [package.json]\n\u0026#34;type\u0026#34; : \u0026#34;module\u0026#34; everything (node module, json files) has to be one file, same path as index.js\n[ index.js ] [ GET ]\nimport mysql from \u0026#39;mysql2\u0026#39; const pool = mysql .createPool({ host: process.env.MYSQLHOST, user: process.env.MYSQLUSER, password: process.env.MYSQLPASSWORD, database: process.env.MYSQLDATABASE, port: process.env.MYSQLPORT || 3306, }) .promise() export const handler = async(event) =\u0026gt; { const [books] = await pool.query(\u0026#34;select \\* from books\u0026#34;); const response = { statusCode: 200, body: JSON.stringify(\u0026#39;Hello from Lambda!\u0026#39;), }; return response; }; [ POST, PUT ] const body = JSON.parse(event.body); ... sql query ... const book = rows[0]; // TODO implement const response = { statusCode: 201, body: JSON.stringify(book), }; [ DELETE ] let id = event?.pathParameters?.id let intId = parseInt(id) ... sql query ... const response = { statusCode: 200, body: JSON.stringify(books), }; Upload to Lambda Compress files (not folder) Back to Lambda \u0026gt; Upload from \u0026gt; .zip file\nTest API Lambda Test or Postman or Curl in Terminal :\ncurl --request POST \\ -- header \u0026#34;content-type:\u0026#34;application/json\u0026#34; \\ --data \u0026#39;{\u0026#34;name\u0026#34; : \u0026#34;White Chicks}\u0026#39; \\ https://url for the post Lambda in ASP.NET Install the lambda template for .net\ndotnet new -i Amazon.Lambda.Templates Create a function\ndotnet new lambda.EmptyFunction --name MyFunction Update the profile and region in aws-lambda-tools-defaults.json ... \u0026#34;profile\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, ... using Amazon.Lambda.RuntimeSupport; var handler = (string input, ILambdaContext context) =\u0026gt; { context.Logger.LogInformation(\u0026#34;Get Request\u0026#34;); context.Logger.LogInformation(input); var response = new APIGatewayHttpApiV2ProxyResponse { StatusCode = (int)HttpStatusCode.OK, Body = \u0026#34;Hello AWS Serverless\u0026#34;, Headers = new Dictionary\u0026lt;string, string\u0026gt; { { \u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34; } } }; return response; }; await LambdaBootstrapBuilder.Create(handler).Build().RunAsync(); From inside the function directory, run the following command to install the runtime support package\ndotnet add package Amazon.Lambda.RuntimeSupport dotnet add package Amazon.Lambda.APIGatewayEvents Test the function locally\ndotnet test MyFunction.Tests/MyFunction.Tests.csproj dotnet tool install -g Amazon.Lambda.Tools "
},
{
	"uri": "http://example.org/aws/1_ec2.md/1-react-node/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/aws/1_ec2.md/3-sql-domain/",
	"title": "SQL, Domain",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/aws/4_serverless.md/2-api/",
	"title": "API Gateway",
	"tags": [],
	"description": "",
	"content": "API Gateway Setup AWS \u0026gt; API Gateway \u0026gt; HTTP API \u0026gt; Build (or Create API) \u0026gt; API name \u0026gt; Review and Create API Gateway \u0026gt; Develop \u0026gt; Routes : Create endpoints (get, post, etc) Dynamic ID ex) get, /book/{id} Click Route \u0026gt; Route details \u0026gt; Attach integration Integration target \u0026gt; Lambda function \u0026gt; Select lambda function you created it for URL : API \u0026gt; invoke URL CORS API Gateway \u0026gt; Develop \u0026gt; CORS access-control-allow-origin : * (only for the get request) access-control-allow-headers : * =\u0026gt; not safe way but just use it for now credentials :no "
},
{
	"uri": "http://example.org/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/aws/2_s3.md/",
	"title": "S3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/frontend/sass/",
	"title": "Sass",
	"tags": [],
	"description": "",
	"content": "Haha "
},
{
	"uri": "http://example.org/frontend/bootstrap/",
	"title": "Bootstrap",
	"tags": [],
	"description": "",
	"content": "Haha "
},
{
	"uri": "http://example.org/aws/4_serverless.md/3-cognito/",
	"title": "Cognito",
	"tags": [],
	"description": "",
	"content": "Cognito import { CognitoUserPool, CognitoUser, AuthenticationDetails, CognitoUserAttribute } from \u0026#34;amazon-cognito-identity-js\u0026#34;; function promisify(func) { return function () { return new Promise((resolve, reject) =\u0026gt; { func.apply(this, [ ...Array.from(arguments), (err, result) =\u0026gt; { if (err) { reject(err); return; } resolve(result); }, ]); }); }; } // Add VITE_USER_POOL_ID, and VITE_USER_POOL_CLIENT_ID to a .env.local file in your project root const poolData = { UserPoolId: process.env.REACT_APP_USER_POOL_ID, ClientId: process.env.REACT_APP_USER_POOL_CLIENT_ID, }; const userPool = new CognitoUserPool(poolData); async function getUserSession() { const user = getCurrentUser(); if (!user) { throw \u0026#34;User not logged in\u0026#34;; return; } const getSession = promisify(user.getSession).bind(user); const session = await getSession(); return session; } /** * Get the JWT needed to authenticate with the API * @returns {Promise\u0026lt;string\u0026gt;} */ export async function getAccessToken() { const session = await getUserSession(); const jwt = session?.accessToken?.jwtToken; return jwt; } /** * Get the currently logged in user * @returns {CognitoUser} */ export function getCurrentUser() { return userPool.getCurrentUser(); } /** This function signs up a user with their email, username and password. It creates an array of CognitoUserAttributes for the user\u0026#39;s email and calls the signUp function from the userPool object. @param {Object} userData - An object containing the user\u0026#39;s email, username and password. @param {string} userData.username - The username to sign up with. @param {string} userData.email - The email to sign up with. @param {string} userData.password - The password to sign up with. @returns {Promise} - A Promise that resolves to the signUp result object. */ export async function signUp({ username, email, password }) { const attributeList = [new CognitoUserAttribute({ Name: \u0026#34;email\u0026#34;, Value: email })]; const cognitoSignUp = promisify(userPool.signUp).bind(userPool); const result = await cognitoSignUp(username, password, attributeList, null); return result; } /** This function confirms a user\u0026#39;s registration using their username, email and code. It creates a CognitoUser object and calls the confirmRegistration function on it. @param {Object} userData - An object containing the user\u0026#39;s username, email and confirmation code. @param {string} userData.username - The username of the user to confirm. @param {string} userData.email - The email of the user to confirm. @param {string} userData.code - The confirmation code to use for confirmation. @returns {Promise} - A Promise that resolves to the confirmRegistration result object. */ export async function confirmUser({ username, email, code }) { const userData = { Username: username, Pool: userPool, }; const cognitoUser = new CognitoUser(userData); const confirm = promisify(cognitoUser.confirmRegistration).bind(cognitoUser); const result = await confirm(code, false); return result; } /** This function signs in a user using their username and password. It creates a CognitoUser object and calls the authenticateUser function on it. @param {Object} userData - An object containing the user\u0026#39;s username and password. @param {string} userData.username - The username of the user to sign in. @param {string} userData.password - The password of the user to sign in. @returns {Promise} - A Promise that resolves to the authenticateUser result object. */ export async function signIn({ username, password }) { return new Promise((resolve, reject) =\u0026gt; { const authData = { Username: username, Password: password, }; const authDetails = new AuthenticationDetails(authData); const userData = { Username: username, Pool: userPool, }; const cognitoUser = new CognitoUser(userData); cognitoUser.authenticateUser(authDetails, { onSuccess: (result) =\u0026gt; { resolve(result); }, onFailure: (error) =\u0026gt; reject(error), }); }); } /** This function signs out the currently signed in user. It retrieves the current user using the getCurrentUser function and calls the signOut function on it. It also removes the access_token and id_token from localStorage. @returns {void} */ export function signOut() { const user = getCurrentUser(); user?.signOut(); localStorage.removeItem(\u0026#34;access_token\u0026#34;); localStorage.removeItem(\u0026#34;id_token\u0026#34;); } /** This function sends a forgot password email to the user\u0026#39;s email address associated with their username. It creates a CognitoUser object and calls the forgotPassword function on it. @param {Object} userData - An object containing the user\u0026#39;s username. @param {string} userData.username - The username of the user to send the forgot password email to. @returns {Promise} - A Promise that resolves to the forgotPassword result object. */ export async function forgotPassword({ username }) { const cognitoUser = new CognitoUser({ Username: username, Pool: userPool, }); return new Promise((resolve, reject) =\u0026gt; { cognitoUser.forgotPassword({ onSuccess: (data) =\u0026gt; { resolve(data); }, onFailure: (err) =\u0026gt; { reject(err); }, }); }); } /** This function resets a user\u0026#39;s password using their username, code and new password. It creates a CognitoUser object and calls the confirmPassword function on it. @param {Object} userData - An object containing the user\u0026#39;s username, confirmation code and new password. @param {string} userData.username - The username of the user to reset the password for. @param {string} userData.code - The confirmation code to use for resetting the password. @param {string} userData.newPassword - The new password to set for the user. @returns {Promise} - A Promise that resolves to the confirmPassword result object. */ export async function resetPassword({ username, code, newPassword }) { const cognitoUser = new CognitoUser({ Username: username, Pool: userPool, }); return new Promise((resolve, reject) =\u0026gt; { cognitoUser.confirmPassword(code, newPassword, { onSuccess: (data) =\u0026gt; { resolve(data); }, onFailure: (err) =\u0026gt; { reject(err); }, }); }); } /** This function attempts to refresh the access token for the currently signed in user. It retrieves the user session using the getUserSession function and calls the refreshSession function on the current user object. If no session is found, it throws an error. @returns {Promise} - A Promise that resolves to the refreshed user session. */ export async function attemptTokenRefresh() { let session = await getUserSession(); if (!session) { throw \u0026#34;No session\u0026#34;; } const user = getCurrentUser(); var refreshToken = session.getRefreshToken(); const refreshSession = promisify(user.refreshSession).bind(user); session = await refreshSession(refreshToken); return session; } "
},
{
	"uri": "http://example.org/aws/3_jwt.md/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/nodejs/",
	"title": "Node.Js",
	"tags": [],
	"description": "",
	"content": "Node.JS Some Chapter title Lorem Ipsum.\nhttps://learn.netlify.app/en/basics/configuration/\nInside project folder, hugo new site Name_of_project cd themes git clone https://github.com/matcornic/hugo-theme-learn.git cd .. hugo serve\nbuilding the website hugo (before deploy, built it)\nHeader layouts/logo.html\ncolor config.toml or static/css (own colour)\n"
},
{
	"uri": "http://example.org/asp-.net/",
	"title": "ASP.NET",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/aws/4_serverless.md/",
	"title": "Serverless",
	"tags": [],
	"description": "",
	"content": "Serverless Lambda Function API Gateway Cognito "
},
{
	"uri": "http://example.org/frontend/tailwind/",
	"title": "Tailwind",
	"tags": [],
	"description": "",
	"content": "Haha "
},
{
	"uri": "http://example.org/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "Chapter Xe Some Chapter title Lorem Ipsum.\nhttps://learn.netlify.app/en/basics/configuration/\nInside project folder, hugo new site Name_of_project cd themes git clone https://github.com/matcornic/hugo-theme-learn.git cd .. hugo serve\nbuilding the website hugo (before deploy, built it)\nHeader layouts/logo.html\ncolor config.toml or static/css (own colour)\n"
},
{
	"uri": "http://example.org/javascript/",
	"title": "Javascript",
	"tags": [],
	"description": "",
	"content": "Javascript "
},
{
	"uri": "http://example.org/aws/sst.md/",
	"title": "SST",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/angular/hahahoho/",
	"title": "Angular",
	"tags": [],
	"description": "",
	"content": "Haha "
},
{
	"uri": "http://example.org/php/",
	"title": "PHP",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/angular/",
	"title": "Angular.js",
	"tags": [],
	"description": "",
	"content": "Angular "
},
{
	"uri": "http://example.org/vue/",
	"title": "Vue.js",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/reactnative/",
	"title": "React Native",
	"tags": [],
	"description": "",
	"content": "REACT "
},
{
	"uri": "http://example.org/kotlin/",
	"title": "Kotlin",
	"tags": [],
	"description": "",
	"content": "Kotlin "
},
{
	"uri": "http://example.org/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Hello! "
},
{
	"uri": "http://example.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]