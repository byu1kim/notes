<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serverless on Byul Notes</title>
    <link>http://example.org/aws/4_serverless.md/</link>
    <description>Recent content in Serverless on Byul Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/aws/4_serverless.md/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lambda Function</title>
      <link>http://example.org/aws/4_serverless.md/1-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/aws/4_serverless.md/1-lambda/</guid>
      <description>Lambda Serverless, event-driven compute service
Serverless Cloud-native development model. Applications without having to manage severs. (Pay what you use) Lambda Function Setup AWS &amp;gt; Lambda &amp;gt; Function &amp;gt; Create function Function name : get/post/put etc Runtime : Lambda function language (Node.js 18.x) Architecture : x86_64 (arm64 is for mobile) Lambda Function mjs : Moduled Javascript (ES6, same as javascript file with type:module in package.json) Hit Deploy &amp;gt; Test Every lambda is triggered by something &amp;hellip; here, test btn is the trigger API Gateway is one of trigger (it is kind of nginx , accept http request) Check console.</description>
    </item>
    
    <item>
      <title>API Gateway</title>
      <link>http://example.org/aws/4_serverless.md/2-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/aws/4_serverless.md/2-api/</guid>
      <description>API Gateway Setup AWS &amp;gt; API Gateway &amp;gt; HTTP API &amp;gt; Build (or Create API) &amp;gt; API name &amp;gt; Review and Create API Gateway &amp;gt; Develop &amp;gt; Routes : Create endpoints (get, post, etc) Dynamic ID ex) get, /book/{id} Click Route &amp;gt; Route details &amp;gt; Attach integration Integration target &amp;gt; Lambda function &amp;gt; Select lambda function you created it for URL : API &amp;gt; invoke URL CORS API Gateway &amp;gt; Develop &amp;gt; CORS access-control-allow-origin : * (only for the get request) access-control-allow-headers : * =&amp;gt; not safe way but just use it for now credentials :no </description>
    </item>
    
    <item>
      <title>Cognito</title>
      <link>http://example.org/aws/4_serverless.md/3-cognito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/aws/4_serverless.md/3-cognito/</guid>
      <description>Cognito import { CognitoUserPool, CognitoUser, AuthenticationDetails, CognitoUserAttribute } from &amp;#34;amazon-cognito-identity-js&amp;#34;; function promisify(func) { return function () { return new Promise((resolve, reject) =&amp;gt; { func.apply(this, [ ...Array.from(arguments), (err, result) =&amp;gt; { if (err) { reject(err); return; } resolve(result); }, ]); }); }; } // Add VITE_USER_POOL_ID, and VITE_USER_POOL_CLIENT_ID to a .env.local file in your project root const poolData = { UserPoolId: process.env.REACT_APP_USER_POOL_ID, ClientId: process.env.REACT_APP_USER_POOL_CLIENT_ID, }; const userPool = new CognitoUserPool(poolData); async function getUserSession() { const user = getCurrentUser(); if (!</description>
    </item>
    
  </channel>
</rss>
